
R version 3.6.2 (2019-12-12) -- "Dark and Stormy Night"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> 
> library(StateSpaceInference)
> library(parallel)
> library(ggplot2)
> library(ggalt)
Registered S3 methods overwritten by 'ggalt':
  method                  from   
  grid.draw.absoluteGrob  ggplot2
  grobHeight.absoluteGrob ggplot2
  grobWidth.absoluteGrob  ggplot2
  grobX.absoluteGrob      ggplot2
  grobY.absoluteGrob      ggplot2
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> 
> sessionInfo()
R version 3.6.2 (2019-12-12)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 18.04.4 LTS

Matrix products: default
BLAS:   /usr/lib/x86_64-linux-gnu/openblas/libblas.so.3
LAPACK: /usr/lib/x86_64-linux-gnu/libopenblasp-r0.2.20.so

locale:
 [1] LC_CTYPE=en_AU.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_AU.UTF-8        LC_COLLATE=en_AU.UTF-8    
 [5] LC_MONETARY=en_AU.UTF-8    LC_MESSAGES=en_AU.UTF-8   
 [7] LC_PAPER=en_AU.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_AU.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] parallel  stats     graphics  grDevices utils     datasets  methods  
[8] base     

other attached packages:
[1] dplyr_0.8.3               ggalt_0.4.0              
[3] ggplot2_3.2.1             StateSpaceInference_2.0.0

loaded via a namespace (and not attached):
 [1] Rcpp_1.0.3         Rttf2pt1_1.3.7     magrittr_1.5       maps_3.3.0        
 [5] MASS_7.3-51.4      tidyselect_0.2.5   munsell_0.5.0      colorspace_1.4-1  
 [9] R6_2.4.1           rlang_0.4.2        grid_3.6.2         gtable_0.3.0      
[13] ash_1.0-15         KernSmooth_2.23-15 extrafontdb_1.0    withr_2.1.2       
[17] proj4_1.0-8        lazyeval_0.2.2     assertthat_0.2.1   tibble_2.1.3      
[21] lifecycle_0.1.0    crayon_1.3.4       RColorBrewer_1.1-2 purrr_0.3.3       
[25] glue_1.3.1.9000    compiler_3.6.2     pillar_1.4.2       scales_1.1.0      
[29] extrafont_0.17     pkgconfig_2.0.3   
> 
> seed <- 4
> set.seed(seed)
> 
> cl <- makeCluster(parallel::detectCores())
> #cl = "mclapply"
> #cl <- NULL
> 
> # length of the time series
> TT <- 20
> # parameters
> alpha <- 2; beta <- 0; gamma <- 0.1 * sqrt(1/2); mu <- 1; phi <- 0.80; sh <- 0.6; s_v <- 1
> # simulating the hidden states
> h <- rep(0, TT)
> h[1] <- rnorm(1, mu/(1-phi), sd = sqrt(sh^2/(1-phi^2)))
> for (t in 2:TT) {
+   h[t] <- mu + phi * (h[t - 1]) + sh * rnorm(1)
+ }
> 
> # emission of the observations
> yobs <- exp(h/2) * stabledist::rstable(TT, alpha, beta, gamma, s_v)
> 
> 
> true_states <- h
> 
> inp <- list(
+   alpha = alpha,
+   beta = beta,
+   gamma = gamma,
+   mu = mu,
+   s_h = sh,
+   s_v = s_v,
+   y = yobs
+ )
> 
> Ntheta <- 20
> Nx <- 2500
> pacc = 0.05
> 
> prior_sample <- data.frame(rprior_vol(Ntheta))
> 
> prior_sample <- as.matrix(prior_sample, ncol = 1)
> 
> trans <- function(x, trans_args){
+   theta1 <- qnorm((x + 1)/2)
+   return(theta1)
+ }
> 
> invtrans <- function(x, trans_args){
+   theta1 <- 2*pnorm(x) - 1
+   return(theta1)
+ }
> 
> acceptance_correction <- function(x){
+   0.5/(dnorm(qnorm((x+1)/2)))
+ }
> 
> full_list <- SMC2_ABC(prior_sample, dprior = dprior_vol, loss = loss_volatility, loss_args = inp, Ntheta = Ntheta, Nx = Nx, pacc = pacc, cl = cl, dt = 1, ESS_threshold = 0.5, TT = TT, trans = trans, invtrans = invtrans, cov_coef = 1.5, acceptance_correction = acceptance_correction)
[1] -0.9277250  0.8038202  0.8209574  0.8339365  0.8581119
[1] "1. 3.6187494065251"
[1] "resample"
[1] 0.6356299 0.7979313 0.7985153 0.8236644 0.9002609
[1] "SMC:  12.3329583104553"
acceptance rate:  0.95 
[1] 0.7498194 0.7858457 0.7985153 0.7997465 0.8355621
[1] "2. 19.0729042692789"
[1] 0.7498194 0.7979313 0.7985153 0.7997465 0.8355621
[1] "3. 19.6142289805716"
[1] 0.7498194 0.7979313 0.7985153 0.8038202 0.8355621
[1] "4. 19.6626206718907"
[1] 0.7498194 0.7982067 0.7997465 0.8236644 0.8355621
[1] "5. 17.1610619271769"
[1] 0.7498194 0.7982067 0.7997465 0.8236644 0.8355621
[1] "6. 16.9442238632355"
[1] 0.7498194 0.7982067 0.7997465 0.8236644 0.8355621
[1] "7. 17.6316773289748"
[1] 0.7498194 0.7982067 0.7997465 0.8236644 0.8355621
[1] "8. 18.1869654798377"
[1] 0.7498194 0.7985153 0.7997465 0.8236644 0.8355621
[1] "9. 15.5148351123113"
[1] 0.7498194 0.7985153 0.8038202 0.8355621 0.8355621
[1] "10. 11.8990796817107"
[1] 0.7498194 0.7985153 0.8236644 0.8355621 0.8355621
[1] "11. 11.1484782747962"
[1] 0.7498194 0.7997465 0.8236644 0.8355621 0.8355621
[1] "12. 10.1284499518107"
[1] 0.7498194 0.7997465 0.8236644 0.8355621 0.8355621
[1] "13. 9.96001073749099"
[1] "resample"
[1] 0.7687398 0.7858198 0.8115683 0.8216405 0.8695219
[1] "SMC:  18.6798352849122"
[1] 0.7687398 0.7842913 0.7929709 0.8192323 0.8695219
[1] "SMC:  17.3433745063476"
[1] 0.7687398 0.7858198 0.8115683 0.8216405 0.8695219
[1] "SMC:  18.1711502892808"
[1] 0.7687398 0.7858198 0.8115683 0.8216405 0.8695219
[1] "SMC:  17.8769557033481"
[1] 0.7687398 0.7929709 0.8212795 0.8346407 0.8695219
[1] "SMC:  16.3851922424537"
[1] 0.7687398 0.7929709 0.8212795 0.8346407 0.8695219
[1] "SMC:  15.9771119943029"
[1] 0.7687398 0.7929709 0.8192323 0.8251512 0.8695219
[1] "SMC:  15.8998952026957"
[1] 0.7687398 0.7929709 0.8192323 0.8251512 0.8695219
[1] "SMC:  16.2147090320518"
[1] 0.7687398 0.7966839 0.8212795 0.8346407 0.8695219
[1] "SMC:  14.7284099875208"
[1] 0.7687398 0.8165382 0.8216405 0.8371665 0.8695219
[1] "SMC:  12.3579928359757"
[1] 0.7687398 0.8165382 0.8216405 0.8371665 0.8695219
[1] "SMC:  12.1741469752583"
[1] 0.7687398 0.8165382 0.8251512 0.8371665 0.8695219
[1] "SMC:  11.8074974099583"
[1] 0.7687398 0.8165382 0.8251512 0.8371665 0.8695219
[1] "SMC:  11.4769121298295"
acceptance rate:  0.9 
[1] 0.7966839 0.8212795 0.8346407 0.8437699 0.8539503
[1] "14. 19.7725992900846"
[1] 0.7966839 0.8212795 0.8346407 0.8437699 0.8539503
[1] "15. 19.371564794868"
[1] 0.7966839 0.8212795 0.8251512 0.8437699 0.8539503
[1] "16. 19.0323608983307"
[1] 0.7966839 0.8212795 0.8346407 0.8437699 0.8539503
[1] "17. 18.8055825016588"
[1] 0.7966839 0.8212795 0.8346407 0.8437699 0.8539503
[1] "18. 18.2653109597942"
[1] 0.7966839 0.8212795 0.8346407 0.8437699 0.8539503
[1] "19. 18.2204702417397"
[1] 0.7966839 0.8212795 0.8251512 0.8437699 0.8539503
[1] "20. 18.1426711407182"
There were 50 or more warnings (use warnings() to see the first 50)
> 
> 
> state_df <- get_state(full_list, probs = c(0.025, 0.5, 0.975))
> 
> state_df$state <- true_states
> 
> theta_df <- get_parameter(full_list)
> 
> ggplot(state_df) + aes(x = time, y = state, ymin = lower, ymax = upper) + geom_step() + geom_ribbon(alpha = 0.2, stat = "stepribbon", fill = "red") + geom_step(mapping = aes(x = time, y = med), col = "red") + ggthemes::theme_base() + scale_y_continuous(expand = c(0, 0)) + scale_x_continuous(expand = c(0, 0))
> 
> ggplot(theta_df[which(theta_df$time %% 5 == 0),]) + aes(x = value, weights = weight, col = factor(time)) + geom_density() + facet_wrap(~parameter, scales = "free")
> 
> theta_df <- theta_df %>%
+   filter(time == TT) %>%
+   mutate(seed = seed, type = "ABC") %>%
+   select(-parameter, -time)
> 
> save.image()
> #save(state_df, file = "state_df.RData")
> saveRDS(theta_df, file = paste0("theta_df_", seed,".RData"))
> 
> proc.time()
   user  system elapsed 
  5.547   0.493 121.791 
