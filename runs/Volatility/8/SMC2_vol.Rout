
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> library(StateSpaceInference)
> library(parallel)
> library(ggplot2)
> library(ggalt)
> 
> sessionInfo()
R version 3.5.1 (2018-07-02)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: SUSE Linux Enterprise Server 12 SP2

Matrix products: default
BLAS/LAPACK: /pkg/suse12/software/openblas/0.2.20-gcc-6.4.0-2.28/lib/libopenblas_sandybridgep-r0.2.20.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] parallel  stats     graphics  grDevices utils     datasets  methods  
[8] base     

other attached packages:
[1] ggalt_0.4.0                ggplot2_3.1.1             
[3] StateSpaceInference_1.2.10

loaded via a namespace (and not attached):
 [1] Rcpp_1.0.1         Rttf2pt1_1.3.7     magrittr_1.5       maps_3.3.0        
 [5] MASS_7.3-51.1      tidyselect_0.2.5   munsell_0.5.0      colorspace_1.4-1  
 [9] R6_2.4.0           rlang_0.4.0        plyr_1.8.4         dplyr_0.8.0.1     
[13] grid_3.5.1         gtable_0.3.0       ash_1.0-15         KernSmooth_2.23-15
[17] extrafontdb_1.0    withr_2.1.2        proj4_1.0-8        lazyeval_0.2.2    
[21] assertthat_0.2.1   tibble_2.1.1       crayon_1.3.4       RColorBrewer_1.1-2
[25] purrr_0.3.2        glue_1.3.1         compiler_3.5.1     pillar_1.4.0      
[29] scales_1.0.0       extrafont_0.17     pkgconfig_2.0.2   
> set.seed(1)
> 
> #cl <- makeCluster(parallel::detectCores() - 1)
> cl = "mclapply"
> #cl <- NULL
> 
> # length of the time series
> TT <- 40
> # parameters
> alpha <- 2; beta <- 0; gamma <- sqrt(2 * 0.1)/2; mu <- -0.2; phi <- 0.95; sh <- 0.6; s_v <- 1
> # simulating the hidden states
> h <- rep(0, TT)
> h[1] <- rnorm(1, mu, sh/(sqrt(1-phi^2)))
> for (t in 2:TT) {
+   h[t] <- mu + phi * (h[t - 1]) + sh * rnorm(1)
+ }
> 
> # emission of the observations
> yobs <- exp(h/2) * rnorm(TT, s_v, 0.1)
> 
> 
> true_states <- h
> 
> inp <- list(
+   alpha = alpha,
+   beta = beta,
+   gamma = gamma,
+   mu = mu,
+   s_h = sh,
+   s_v = s_v,
+   y = yobs
+ )
> 
> Ntheta <- 240
> Nx <- 50000
> pacc = 0.005
> 
> prior_sample <- data.frame(rprior_vol(Ntheta))
> 
> prior_sample <- as.matrix(prior_sample, ncol = 1)
> 
> trans <- function(x, trans_args){
+   theta1 <- qnorm((x + 1)/2)
+   return(theta1)
+ }
> 
> invtrans <- function(x, trans_args){
+   theta1 <- 2*pnorm(x) - 1
+   return(theta1)
+ }
> 
> acceptance_correction <- function(x){
+   0.5/(dnorm(qnorm((x+1)/2)))
+ }
> 
> full_list <- SMC2_ABC(prior_sample, dprior = dprior_vol, loss = loss_volatility, loss_args = inp, Ntheta = Ntheta, Nx = Nx, pacc = pacc, cl = cl, dt = 1, ESS_threshold = 0.5, TT = TT, trans = trans, invtrans = invtrans, cov_coef = 0.5, acceptance_correction = acceptance_correction)
[1] -0.94442576 -0.47505178  0.01407121  0.62687042  0.99215474
[1] "1. 216.250321646614"
[1] -0.94442576 -0.03002064  0.56570267  0.77290189  0.99215474
[1] "2. 133.680321417815"
[1] -0.9444258  0.5657027  0.7541151  0.8546042  0.9921547
[1] "3. 71.4914790626232"
[1] "resample"
[1] -0.9542099  0.5142425  0.7376570  0.8475622  0.9997096
[1] "SMC:  208.045972523788"
[1] -0.9542099  0.6493661  0.7903404  0.8584947  0.9997096
[1] "SMC:  180.148124248177"
[1] -0.9542099  0.7228199  0.8190791  0.8814355  0.9997096
[1] "SMC:  154.002694115206"
acceptance rate:  0.7791667 
[1] -0.5596006  0.7296151  0.8003083  0.8515113  0.9593596
[1] "4. 235.535017361296"
[1] -0.5596006  0.7296151  0.8003083  0.8515113  0.9593596
[1] "5. 234.549302075436"
[1] -0.5596006  0.7575189  0.8081113  0.8601037  0.9593596
[1] "6. 233.136135374768"
[1] -0.5596006  0.7575189  0.8081113  0.8601037  0.9593596
[1] "7. 230.477814229049"
[1] -0.5596006  0.7575189  0.8014170  0.8532538  0.9593596
[1] "8. 228.119920559354"
[1] -0.5596006  0.7575189  0.8003083  0.8515113  0.9593596
[1] "9. 225.187753586112"
[1] -0.5596006  0.7575189  0.8003083  0.8515113  0.9593596
[1] "10. 223.041895384792"
[1] -0.5596006  0.7483169  0.7903404  0.8418135  0.9593596
[1] "11. 217.93715764944"
[1] -0.5596006  0.7371980  0.7903404  0.8417190  0.9593596
[1] "12. 215.962373698031"
[1] -0.5596006  0.7371980  0.7903404  0.8417190  0.9593596
[1] "13. 215.86737859195"
[1] -0.5596006  0.7606381  0.8081113  0.8532538  0.9593596
[1] "14. 217.201993722241"
[1] -0.5596006  0.7606381  0.8081113  0.8532538  0.9593596
[1] "15. 213.912867654898"
[1] -0.5596006  0.7617053  0.8081113  0.8573846  0.9593596
[1] "16. 211.175868524077"
[1] -0.5596006  0.7666123  0.8110197  0.8601037  0.9593596
[1] "17. 204.483016569801"
[1] -0.5596006  0.7692580  0.8158297  0.8617377  0.9593596
[1] "18. 199.582855518804"
[1] -0.5596006  0.7666123  0.8109568  0.8584947  0.9593596
[1] "19. 200.365960520201"
[1] -0.5596006  0.7666123  0.8093043  0.8532538  0.9593596
[1] "20. 198.957221498623"
[1] -0.5596006  0.7606381  0.8003083  0.8426460  0.9593596
[1] "21. 195.869756818212"
[1] -0.5596006  0.7606381  0.8003083  0.8418135  0.9593596
[1] "22. 194.800364314176"
[1] -0.5596006  0.7575189  0.8003083  0.8417190  0.9593596
[1] "23. 193.233283162585"
[1] -0.5596006  0.7606381  0.8014170  0.8475622  0.9593596
[1] "24. 192.955823101019"
[1] -0.5596006  0.7636030  0.8081113  0.8515113  0.9593596
[1] "25. 192.953672794771"
[1] -0.5596006  0.7666123  0.8081113  0.8532538  0.9593596
[1] "26. 190.588529053122"
[1] -0.5596006  0.7696509  0.8110197  0.8601037  0.9593596
[1] "27. 185.280065738545"
[1] -0.5596006  0.7856755  0.8294077  0.8639139  0.9593596
[1] "28. 177.57402638369"
[1] -0.5596006  0.8028374  0.8425973  0.8672724  0.9593596
[1] "29. 162.381062573573"
[1] -0.5596006  0.8081113  0.8425973  0.8672724  0.9593596
[1] "30. 154.910101000215"
[1] -0.5596006  0.8081113  0.8418135  0.8672724  0.9593596
[1] "31. 154.519896144479"
[1] -0.5596006  0.8093043  0.8475622  0.8672724  0.9593596
[1] "32. 147.600708844499"
[1] 0.3639972 0.8093043 0.8475622 0.8672724 0.9593596
[1] "33. 144.995839635687"
[1] 0.3639972 0.8110197 0.8515113 0.8845204 0.9593596
[1] "34. 138.332500547037"
[1] 0.3639972 0.8317395 0.8601037 0.8853496 0.9593596
[1] "35. 124.547216342411"
[1] 0.3639972 0.8417190 0.8639139 0.8919703 0.9593596
[1] "36. 111.261024247846"
[1] "resample"
[1] 0.6984034 0.8120119 0.8465933 0.8802506 0.9777507
[1] "SMC:  219.917399929268"
[1] 0.6984034 0.8130018 0.8470225 0.8802506 0.9777507
[1] "SMC:  219.68793412997"
[1] 0.6984034 0.8165467 0.8509078 0.8813247 0.9777507
[1] "SMC:  222.448988517557"
[1] 0.6984034 0.8124131 0.8454117 0.8765005 0.9777507
[1] "SMC:  214.251144507123"
[1] 0.6984034 0.8124131 0.8454117 0.8765005 0.9777507
[1] "SMC:  212.365524394603"
[1] 0.6984034 0.8161020 0.8498497 0.8802506 0.9777507
[1] "SMC:  216.153983343081"
[1] 0.6984034 0.8161020 0.8486971 0.8776791 0.9777507
[1] "SMC:  213.235514802614"
[1] 0.6984034 0.8120119 0.8452885 0.8755351 0.9777507
[1] "SMC:  206.908453788443"
[1] 0.6984034 0.8092139 0.8403885 0.8731298 0.9777507
[1] "SMC:  203.245471228358"
[1] 0.6984034 0.8092139 0.8398295 0.8731298 0.9777507
[1] "SMC:  202.793232489428"
[1] 0.6984034 0.8050168 0.8365221 0.8670680 0.9777507
[1] "SMC:  194.576992639283"
[1] 0.6984034 0.8021927 0.8363529 0.8663419 0.9777507
[1] "SMC:  191.544462616681"
[1] 0.6984034 0.8048103 0.8365221 0.8663419 0.9777507
[1] "SMC:  191.143786312373"
[1] 0.6984034 0.8120119 0.8421858 0.8732919 0.9777507
[1] "SMC:  199.890153637654"
[1] 0.6984034 0.8120119 0.8403885 0.8726057 0.9777507
[1] "SMC:  196.51836198749"
[1] 0.6984034 0.8124131 0.8403885 0.8731298 0.9777507
[1] "SMC:  195.9729301902"
[1] 0.6984034 0.8165467 0.8470225 0.8764544 0.9777507
[1] "SMC:  198.724072288708"
[1] 0.6984034 0.8173750 0.8470225 0.8759648 0.9777507
[1] "SMC:  196.043005395393"
[1] 0.6984034 0.8124131 0.8393533 0.8679191 0.9777507
[1] "SMC:  188.086747584718"
[1] 0.6984034 0.8120119 0.8373031 0.8663419 0.9777507
[1] "SMC:  183.14375640776"
[1] 0.6984034 0.8048103 0.8349661 0.8635814 0.9777507
[1] "SMC:  175.181676513948"
[1] 0.6984034 0.8021927 0.8339798 0.8632624 0.9777507
[1] "SMC:  172.881786498604"
[1] 0.6984034 0.8002767 0.8317365 0.8632463 0.9777507
[1] "SMC:  169.899990185685"
[1] 0.6984034 0.8050168 0.8350013 0.8640670 0.9777507
[1] "SMC:  173.271870516596"
[1] 0.6984034 0.8085503 0.8355481 0.8655641 0.9777507
[1] "SMC:  175.361222957082"
[1] 0.6984034 0.8092139 0.8363529 0.8657075 0.9777507
[1] "SMC:  175.700867049674"
[1] 0.6984034 0.8148331 0.8398295 0.8716162 0.9777507
[1] "SMC:  180.001740273777"
Error in if (x_list[[m]]$p == 0) { : 
  missing value where TRUE/FALSE needed
Calls: SMC2_ABC -> SMC2_ABC
In addition: There were 50 or more warnings (use warnings() to see the first 50)
Execution halted
