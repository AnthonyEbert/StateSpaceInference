
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> library(StateSpaceInference)
> library(parallel)
> library(ggplot2)
> library(ggalt)
> 
> sessionInfo()
R version 3.5.1 (2018-07-02)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: SUSE Linux Enterprise Server 12 SP2

Matrix products: default
BLAS/LAPACK: /pkg/suse12/software/openblas/0.2.20-gcc-6.4.0-2.28/lib/libopenblas_sandybridgep-r0.2.20.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] parallel  stats     graphics  grDevices utils     datasets  methods  
[8] base     

other attached packages:
[1] ggalt_0.4.0                ggplot2_3.1.1             
[3] StateSpaceInference_1.2.10

loaded via a namespace (and not attached):
 [1] Rcpp_1.0.1         Rttf2pt1_1.3.7     magrittr_1.5       maps_3.3.0        
 [5] MASS_7.3-51.1      tidyselect_0.2.5   munsell_0.5.0      colorspace_1.4-1  
 [9] R6_2.4.0           rlang_0.4.0        plyr_1.8.4         dplyr_0.8.0.1     
[13] grid_3.5.1         gtable_0.3.0       ash_1.0-15         KernSmooth_2.23-15
[17] extrafontdb_1.0    withr_2.1.2        proj4_1.0-8        lazyeval_0.2.2    
[21] assertthat_0.2.1   tibble_2.1.1       crayon_1.3.4       RColorBrewer_1.1-2
[25] purrr_0.3.2        glue_1.3.1         compiler_3.5.1     pillar_1.4.0      
[29] scales_1.0.0       extrafont_0.17     pkgconfig_2.0.2   
> set.seed(1)
> 
> #cl <- makeCluster(parallel::detectCores() - 1)
> cl = "mclapply"
> #cl <- NULL
> 
> # length of the time series
> TT <- 40
> # parameters
> alpha <- 2; beta <- 0; gamma <- sqrt(0.5); mu <- -0.2; phi <- 0.95; sh <- 0.6; s_v <- 0
> # simulating the hidden states
> h <- rep(0, TT)
> h[1] <- rnorm(1, mu, sh/(sqrt(1-phi^2)))
> for (t in 2:TT) {
+   h[t] <- mu + phi * (h[t - 1]) + sh * rnorm(1)
+ }
> 
> # emission of the observations
> yobs <- exp(h/2) * rnorm(TT, 0, 1)
> 
> 
> true_states <- h
> 
> inp <- list(
+   alpha = alpha,
+   beta = beta,
+   gamma = gamma,
+   mu = mu,
+   s_h = sh,
+   s_v = s_v,
+   y = yobs
+ )
> 
> Ntheta <- 80
> Nx <- 50000
> pacc = 0.005
> 
> prior_sample <- data.frame(rprior_vol(Ntheta))
> 
> prior_sample <- as.matrix(prior_sample, ncol = 1)
> 
> trans <- function(x, trans_args){
+   theta1 <- qnorm((x + 1)/2)
+   return(theta1)
+ }
> 
> invtrans <- function(x, trans_args){
+   theta1 <- 2*pnorm(x) - 1
+   return(theta1)
+ }
> 
> acceptance_correction <- function(x){
+   0.5/(dnorm(qnorm((x+1)/2)))
+ }
> 
> full_list <- SMC2_ABC(prior_sample, dprior = dprior_vol, loss = loss_volatility, loss_args = inp, Ntheta = Ntheta, Nx = Nx, pacc = pacc, cl = cl, dt = 1, ESS_threshold = 0.5, TT = TT, trans = trans, invtrans = invtrans, cov_coef = 0.5, acceptance_correction = acceptance_correction)
[1] -0.9070782 -0.3290250  0.2608282  0.7612381  0.9228199
[1] "1. 69.7785090565527"
[1] -0.90707823 -0.09455987  0.68122911  0.88744964  0.92281987
[1] "2. 38.2947729910961"
[1] "resample"
[1] -0.9803762  0.5691752  0.8556372  0.9254440  0.9990444
[1] "SMC:  63.4144230191379"
[1] -0.9803762  0.8293420  0.9014945  0.9419741  0.9990444
[1] "SMC:  44.439827695891"
acceptance rate:  0.725 
[1] -0.6740134  0.8394301  0.8969720  0.9165768  0.9618793
[1] "3. 77.3849459969154"
[1] -0.6740134  0.8394301  0.8969720  0.9165768  0.9618793
[1] "4. 73.6487285187659"
[1] -0.6740134  0.8394301  0.8969720  0.9074653  0.9618793
[1] "5. 69.1735571611851"
[1] -0.6740134  0.8394301  0.8969720  0.9074653  0.9618793
[1] "6. 67.6057447604207"
[1] -0.6740134  0.8469073  0.8969720  0.9165768  0.9618793
[1] "7. 66.8369128129149"
[1] -0.6740134  0.8469073  0.8969720  0.9074653  0.9618793
[1] "8. 62.9555037665857"
[1] -0.6740134  0.8469073  0.8969720  0.9165768  0.9618793
[1] "9. 63.3854350639236"
[1] -0.6740134  0.8469073  0.8969720  0.9074653  0.9618793
[1] "10. 59.9354468411113"
[1] -0.6740134  0.8469073  0.8969720  0.9165768  0.9618793
[1] "11. 59.4094653855336"
[1] -0.6740134  0.8469073  0.8969720  0.9074653  0.9618793
[1] "12. 56.5197610154879"
[1] -0.6740134  0.8469073  0.8969720  0.9074653  0.9618793
[1] "13. 57.2682227959744"
[1] -0.6740134  0.8469073  0.8969720  0.9074653  0.9618793
[1] "14. 56.4525210289737"
[1] -0.6740134  0.8469073  0.8969720  0.9074653  0.9618793
[1] "15. 54.4380849444702"
[1] -0.6740134  0.8469073  0.8874496  0.9049413  0.9618793
[1] "16. 50.7632927625209"
[1] -0.6740134  0.8469073  0.8874496  0.9067109  0.9618793
[1] "17. 51.6135196356402"
[1] -0.6740134  0.8469073  0.8874496  0.9067109  0.9618793
[1] "18. 50.7393704525919"
[1] -0.6740134  0.8469073  0.8874496  0.9074653  0.9618793
[1] "19. 51.3733939166297"
[1] -0.6740134  0.8469073  0.8969720  0.9074653  0.9618793
[1] "20. 52.6026407005107"
[1] -0.6740134  0.8394301  0.8519190  0.8994217  0.9618793
[1] "21. 43.6206038760142"
[1] -0.6740134  0.8394301  0.8519190  0.8994217  0.9618793
[1] "22. 43.4916333350936"
[1] -0.6740134  0.8394301  0.8519190  0.8994217  0.9618793
[1] "23. 42.3963191862743"
[1] -0.6740134  0.8394301  0.8519190  0.9014945  0.9618793
[1] "24. 42.002936469992"
[1] -0.6740134  0.8394301  0.8519190  0.9014945  0.9618793
[1] "25. 41.6382652825331"
[1] -0.6740134  0.8469073  0.8812137  0.9049413  0.9618793
[1] "26. 43.1831801898799"
[1] -0.6740134  0.8394301  0.8479369  0.8969720  0.9618793
[1] "27. 37.8237960687848"
[1] "resample"
[1] 0.5200939 0.8383738 0.8806023 0.9018262 0.9422054
[1] "SMC:  75.3797453071572"
[1] 0.5200939 0.8529324 0.8882435 0.9067584 0.9422054
[1] "SMC:  68.0884548096855"
[1] 0.5200939 0.8511259 0.8853720 0.9018262 0.9422054
[1] "SMC:  70.0029521332801"
[1] 0.5200939 0.8494534 0.8848516 0.9015656 0.9422054
[1] "SMC:  70.8480213609696"
[1] 0.5200939 0.8423789 0.8737955 0.9002613 0.9422054
[1] "SMC:  72.3536931797052"
[1] 0.5200939 0.8465693 0.8737955 0.9002613 0.9422054
[1] "SMC:  71.8143175113106"
[1] 0.5200939 0.8494534 0.8848516 0.9015656 0.9422054
[1] "SMC:  69.352831844955"
[1] 0.5200939 0.8465693 0.8737955 0.9007634 0.9422054
[1] "SMC:  70.6097126487076"
[1] 0.5200939 0.8511259 0.8848516 0.9015656 0.9422054
[1] "SMC:  67.5857059828128"
[1] 0.5200939 0.8465693 0.8737955 0.9002613 0.9422054
[1] "SMC:  69.4755510373385"
[1] 0.5200939 0.8482258 0.8806023 0.9002613 0.9422054
[1] "SMC:  68.4412538169647"
[1] 0.5200939 0.8465693 0.8724238 0.8990723 0.9422054
[1] "SMC:  68.9346710185787"
[1] 0.5200939 0.8482258 0.8737955 0.9007634 0.9422054
[1] "SMC:  68.2411207944883"
[1] 0.5200939 0.8482258 0.8737955 0.9002613 0.9422054
[1] "SMC:  67.2948487466657"
[1] 0.5200939 0.8423789 0.8715081 0.8979876 0.9422054
[1] "SMC:  68.354721136632"
[1] 0.5200939 0.8359177 0.8704129 0.8973887 0.9422054
[1] "SMC:  68.5716558330456"
[1] 0.5200939 0.8383738 0.8707560 0.8973887 0.9422054
[1] "SMC:  67.9479834322636"
[1] 0.5200939 0.8359177 0.8704129 0.8973887 0.9422054
[1] "SMC:  67.923573000935"
[1] 0.5200939 0.8359177 0.8704129 0.8973887 0.9422054
[1] "SMC:  67.6538709103113"
[1] 0.5200939 0.8465693 0.8724238 0.8990723 0.9422054
[1] "SMC:  66.4789660770236"
[1] 0.5200939 0.8315879 0.8578915 0.8882435 0.9422054
[1] "SMC:  65.458521116015"
[1] 0.5200939 0.8315879 0.8578915 0.8905533 0.9422054
[1] "SMC:  65.9013521366913"
[1] 0.5200939 0.8315879 0.8542737 0.8882435 0.9422054
[1] "SMC:  65.8562672525074"
[1] 0.5200939 0.8320400 0.8589901 0.8905533 0.9422054
[1] "SMC:  65.923818451082"
[1] 0.5200939 0.8320400 0.8589901 0.8905533 0.9422054
[1] "SMC:  65.6389836212458"
[1] 0.5200939 0.8329027 0.8662993 0.8941133 0.9422054
[1] "SMC:  65.1814664918862"
[1] 0.5200939 0.8315879 0.8542737 0.8876491 0.9422054
[1] "SMC:  63.6698183906561"
acceptance rate:  0.825 
[1] 0.7446564 0.8359177 0.8542737 0.8737955 0.9069935
[1] "28. 79.5716182360643"
[1] 0.7446564 0.8383738 0.8578915 0.8737955 0.9069935
[1] "29. 78.8249610730597"
[1] 0.7446564 0.8359177 0.8542737 0.8737955 0.9069935
[1] "30. 79.0508847594073"
[1] 0.7446564 0.8383738 0.8578915 0.8737955 0.9069935
[1] "31. 78.3338386225656"
[1] 0.7446564 0.8394301 0.8589901 0.8737955 0.9069935
[1] "32. 77.2615493178245"
[1] 0.7446564 0.8465693 0.8589901 0.8848516 0.9069935
[1] "33. 75.6258310182656"
[1] 0.7446564 0.8465693 0.8589901 0.8848516 0.9069935
[1] "34. 75.1601945600442"
[1] 0.7446564 0.8465693 0.8589901 0.8848516 0.9069935
[1] "35. 74.5148491213918"
[1] 0.7446564 0.8482258 0.8686988 0.8848516 0.9069935
[1] "36. 70.9337211919192"
[1] 0.7446564 0.8511259 0.8704129 0.8848516 0.9069935
[1] "37. 66.503309144336"
[1] 0.7446564 0.8529324 0.8737955 0.8973887 0.9069935
[1] "38. 59.5904618174788"
[1] 0.7446564 0.8578915 0.8737955 0.9015656 0.9069935
[1] "39. 48.870061407191"
[1] 0.7446564 0.8578915 0.8737955 0.9015656 0.9069935
[1] "40. 48.7065532930777"
There were 50 or more warnings (use warnings() to see the first 50)
> 
> 
> state_df <- get_state(full_list, probs = c(0.25, 0.5, 0.75))
> 
> state_df$state <- true_states
> 
> theta_df <- get_parameter(full_list)
> 
> save.image()
> save(state_df, file = "state_df.RData")
> save(theta_df, file = "theta_df.RData")
> 
> ggplot(state_df) + aes(x = time, y = state, ymin = lower, ymax = upper) + geom_step() + geom_ribbon(alpha = 0.2, stat = "stepribbon", fill = "red") + geom_step(mapping = aes(x = time, y = med), col = "red") + ggthemes::theme_base() + scale_y_continuous(expand = c(0, 0)) + scale_x_continuous(expand = c(0, 0))
> 
> ggplot(theta_df[which(theta_df$time %% 5 == 0),]) + aes(x = value, weights = weight, col = factor(time)) + geom_density() + facet_wrap(~parameter, scales = "free")
> 
> proc.time()
     user    system   elapsed 
23330.309  1115.979  1991.179 
