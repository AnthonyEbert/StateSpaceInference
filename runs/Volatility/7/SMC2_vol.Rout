
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> library(StateSpaceInference)
> library(parallel)
> library(ggplot2)
> library(ggalt)
> 
> sessionInfo()
R version 3.5.1 (2018-07-02)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: SUSE Linux Enterprise Server 12 SP2

Matrix products: default
BLAS/LAPACK: /pkg/suse12/software/openblas/0.2.20-gcc-6.4.0-2.28/lib/libopenblas_sandybridgep-r0.2.20.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] parallel  stats     graphics  grDevices utils     datasets  methods  
[8] base     

other attached packages:
[1] ggalt_0.4.0                ggplot2_3.1.1             
[3] StateSpaceInference_1.2.10

loaded via a namespace (and not attached):
 [1] Rcpp_1.0.1         Rttf2pt1_1.3.7     magrittr_1.5       maps_3.3.0        
 [5] MASS_7.3-51.1      tidyselect_0.2.5   munsell_0.5.0      colorspace_1.4-1  
 [9] R6_2.4.0           rlang_0.4.0        plyr_1.8.4         dplyr_0.8.0.1     
[13] grid_3.5.1         gtable_0.3.0       ash_1.0-15         KernSmooth_2.23-15
[17] extrafontdb_1.0    withr_2.1.2        proj4_1.0-8        lazyeval_0.2.2    
[21] assertthat_0.2.1   tibble_2.1.1       crayon_1.3.4       RColorBrewer_1.1-2
[25] purrr_0.3.2        glue_1.3.1         compiler_3.5.1     pillar_1.4.0      
[29] scales_1.0.0       extrafont_0.17     pkgconfig_2.0.2   
> set.seed(1)
> 
> #cl <- makeCluster(parallel::detectCores() - 1)
> cl = "mclapply"
> #cl <- NULL
> 
> # length of the time series
> TT <- 40
> # parameters
> alpha <- 2; beta <- 0; gamma <- sqrt(2 * 0.1)/2; mu <- -0.2; phi <- 0.95; sh <- 0.6; s_v <- 1
> # simulating the hidden states
> h <- rep(0, TT)
> h[1] <- rnorm(1, mu, sh/(sqrt(1-phi^2)))
> for (t in 2:TT) {
+   h[t] <- mu + phi * (h[t - 1]) + sh * rnorm(1)
+ }
> 
> # emission of the observations
> yobs <- exp(h/2) * rnorm(TT, s_v, 0.1)
> 
> 
> true_states <- h
> 
> inp <- list(
+   alpha = alpha,
+   beta = beta,
+   gamma = gamma,
+   mu = mu,
+   s_h = sh,
+   s_v = s_v,
+   y = yobs
+ )
> 
> Ntheta <- 80
> Nx <- 50000
> pacc = 0.005
> 
> prior_sample <- data.frame(rprior_vol(Ntheta))
> 
> prior_sample <- as.matrix(prior_sample, ncol = 1)
> 
> trans <- function(x, trans_args){
+   theta1 <- qnorm((x + 1)/2)
+   return(theta1)
+ }
> 
> invtrans <- function(x, trans_args){
+   theta1 <- 2*pnorm(x) - 1
+   return(theta1)
+ }
> 
> acceptance_correction <- function(x){
+   0.5/(dnorm(qnorm((x+1)/2)))
+ }
> 
> full_list <- SMC2_ABC(prior_sample, dprior = dprior_vol, loss = loss_volatility, loss_args = inp, Ntheta = Ntheta, Nx = Nx, pacc = pacc, cl = cl, dt = 1, ESS_threshold = 0.5, TT = TT, trans = trans, invtrans = invtrans, cov_coef = 0.5, acceptance_correction = acceptance_correction)
[1] -0.9070782 -0.3290250  0.2886315  0.7122633  0.9228199
[1] "1. 72.4848832775925"
[1] -0.9070782  0.1811463  0.6810141  0.7908909  0.9228199
[1] "2. 46.4447186551903"
[1] -0.9070782  0.6372694  0.7729019  0.8479369  0.9228199
[1] "3. 26.6776763322343"
[1] "resample"
[1] -0.6001168  0.6323570  0.7615246  0.8502251  0.9760494
[1] "SMC:  69.811831681007"
[1] -0.6001168  0.6849280  0.7796074  0.8563185  0.9760494
[1] "SMC:  63.822449808599"
[1] -0.6001168  0.7411242  0.8064328  0.8596888  0.9760494
[1] "SMC:  58.1419382961048"
acceptance rate:  0.7625 
[1] 0.1897968 0.7080030 0.7757209 0.8413858 0.9625617
[1] "4. 78.7703320996587"
[1] 0.1897968 0.7080030 0.7757209 0.8413858 0.9625617
[1] "5. 78.1156559190379"
[1] 0.1897968 0.7184787 0.7794307 0.8479369 0.9625617
[1] "6. 76.8176647270911"
[1] 0.1897968 0.7184787 0.7844043 0.8479369 0.9625617
[1] "7. 75.2981736209234"
[1] 0.1897968 0.7184787 0.7757209 0.8468325 0.9625617
[1] "8. 74.4912208868376"
[1] 0.1897968 0.7083892 0.7757209 0.8413858 0.9625617
[1] "9. 73.3949578029487"
[1] 0.1897968 0.7184787 0.7757209 0.8468325 0.9625617
[1] "10. 72.766118357263"
[1] 0.1897968 0.7083892 0.7757209 0.8413858 0.9625617
[1] "11. 72.3037240364505"
[1] 0.1897968 0.7080030 0.7757209 0.8283645 0.9625617
[1] "12. 71.4251624305305"
[1] 0.1897968 0.7083892 0.7757209 0.8283645 0.9625617
[1] "13. 70.9422818751567"
[1] 0.1897968 0.7214494 0.7794307 0.8479369 0.9625617
[1] "14. 70.2781751278984"
[1] 0.1897968 0.7393984 0.7844043 0.8479369 0.9625617
[1] "15. 69.3091117707722"
[1] 0.1897968 0.7411242 0.7908909 0.8502251 0.9625617
[1] "16. 68.3746365392563"
[1] 0.1897968 0.7615246 0.8064328 0.8563185 0.9625617
[1] "17. 65.790866624097"
[1] 0.1897968 0.7635840 0.8064328 0.8563185 0.9625617
[1] "18. 63.6015100288818"
[1] 0.1897968 0.7615246 0.8064328 0.8502251 0.9625617
[1] "19. 64.2161329103312"
[1] 0.1897968 0.7608546 0.8015251 0.8502251 0.9625617
[1] "20. 64.1766693311901"
[1] 0.1897968 0.7393984 0.7757209 0.8413858 0.9625617
[1] "21. 64.264348209345"
[1] 0.1897968 0.7393984 0.7757209 0.8413858 0.9625617
[1] "22. 63.5802483704186"
[1] 0.1897968 0.7393984 0.7757209 0.8413858 0.9625617
[1] "23. 63.3154380141121"
[1] 0.1897968 0.7411242 0.7794307 0.8468325 0.9625617
[1] "24. 62.3387496533711"
[1] 0.1897968 0.7603940 0.7908909 0.8479369 0.9625617
[1] "25. 62.3827371778896"
[1] 0.1897968 0.7615246 0.8015251 0.8502251 0.9625617
[1] "26. 61.329482964165"
[1] 0.1897968 0.7635840 0.8064328 0.8563185 0.9625617
[1] "27. 59.2930019291814"
[1] 0.1897968 0.7757209 0.8283645 0.8589427 0.9625617
[1] "28. 54.0920451257583"
[1] 0.1897968 0.8015251 0.8473738 0.8812738 0.9625617
[1] "29. 46.1159840576389"
[1] 0.1897968 0.8064328 0.8479369 0.8812738 0.9625617
[1] "30. 43.4315983416403"
[1] 0.1897968 0.8064328 0.8473738 0.8812738 0.9625617
[1] "31. 43.8205990009269"
[1] 0.1897968 0.8064328 0.8502251 0.8812738 0.9625617
[1] "32. 41.0177392153583"
[1] 0.1897968 0.8064328 0.8502251 0.8812738 0.9625617
[1] "33. 41.00748139237"
[1] 0.1897968 0.8283645 0.8563185 0.8812738 0.9625617
[1] "34. 38.1655946179442"
[1] "resample"
[1] 0.6762051 0.8093390 0.8460408 0.8741987 0.9353665
[1] "SMC:  76.4679166387411"
[1] 0.6762051 0.8093390 0.8460408 0.8741987 0.9353665
[1] "SMC:  76.2268791337947"
[1] 0.6762051 0.8171838 0.8499766 0.8783230 0.9353665
[1] "SMC:  76.9797227414513"
[1] 0.6762051 0.8093390 0.8444193 0.8712449 0.9353665
[1] "SMC:  74.9576760633834"
[1] 0.6762051 0.8093390 0.8444193 0.8712449 0.9353665
[1] "SMC:  74.5517996445212"
[1] 0.6762051 0.8171838 0.8475282 0.8741987 0.9353665
[1] "SMC:  75.2658950497581"
[1] 0.6762051 0.8162698 0.8475282 0.8737998 0.9353665
[1] "SMC:  75.0254052780638"
[1] 0.6762051 0.8093390 0.8444193 0.8712449 0.9353665
[1] "SMC:  73.4957827269107"
[1] 0.6762051 0.8093390 0.8439924 0.8671686 0.9353665
[1] "SMC:  72.4899022168343"
[1] 0.6762051 0.8093390 0.8444193 0.8671686 0.9353665
[1] "SMC:  72.0036695197502"
[1] 0.6762051 0.8057302 0.8426092 0.8668012 0.9353665
[1] "SMC:  69.9881697959688"
[1] 0.6762051 0.8057302 0.8426092 0.8653304 0.9353665
[1] "SMC:  69.4374249587549"
[1] 0.6762051 0.8057302 0.8426092 0.8653304 0.9353665
[1] "SMC:  69.6891468027708"
[1] 0.6762051 0.8162698 0.8460408 0.8712449 0.9353665
[1] "SMC:  71.2706763844168"
[1] 0.6762051 0.8162698 0.8460408 0.8712449 0.9353665
[1] "SMC:  70.9587252225335"
[1] 0.6762051 0.8162698 0.8460408 0.8712449 0.9353665
[1] "SMC:  70.2603865716006"
[1] 0.6762051 0.8193650 0.8499766 0.8737998 0.9353665
[1] "SMC:  70.6729741718208"
[1] 0.6762051 0.8244596 0.8499766 0.8741987 0.9353665
[1] "SMC:  70.4096610797553"
[1] 0.6762051 0.8162698 0.8460408 0.8671686 0.9353665
[1] "SMC:  68.7654068151849"
[1] 0.6762051 0.8093390 0.8439924 0.8668012 0.9353665
[1] "SMC:  67.0252064791985"
[1] 0.6762051 0.8057302 0.8426092 0.8621279 0.9353665
[1] "SMC:  64.3890150270922"
[1] 0.6762051 0.8057302 0.8416031 0.8621279 0.9353665
[1] "SMC:  63.503375190577"
[1] 0.6762051 0.8057302 0.8341350 0.8616389 0.9353665
[1] "SMC:  63.675580151789"
[1] 0.6762051 0.8070363 0.8426092 0.8621279 0.9353665
[1] "SMC:  65.4336843004516"
[1] 0.6762051 0.8093390 0.8426092 0.8653304 0.9353665
[1] "SMC:  65.7683606488203"
[1] 0.6762051 0.8093390 0.8439924 0.8653304 0.9353665
[1] "SMC:  65.8334962483212"
[1] 0.6762051 0.8171838 0.8460408 0.8712449 0.9353665
[1] "SMC:  67.201535157556"
[1] 0.6762051 0.8244596 0.8499766 0.8741987 0.9353665
[1] "SMC:  67.8010673992741"
[1] 0.6762051 0.8282476 0.8582159 0.8806100 0.9353665
[1] "SMC:  67.5213972934829"
[1] 0.6762051 0.8287939 0.8582159 0.8806100 0.9353665
[1] "SMC:  66.4025356630327"
[1] 0.6762051 0.8282476 0.8569968 0.8783230 0.9353665
[1] "SMC:  65.2461789152532"
[1] 0.6762051 0.8312298 0.8582159 0.8806100 0.9353665
[1] "SMC:  63.7994570104739"
[1] 0.6762051 0.8287939 0.8582159 0.8790660 0.9353665
[1] "SMC:  64.1294005294115"
[1] 0.6762051 0.8340452 0.8607861 0.8810610 0.9353665
[1] "SMC:  64.0178498855636"
acceptance rate:  0.7375 
[1] 0.7633460 0.8341350 0.8612556 0.8790660 0.9128549
[1] "35. 78.0411058112529"
[1] 0.7633460 0.8439924 0.8616389 0.8812738 0.9128549
[1] "36. 74.3402770812625"
[1] 0.7633460 0.8473738 0.8644381 0.8812738 0.9128549
[1] "37. 68.3782872748727"
[1] 0.7633460 0.8499766 0.8668012 0.8885519 0.9128549
[1] "38. 62.9556753951289"
[1] 0.7633460 0.8499766 0.8668012 0.8885519 0.9128549
[1] "39. 63.9250819385866"
[1] 0.7633460 0.8499766 0.8668012 0.8812738 0.9128549
[1] "40. 64.0844434043819"
There were 50 or more warnings (use warnings() to see the first 50)
> 
> 
> state_df <- get_state(full_list, probs = c(0.25, 0.5, 0.75))
> 
> state_df$state <- true_states
> 
> theta_df <- get_parameter(full_list)
> 
> save.image()
> save(state_df, file = "state_df.RData")
> save(theta_df, file = "theta_df.RData")
> 
> ggplot(state_df) + aes(x = time, y = state, ymin = lower, ymax = upper) + geom_step() + geom_ribbon(alpha = 0.2, stat = "stepribbon", fill = "red") + geom_step(mapping = aes(x = time, y = med), col = "red") + ggthemes::theme_base() + scale_y_continuous(expand = c(0, 0)) + scale_x_continuous(expand = c(0, 0))
> 
> ggplot(theta_df[which(theta_df$time %% 5 == 0),]) + aes(x = value, weights = weight, col = factor(time)) + geom_density() + facet_wrap(~parameter, scales = "free")
> 
> proc.time()
     user    system   elapsed 
26012.012  1525.486  2040.617 
