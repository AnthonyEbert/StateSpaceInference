
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> library(StateSpaceInference)
> library(parallel)
> library(ggplot2)
> library(ggalt)
> 
> sessionInfo()
R version 3.5.1 (2018-07-02)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: SUSE Linux Enterprise Server 12 SP2

Matrix products: default
BLAS/LAPACK: /pkg/suse12/software/openblas/0.2.20-gcc-6.4.0-2.28/lib/libopenblas_sandybridgep-r0.2.20.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] parallel  stats     graphics  grDevices utils     datasets  methods  
[8] base     

other attached packages:
[1] ggalt_0.4.0                ggplot2_3.1.1             
[3] StateSpaceInference_1.2.10

loaded via a namespace (and not attached):
 [1] Rcpp_1.0.1         Rttf2pt1_1.3.7     magrittr_1.5       maps_3.3.0        
 [5] MASS_7.3-51.1      tidyselect_0.2.5   munsell_0.5.0      colorspace_1.4-1  
 [9] R6_2.4.0           rlang_0.4.0        plyr_1.8.4         dplyr_0.8.0.1     
[13] grid_3.5.1         gtable_0.3.0       ash_1.0-15         KernSmooth_2.23-15
[17] extrafontdb_1.0    withr_2.1.2        proj4_1.0-8        lazyeval_0.2.2    
[21] assertthat_0.2.1   tibble_2.1.1       crayon_1.3.4       RColorBrewer_1.1-2
[25] purrr_0.3.2        glue_1.3.1         compiler_3.5.1     pillar_1.4.0      
[29] scales_1.0.0       extrafont_0.17     pkgconfig_2.0.2   
> set.seed(1)
> 
> #cl <- makeCluster(parallel::detectCores() - 1)
> cl = "mclapply"
> #cl <- NULL
> 
> # length of the time series
> TT <- 40
> # parameters
> alpha <- 2; beta <- 0; gamma <- sqrt(2 * 0.1)/2; mu <- -0.2; phi <- 0.95; sh <- 0.6; s_v <- 1
> # simulating the hidden states
> h <- rep(0, TT)
> h[1] <- rnorm(1, mu, sh/(sqrt(1-phi^2)))
> for (t in 2:TT) {
+   h[t] <- mu + phi * (h[t - 1]) + sh * rnorm(1)
+ }
> 
> # emission of the observations
> yobs <- exp(h/2) * rnorm(TT, s_v, 0.1)
> 
> 
> true_states <- h
> 
> inp <- list(
+   alpha = alpha,
+   beta = beta,
+   gamma = gamma,
+   mu = mu,
+   s_h = sh,
+   s_v = s_v,
+   y = yobs
+ )
> 
> Ntheta <- 240
> Nx <- 50000
> pacc = 0.0025
> 
> prior_sample <- data.frame(rprior_vol(Ntheta))
> 
> prior_sample <- as.matrix(prior_sample, ncol = 1)
> 
> trans <- function(x, trans_args){
+   theta1 <- qnorm((x + 1)/2)
+   return(theta1)
+ }
> 
> invtrans <- function(x, trans_args){
+   theta1 <- 2*pnorm(x) - 1
+   return(theta1)
+ }
> 
> acceptance_correction <- function(x){
+   0.5/(dnorm(qnorm((x+1)/2)))
+ }
> 
> full_list <- SMC2_ABC(prior_sample, dprior = dprior_vol, loss = loss_volatility, loss_args = inp, Ntheta = Ntheta, Nx = Nx, pacc = pacc, cl = cl, dt = 1, ESS_threshold = 0.5, TT = TT, trans = trans, invtrans = invtrans, cov_coef = 0.5, acceptance_correction = acceptance_correction)
[1] -0.94442576 -0.48565996  0.01407121  0.62461018  0.99215474
[1] "1. 216.794217712882"
[1] -0.94442576 -0.04537258  0.56436423  0.77290189  0.99215474
[1] "2. 135.894609441904"
[1] -0.9444258  0.5657027  0.7296151  0.8546042  0.9921547
[1] "3. 72.4333996223885"
[1] "resample"
[1] -0.9548032  0.5508260  0.7224600  0.8421370  0.9861392
[1] "SMC:  207.005034344277"
[1] -0.9548032  0.6616899  0.7878856  0.8507429  0.9861392
[1] "SMC:  181.742112151844"
[1] -0.9548032  0.7033623  0.8144432  0.8612605  0.9861392
[1] "SMC:  157.45495360312"
acceptance rate:  0.7958333 
[1] -0.4278381  0.6994086  0.8062386  0.8424085  0.9601254
[1] "4. 234.800119113986"
[1] -0.4278381  0.6994086  0.8062386  0.8424085  0.9601254
[1] "5. 232.56176567561"
[1] -0.4278381  0.7226256  0.8180668  0.8497946  0.9601254
[1] "6. 230.753247568439"
[1] -0.4278381  0.7296151  0.8180668  0.8485310  0.9601254
[1] "7. 227.396302045961"
[1] -0.4278381  0.7122633  0.8126350  0.8434730  0.9601254
[1] "8. 223.754488510885"
[1] -0.4278381  0.7122633  0.8117882  0.8424085  0.9601254
[1] "9. 220.126211842443"
[1] -0.4278381  0.7296151  0.8144432  0.8424085  0.9601254
[1] "10. 216.572390697882"
[1] -0.4278381  0.7066411  0.8062386  0.8417336  0.9601254
[1] "11. 214.198667696414"
[1] -0.4278381  0.7066411  0.8062386  0.8395472  0.9601254
[1] "12. 211.144217373128"
[1] -0.4278381  0.7066411  0.8062386  0.8395472  0.9601254
[1] "13. 210.488856149192"
[1] -0.4278381  0.7482017  0.8180668  0.8485310  0.9601254
[1] "14. 207.019612044462"
[1] -0.4278381  0.7614286  0.8180668  0.8485310  0.9601254
[1] "15. 202.401779980435"
[1] -0.4278381  0.7762260  0.8194874  0.8485310  0.9601254
[1] "16. 194.916302320098"
[1] -0.4278381  0.7918376  0.8230863  0.8507429  0.9601254
[1] "17. 182.620938686713"
[1] -0.4278381  0.7918376  0.8243727  0.8507429  0.9601254
[1] "18. 176.386529764274"
[1] -0.4278381  0.7904065  0.8230863  0.8485310  0.9601254
[1] "19. 177.456382778222"
[1] -0.4278381  0.7885532  0.8207406  0.8485310  0.9601254
[1] "20. 175.725983163007"
[1] -0.4278381  0.7696213  0.8180668  0.8417336  0.9601254
[1] "21. 175.083294447016"
[1] -0.4278381  0.7646676  0.8144432  0.8395472  0.9601254
[1] "22. 173.235586217564"
[1] -0.4278381  0.7614286  0.8126350  0.8395472  0.9601254
[1] "23. 172.324392909839"
[1] -0.4278381  0.7696213  0.8180668  0.8417336  0.9601254
[1] "24. 170.502690440005"
[1] -0.4278381  0.7762260  0.8180668  0.8424085  0.9601254
[1] "25. 166.29073249611"
[1] -0.4278381  0.7885532  0.8207406  0.8485310  0.9601254
[1] "26. 163.41593862697"
[1] -0.4278381  0.7980314  0.8230863  0.8497946  0.9601254
[1] "27. 155.952781165743"
[1] -0.4278381  0.8008507  0.8266963  0.8507429  0.9601254
[1] "28. 150.244433674771"
[1] -0.4278381  0.8126350  0.8344440  0.8554154  0.9601254
[1] "29. 143.681755887873"
[1] -0.4278381  0.8180668  0.8344440  0.8557097  0.9601254
[1] "30. 139.342715733928"
[1] -0.4278381  0.8144432  0.8344440  0.8521129  0.9601254
[1] "31. 136.516294932564"
[1] -0.4278381  0.8180668  0.8395472  0.8589115  0.9601254
[1] "32. 135.725287769248"
[1] -0.4278381  0.8180668  0.8380291  0.8589115  0.9601254
[1] "33. 132.973868425329"
[1] 0.3606970 0.8194874 0.8395472 0.8610099 0.9601254
[1] "34. 130.125570291025"
[1] 0.3606970 0.8230863 0.8434730 0.8673921 0.9601254
[1] "35. 122.317880695769"
[1] 0.3606970 0.8266963 0.8497946 0.8831919 0.9601254
[1] "36. 113.238227953329"
[1] "resample"
[1] 0.6928108 0.8058916 0.8371605 0.8693274 0.9607135
[1] "SMC:  227.152615518735"
[1] 0.6928108 0.8058916 0.8371605 0.8693274 0.9607135
[1] "SMC:  225.829165785922"
[1] 0.6928108 0.8113078 0.8407771 0.8737899 0.9607135
[1] "SMC:  227.614144948534"
[1] 0.6928108 0.8057179 0.8370195 0.8681241 0.9607135
[1] "SMC:  218.775938409598"
[1] 0.6928108 0.8045518 0.8370195 0.8669431 0.9607135
[1] "SMC:  216.822036215314"
[1] 0.6928108 0.8112553 0.8404873 0.8699815 0.9607135
[1] "SMC:  218.770629426617"
[1] 0.6928108 0.8070257 0.8402142 0.8691971 0.9607135
[1] "SMC:  216.134128203488"
[1] 0.6928108 0.8057179 0.8370120 0.8661263 0.9607135
[1] "SMC:  209.011734951244"
[1] 0.6928108 0.8043052 0.8352463 0.8659075 0.9607135
[1] "SMC:  205.635326431882"
[1] 0.6928108 0.8043052 0.8352463 0.8652910 0.9607135
[1] "SMC:  204.232516985161"
[1] 0.6928108 0.7997015 0.8288558 0.8630011 0.9607135
[1] "SMC:  195.602384720147"
[1] 0.6928108 0.7997015 0.8284958 0.8616334 0.9607135
[1] "SMC:  190.407674440958"
[1] 0.6928108 0.7997015 0.8284958 0.8616334 0.9607135
[1] "SMC:  188.576501624389"
[1] 0.6928108 0.8057179 0.8368097 0.8659075 0.9607135
[1] "SMC:  195.28437945044"
[1] 0.6928108 0.8057179 0.8368097 0.8659075 0.9607135
[1] "SMC:  193.193210160906"
[1] 0.6928108 0.8057179 0.8370120 0.8652910 0.9607135
[1] "SMC:  191.170201626064"
[1] 0.6928108 0.8122722 0.8406061 0.8691971 0.9607135
[1] "SMC:  194.990140485758"
[1] 0.6928108 0.8126498 0.8407771 0.8681629 0.9607135
[1] "SMC:  192.511169051053"
[1] 0.6928108 0.8058916 0.8368097 0.8643880 0.9607135
[1] "SMC:  185.997001015239"
[1] 0.6928108 0.8043052 0.8352463 0.8640960 0.9607135
[1] "SMC:  181.357276328436"
[1] 0.6928108 0.7990826 0.8255282 0.8568567 0.9607135
[1] "SMC:  170.736499606837"
[1] 0.6928108 0.7974450 0.8247929 0.8552224 0.9607135
[1] "SMC:  169.477518299796"
[1] 0.6928108 0.7974450 0.8246978 0.8545236 0.9607135
[1] "SMC:  165.608480864177"
[1] 0.6928108 0.7997015 0.8259693 0.8568567 0.9607135
[1] "SMC:  170.576689116162"
[1] 0.6928108 0.8027887 0.8288558 0.8602046 0.9607135
[1] "SMC:  172.563432822949"
[1] 0.6928108 0.8043052 0.8326508 0.8628678 0.9607135
[1] "SMC:  172.301451498043"
[1] 0.6928108 0.8112553 0.8371605 0.8659075 0.9607135
[1] "SMC:  175.798233594525"
[1] 0.6928108 0.8159432 0.8451362 0.8693274 0.9607135
[1] "SMC:  178.26271739911"
[1] 0.6928108 0.8196223 0.8490754 0.8750563 0.9607135
[1] "SMC:  179.533319229311"
[1] 0.6928108 0.8226190 0.8492386 0.8753449 0.9607135
[1] "SMC:  175.803709145856"
[1] 0.6928108 0.8198652 0.8484604 0.8750339 0.9607135
[1] "SMC:  175.010127194791"
[1] 0.6928108 0.8236001 0.8501463 0.8772097 0.9607135
[1] "SMC:  170.526600186528"
[1] 0.6928108 0.8229413 0.8494931 0.8753449 0.9607135
[1] "SMC:  166.608842665956"
[1] 0.6928108 0.8255282 0.8513641 0.8792432 0.9607135
[1] "SMC:  162.820707695293"
[1] 0.6928108 0.8371605 0.8616334 0.8845265 0.9607135
[1] "SMC:  151.78822159818"
[1] 0.6928108 0.8460025 0.8681241 0.8911927 0.9607135
[1] "SMC:  140.876908924592"
acceptance rate:  0.7541667 
[1] 0.7714889 0.8494931 0.8737899 0.8961615 0.9488225
[1] "37. 232.004423513885"
[1] 0.7714889 0.8521129 0.8750339 0.8979725 0.9488225
[1] "38. 218.886802263657"
[1] 0.7714889 0.8513641 0.8747058 0.8968009 0.9488225
[1] "39. 220.779509454462"
[1] 0.7714889 0.8513641 0.8738596 0.8968009 0.9488225
[1] "40. 221.150459354924"
There were 50 or more warnings (use warnings() to see the first 50)
> 
> 
> state_df <- get_state(full_list, probs = c(0.25, 0.5, 0.75))
> 
> state_df$state <- true_states
> 
> theta_df <- get_parameter(full_list)
> 
> save.image()
> save(state_df, file = "state_df.RData")
> save(theta_df, file = "theta_df.RData")
> 
> ggplot(state_df) + aes(x = time, y = state, ymin = lower, ymax = upper) + geom_step() + geom_ribbon(alpha = 0.2, stat = "stepribbon", fill = "red") + geom_step(mapping = aes(x = time, y = med), col = "red") + ggthemes::theme_base() + scale_y_continuous(expand = c(0, 0)) + scale_x_continuous(expand = c(0, 0))
> 
> ggplot(theta_df[which(theta_df$time %% 5 == 0),]) + aes(x = value, weights = weight, col = factor(time)) + geom_density() + facet_wrap(~parameter, scales = "free")
> 
> proc.time()
     user    system   elapsed 
83106.097  3156.596  6931.670 
