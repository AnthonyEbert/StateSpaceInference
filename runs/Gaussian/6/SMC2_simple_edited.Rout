
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> library(parallel)
> library(StateSpaceInference)
> library(ggplot2)
> library(ggalt)
> sessionInfo()
R version 3.5.1 (2018-07-02)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: SUSE Linux Enterprise Server 12 SP2

Matrix products: default
BLAS/LAPACK: /pkg/suse12/software/openblas/0.2.20-gcc-6.4.0-2.28/lib/libopenblas_sandybridgep-r0.2.20.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] parallel  stats     graphics  grDevices utils     datasets  methods  
[8] base     

other attached packages:
[1] ggalt_0.4.0               ggplot2_3.1.0            
[3] StateSpaceInference_1.1.0

loaded via a namespace (and not attached):
 [1] Rcpp_1.0.0         Rttf2pt1_1.3.7     bindr_0.1.1        magrittr_1.5      
 [5] maps_3.3.0         MASS_7.3-51.1      tidyselect_0.2.5   munsell_0.5.0     
 [9] colorspace_1.3-2   R6_2.3.0           rlang_0.3.0.1      plyr_1.8.4        
[13] dplyr_0.7.8        grid_3.5.1         gtable_0.2.0       ash_1.0-15        
[17] KernSmooth_2.23-15 extrafontdb_1.0    withr_2.1.2        proj4_1.0-8       
[21] lazyeval_0.2.1     assertthat_0.2.0   tibble_1.4.2       crayon_1.3.4      
[25] bindrcpp_0.2.2     RColorBrewer_1.1-2 purrr_0.2.5        glue_1.3.0        
[29] compiler_3.5.1     pillar_1.3.0       scales_1.0.0       extrafont_0.17    
[33] pkgconfig_2.0.2   
> 
> #cl <- makeCluster(parallel::detectCores() - 1)
> cl = "mclapply"
> #cl <- NULL
> 
> set.seed(2)
> 
> TT <- 20
> true_theta <- c(0.25, 0.5)
> lower <- 0
> upper <- 3.5
> sd_t <- 1
> init <- min(rgamma(1, 100, 100), upper - 1)
> a_logit <- 0.9
> dist_coef <- 0.5
> true_states <- generate_state(init, TT, lower, upper, sd_t, a = a_logit)
> 
> lambda_fun <- stepfun(seq(1, TT - 1, by = 1), y = true_states)
> # kern <- function(x){return(decay_func(x, alpha = true_theta[1], delta = true_theta[2]))}
> #
> # y_history <- sim_hawkes(lambda_fun, NULL, kern, 0, TT*10, progressBar = FALSE)
> # y <- hist(y_history, breaks = seq(0, TT*10, by = 10), plot = FALSE)$counts
> 
> y <- generate_simple(TT, true_states, true_theta)
> 
> plot(seq(0, TT, length.out = TT * 10), unlist(y))
> 
> plot(lambda_fun, add = TRUE, col = "red")
> 
> simulator <- hawkes_simulator
> 
> inp <- list(
+   lower = lower,
+   upper = upper,
+   sd_t = sd_t,
+   a_logit = a_logit,
+   y = y,
+   simulator = simulator
+ )
> 
> loss = loss_simple
> 
> 
> Ntheta = 1000
> Nx = 10000
> pacc = 0.005
> 
> lower_theta <- c(0.1, 0.2)
> upper_theta <- c(0.5, 0.8)
> 
> prior_sample <- data.frame(theta1 = runif(Ntheta, lower_theta[1], upper_theta[1]), theta2 = runif(Ntheta, lower_theta[2], upper_theta[2]))
> 
> prior_sample <- as.matrix(prior_sample, ncol = 2)
> 
> trans <- function(x, trans_args){
+   theta1 <- log(x[,1])
+   theta2 <- log(x[,2])
+   return(cbind(theta1, theta2))
+ }
> 
> invtrans <- function(x, trans_args){
+   theta1 <- exp(x[,1])
+   theta2 <- exp(x[,2])
+   return(cbind(theta1, theta2))
+ }
> 
> full_list <- SMC2_ABC(prior_sample, dprior = function(x){dunif(x[1], 0.1, 0.5)*dunif(x[2],0.2,0.8)}, loss, loss_args = inp, Ntheta = Ntheta, Nx = Nx, pacc = pacc, cl = cl, dt = 1, ESS_threshold = 0.5, TT = TT, trans = trans, invtrans = invtrans, cov_coef = 0.25^2)
[1] 0.1032227 0.1963853 0.2440846 0.3081600 0.4994755
[1] 0.2024922 0.3722839 0.5330326 0.6848062 0.7995355
[1] "1. 639.165743364766"
[1] 0.1077599 0.1805325 0.2145170 0.2496271 0.4994755
[1] 0.2024922 0.3750947 0.5330608 0.6768053 0.7995355
[1] "2. 427.00554428269"
[1] "resample"
[1] 0.1239051 0.1889062 0.2187266 0.2482172 0.5322384
[1] 0.1911000 0.4239614 0.5739996 0.6978036 0.9605091
[1] "SMC:  887.337473102564"
[1] 0.1254719 0.1849807 0.2092050 0.2343638 0.5322384
[1] 0.1911000 0.4289130 0.5689744 0.6971216 0.9605091
[1] "SMC:  799.931922688335"
acceptance rate:  0.779 
[1] 0.1401407 0.1862672 0.2080782 0.2287093 0.3460718
[1] 0.2065546 0.4635108 0.5936111 0.6918796 0.7974362
[1] "3. 957.249053222833"
[1] 0.1420948 0.1977443 0.2174897 0.2382905 0.3460718
[1] 0.2001677 0.4323208 0.5631602 0.6632086 0.7974362
[1] "4. 890.56107607463"
[1] 0.1567955 0.2126432 0.2302745 0.2486018 0.3460718
[1] 0.2065546 0.4245058 0.5633339 0.6581557 0.7974362
[1] "5. 660.618469414067"
[1] 0.1703646 0.2232390 0.2400300 0.2575445 0.3460718
[1] 0.2065546 0.3978512 0.5518815 0.6458987 0.7974362
[1] "6. 470.75091468135"
[1] "resample"
[1] 0.1639623 0.2228130 0.2383782 0.2566891 0.3498146
[1] 0.1878379 0.4369415 0.5653608 0.6618573 0.9431397
[1] "SMC:  956.345694191545"
[1] 0.1639623 0.2185348 0.2336358 0.2492950 0.3498146
[1] 0.1878379 0.4452016 0.5678601 0.6621711 0.9431397
[1] "SMC:  872.476749212969"
[1] 0.1574189 0.2180543 0.2326011 0.2473161 0.3498146
[1] 0.1878379 0.4713720 0.5843064 0.6806611 0.9431397
[1] "SMC:  783.044687439817"
[1] 0.1754730 0.2206414 0.2348708 0.2498629 0.3498146
[1] 0.1878379 0.4369415 0.5613398 0.6529506 0.9431397
[1] "SMC:  848.400375139991"
[1] 0.1814279 0.2274258 0.2400284 0.2552097 0.3498146
[1] 0.1878379 0.4246920 0.5561389 0.6432835 0.9431397
[1] "SMC:  846.429956756564"
[1] 0.1852975 0.2321485 0.2447450 0.2600827 0.3498146
[1] 0.1878379 0.4160095 0.5484454 0.6352992 0.9431397
[1] "SMC:  798.711394633171"
acceptance rate:  0.79 
[1] 0.2003258 0.2384487 0.2495864 0.2629519 0.3185328
[1] 0.2024761 0.4516413 0.5689164 0.6452033 0.7974831
[1] "7. 913.465737088039"
[1] 0.1969172 0.2368435 0.2476340 0.2602108 0.3185328
[1] 0.2183783 0.4406093 0.5619733 0.6362565 0.7974831
[1] "8. 941.626844718258"
[1] 0.2032694 0.2398966 0.2505536 0.2638252 0.3185328
[1] 0.2024761 0.4233945 0.5507810 0.6266997 0.7974831
[1] "9. 878.016467882535"
[1] 0.2053231 0.2409082 0.2512356 0.2644022 0.3185328
[1] 0.2024761 0.4174146 0.5430156 0.6207388 0.7974831
[1] "10. 828.794861104933"
[1] 0.2091816 0.2441965 0.2544115 0.2679300 0.3185328
[1] 0.2024761 0.4174146 0.5405106 0.6205060 0.7974831
[1] "11. 733.363277419686"
[1] 0.2105151 0.2453696 0.2559702 0.2691913 0.3185328
[1] 0.2024761 0.4474902 0.5692755 0.6414202 0.7974831
[1] "12. 664.68082842916"
[1] 0.2108406 0.2460227 0.2568525 0.2694891 0.3185328
[1] 0.2024761 0.4016077 0.5110756 0.5993819 0.7974831
[1] "13. 613.951390433273"
[1] 0.2182991 0.2519459 0.2639041 0.2735832 0.3185328
[1] 0.2024761 0.4118433 0.5224702 0.6022207 0.7974831
[1] "14. 432.85112363547"
[1] "resample"
[1] 0.2233124 0.2514794 0.2619001 0.2726516 0.3256449
[1] 0.1895495 0.4210983 0.5379893 0.6310673 0.9470665
[1] "SMC:  962.274265309151"
[1] 0.2081369 0.2487871 0.2590810 0.2701334 0.3256449
[1] 0.1895495 0.4249998 0.5405160 0.6323205 0.9470665
[1] "SMC:  887.499001800435"
[1] 0.2081369 0.2483402 0.2578993 0.2690921 0.3256449
[1] 0.1916670 0.4500903 0.5615039 0.6529928 0.9470665
[1] "SMC:  800.301417170119"
[1] 0.2081369 0.2485389 0.2581148 0.2693254 0.3256449
[1] 0.1895495 0.4243496 0.5363752 0.6274575 0.9470665
[1] "SMC:  840.72343907062"
[1] 0.2081369 0.2493634 0.2597818 0.2701648 0.3256449
[1] 0.1895495 0.4207750 0.5314549 0.6239258 0.9470665
[1] "SMC:  861.984860911131"
[1] 0.2233124 0.2514573 0.2616844 0.2713711 0.3256449
[1] 0.1895495 0.4157995 0.5218370 0.6161251 0.9470665
[1] "SMC:  878.842701458273"
[1] 0.2238236 0.2533399 0.2640622 0.2732733 0.3256449
[1] 0.1895495 0.4382211 0.5459262 0.6354499 0.9470665
[1] "SMC:  843.488862510883"
[1] 0.2233124 0.2520783 0.2619384 0.2714091 0.3256449
[1] 0.1916670 0.4287586 0.5367091 0.6244774 0.9470665
[1] "SMC:  827.396155492191"
[1] 0.2238236 0.2533205 0.2637817 0.2727701 0.3256449
[1] 0.1895495 0.4186387 0.5284243 0.6161546 0.9470665
[1] "SMC:  818.64653920959"
[1] 0.2242284 0.2539297 0.2639655 0.2728574 0.3256449
[1] 0.1895495 0.4157995 0.5192044 0.6119905 0.9470665
[1] "SMC:  797.115240692135"
[1] 0.2269818 0.2554623 0.2653933 0.2739515 0.3256449
[1] 0.1895495 0.4116214 0.5115167 0.6091365 0.9470665
[1] "SMC:  764.04635646493"
[1] 0.2280038 0.2559802 0.2658000 0.2746254 0.3256449
[1] 0.1895495 0.4380338 0.5435279 0.6260488 0.9470665
[1] "SMC:  715.852521013943"
[1] 0.2274567 0.2560905 0.2658000 0.2741366 0.3256449
[1] 0.1885159 0.3979319 0.4833775 0.5821090 0.9470665
[1] "SMC:  706.628487950049"
[1] 0.2315793 0.2609021 0.2698141 0.2781601 0.3256449
[1] 0.1885159 0.4062962 0.4979142 0.5946842 0.9470665
[1] "SMC:  636.51572017442"
acceptance rate:  0.755 
[1] 0.2391800 0.2615602 0.2696166 0.2765818 0.3138357
[1] 0.2382663 0.4287610 0.5360144 0.6144095 0.7970788
[1] "15. 930.986497511945"
[1] 0.2391800 0.2615301 0.2694309 0.2762359 0.3138357
[1] 0.2382663 0.4244570 0.5314979 0.6089360 0.7970788
[1] "16. 911.28205010464"
[1] 0.2391800 0.2605260 0.2672348 0.2740235 0.3138357
[1] 0.2382663 0.4256418 0.5320494 0.6091365 0.7970788
[1] "17. 834.799131419963"
[1] 0.2391800 0.2609383 0.2680835 0.2751286 0.3138357
[1] 0.2506494 0.4653380 0.5594804 0.6274061 0.7970788
[1] "18. 745.664264798881"
[1] 0.2391800 0.2595866 0.2667355 0.2736377 0.3138357
[1] 0.2506494 0.4725067 0.5633685 0.6276117 0.7970788
[1] "19. 655.08393820584"
[1] 0.2391800 0.2592455 0.2663924 0.2729965 0.3138357
[1] 0.2506494 0.4653380 0.5543033 0.6244774 0.7970788
[1] "20. 655.157578848365"
> 
> state_df <- get_state(full_list)
> 
> state_df$state <- true_states
> 
> theta_df <- get_parameter(full_list)
> 
> 
> save.image()
> save(state_df, file = "state_df.RData")
> save(theta_df, file = "theta_df.RData")
> 
> 
> 
> ggplot(state_df) + aes(x = time, y = state, ymin = lower, ymax = upper) + geom_step() + geom_ribbon(alpha = 0.2, stat = "stepribbon", fill = "red") + geom_step(mapping = aes(x = time, y = med), col = "red") + ggthemes::theme_base() + scale_y_continuous(expand = c(0, 0)) + scale_x_continuous(expand = c(0, 0))
> 
> ggplot(theta_df[which(theta_df$time %% 5 == 0),]) + aes(x = value, weights = weight, col = factor(time)) + geom_density() + facet_wrap(~parameter, scales = "free")
> 
> proc.time()
     user    system   elapsed 
93756.155   559.076  6280.270 
