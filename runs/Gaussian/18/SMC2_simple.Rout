
R version 4.0.3 (2020-10-10) -- "Bunny-Wunnies Freak Out"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(parallel)
> library(StateSpaceInference)
> library(ggplot2)
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> #library(ggalt)
> sessionInfo()
R version 4.0.3 (2020-10-10)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: SUSE Linux Enterprise Server 12 SP5

Matrix products: default
BLAS/LAPACK: /pkg/suse12/software/OpenBLAS/0.3.12-GCC-10.2.0/lib/libopenblas_haswellp-r0.3.12.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] parallel  stats     graphics  grDevices utils     datasets  methods  
[8] base     

other attached packages:
[1] dplyr_1.0.5               ggplot2_3.3.3            
[3] StateSpaceInference_2.2.0

loaded via a namespace (and not attached):
 [1] fansi_0.4.2      withr_2.4.2      assertthat_0.2.1 utf8_1.2.1      
 [5] crayon_1.4.1     grid_4.0.3       R6_2.5.0         gtable_0.3.0    
 [9] DBI_1.1.0        lifecycle_1.0.0  magrittr_2.0.1   scales_1.1.1    
[13] pillar_1.6.0     rlang_0.4.11     vctrs_0.3.8      generics_0.1.0  
[17] ellipsis_0.3.2   glue_1.4.2       munsell_0.5.0    purrr_0.3.4     
[21] compiler_4.0.3   colorspace_2.0-0 pkgconfig_2.0.3  tidyselect_1.1.1
[25] tibble_3.1.1    
> 
> #cl <- makeCluster(parallel::detectCores() - 1)
> cl = "mclapply"
> #cl <- NULL
> 
> set.seed(2)
> 
> TT <- 20
> true_theta <- c(0.25, 0.5)
> lower <- 0
> upper <- 3.5
> sd_t <- 1
> init <- min(rgamma(1, 100, 100), upper - 1)
> a_logit <- 0.9
> dist_coef <- 0.5
> true_states <-cumsum(rnorm(TT))
> 
> lambda_fun <- stepfun(seq(1, TT - 1, by = 1), y = true_states)
> # kern <- function(x){return(decay_func(x, alpha = true_theta[1], delta = true_theta[2]))}
> #
> # y_history <- sim_hawkes(lambda_fun, NULL, kern, 0, TT*10, progressBar = FALSE)
> # y <- hist(y_history, breaks = seq(0, TT*10, by = 10), plot = FALSE)$counts
> 
> y <- generate_stan_skew(TT, true_states, true_theta)
> 
> plot(seq(0, TT, length.out = TT * 10), unlist(y))
> 
> plot(lambda_fun, add = TRUE, col = "red")
> 
> inp <- list(
+   lower = lower,
+   upper = upper,
+   sd_t = sd_t,
+   a_logit = a_logit,
+   y = y
+ )
> 
> loss = loss_stan_skew
> 
> 
> Ntheta = 2000
> Nx = 10000
> pacc = 0.05
> 
> lower_theta <- c(0.1, 0.2)
> upper_theta <- c(0.5, 0.8)
> 
> prior_sample <- data.frame(theta1 = runif(Ntheta, lower_theta[1], upper_theta[1]), theta2 = runif(Ntheta, lower_theta[2], upper_theta[2]))
> 
> prior_sample <- as.matrix(prior_sample, ncol = 2)
> 
> trans <- function(x, trans_args){
+   theta1 <- log(x[,1])
+   theta2 <- log(x[,2])
+   return(cbind(theta1, theta2))
+ }
> 
> invtrans <- function(x, trans_args){
+   theta1 <- exp(x[,1])
+   theta2 <- exp(x[,2])
+   return(cbind(theta1, theta2))
+ }
> 
> full_list <- SMC2_ABC(prior_sample, dprior = function(x){dunif(x[1], 0.1, 0.5)*dunif(x[2],0.2,0.8)}, loss, loss_args = inp, Ntheta = Ntheta, Nx = Nx, pacc = pacc, cl = cl, dt = 1, ESS_threshold = 0.5, TT = TT, trans = trans, invtrans = invtrans, cov_coef = 0.25^2)
[1] 0.1000092 0.1155996 0.2988421 0.4886084 0.4996903
[1] 0.2001172 0.2173243 0.4995953 0.7842034 0.7999193
[1] "1. 1969.7183459161"
[1] 0.1000092 0.1118462 0.2758973 0.4822518 0.4996903
[1] 0.2001172 0.2177598 0.5053477 0.7842034 0.7999193
[1] "2. 1880.86353126403"
[1] 0.1000092 0.1142309 0.2696984 0.4749221 0.4996903
[1] 0.2001172 0.2178999 0.5093051 0.7844652 0.7999193
[1] "3. 1805.4059904419"
[1] 0.1000092 0.1174262 0.2561362 0.4578013 0.4996903
[1] 0.2001172 0.2179861 0.5096202 0.7844652 0.7999193
[1] "4. 1623.44464353848"
[1] 0.1000092 0.1192917 0.2540671 0.4395114 0.4996903
[1] 0.2001172 0.2179861 0.5093972 0.7844652 0.7999193
[1] "5. 1501.97520734869"
[1] 0.1000092 0.1222213 0.2548122 0.4340686 0.4996903
[1] 0.2001172 0.2179861 0.5109609 0.7851815 0.7999193
[1] "6. 1443.55682194001"
[1] 0.1000092 0.1228403 0.2565462 0.4325765 0.4996903
[1] 0.2001172 0.2180163 0.5185480 0.7860059 0.7999193
[1] "7. 1422.02898863839"
[1] 0.1000092 0.1227891 0.2483670 0.4138797 0.4996903
[1] 0.2001172 0.2180163 0.5147696 0.7854855 0.7999193
[1] "8. 1339.86913817559"
[1] 0.1000092 0.1234298 0.2486700 0.4099274 0.4996903
[1] 0.2001172 0.2180163 0.5176853 0.7864147 0.7999193
[1] "9. 1306.25260077529"
[1] 0.1000092 0.1370770 0.2662267 0.4123997 0.4996903
[1] 0.2001172 0.2180163 0.5148230 0.7860059 0.7999193
[1] "10. 1222.42764550928"
[1] 0.1000092 0.1449258 0.2696984 0.4123453 0.4996903
[1] 0.2001172 0.2180163 0.5173270 0.7860059 0.7999193
[1] "11. 1178.142627213"
[1] 0.1000092 0.1471866 0.2670155 0.3998738 0.4996903
[1] 0.2001172 0.2180163 0.5203073 0.7864147 0.7999193
[1] "12. 1111.3281360323"
[1] 0.1000092 0.1537365 0.2699212 0.3973619 0.4996903
[1] 0.2001172 0.2180163 0.5212689 0.7864147 0.7999193
[1] "13. 1051.20129309034"
[1] 0.1000092 0.1552030 0.2708329 0.3947201 0.4996903
[1] 0.2001172 0.2192998 0.5207317 0.7864147 0.7999193
[1] "14. 1020.34279412195"
[1] 0.1000092 0.1564700 0.2688147 0.3865745 0.4996903
[1] 0.2001172 0.2180163 0.5188395 0.7864147 0.7999193
[1] "15. 984.804038961849"
[1] "resample"
[1] 0.0999168 0.1536956 0.2669237 0.3832058 0.5229508
[1] 0.1705870 0.2132853 0.5138477 0.8319941 0.9682458
[1] "SMC:  1988.75283335313"
[1] 0.0999168 0.1535686 0.2627313 0.3768197 0.5229508
[1] 0.1705870 0.2131976 0.5155645 0.8334981 0.9682458
[1] "SMC:  1979.38833018214"
[1] 0.0999168 0.1537997 0.2624418 0.3756037 0.5229508
[1] 0.1705870 0.2131976 0.5175458 0.8346031 0.9682458
[1] "SMC:  1968.24908484353"
[1] 0.0999168 0.1563125 0.2608085 0.3693631 0.5229508
[1] 0.1705870 0.2131976 0.5175458 0.8346031 0.9682458
[1] "SMC:  1935.93259685074"
[1] 0.0999168 0.1576771 0.2606028 0.3636664 0.5229508
[1] 0.1705870 0.2107970 0.5166686 0.8346031 0.9682458
[1] "SMC:  1907.79102592748"
[1] 0.0999168 0.1608715 0.2609176 0.3619564 0.5229508
[1] 0.1705870 0.2132853 0.5182224 0.8380254 0.9682458
[1] "SMC:  1889.88844863373"
[1] 0.0999168 0.1621448 0.2616638 0.3619564 0.5229508
[1] 0.1705870 0.2158059 0.5266312 0.8389428 0.9682458
[1] "SMC:  1879.79384056459"
[1] 0.0999168 0.1608715 0.2588718 0.3548582 0.5229508
[1] 0.1705870 0.2136104 0.5225116 0.8384866 0.9682458
[1] "SMC:  1851.48607604894"
[1] 0.0999168 0.1621448 0.2589942 0.3535056 0.5229508
[1] 0.1705870 0.2158059 0.5260007 0.8387823 0.9682458
[1] "SMC:  1836.93301236704"
[1] 0.0999168 0.1739900 0.2643003 0.3567137 0.5229508
[1] 0.1705870 0.2136104 0.5238627 0.8387823 0.9682458
[1] "SMC:  1810.36849260271"
[1] 0.0999168 0.1787012 0.2674464 0.3573999 0.5229508
[1] 0.1705870 0.2164409 0.5263464 0.8389428 0.9682458
[1] "SMC:  1788.61071802032"
[1] 0.0999168 0.1806568 0.2664526 0.3533569 0.5229508
[1] 0.1705870 0.2164409 0.5283464 0.8397659 0.9682458
[1] "SMC:  1757.47655824606"
[1] 0.0999168 0.1850504 0.2685052 0.3533569 0.5229508
[1] 0.1705870 0.2166845 0.5298277 0.8397659 0.9682458
[1] "SMC:  1723.89659015724"
[1] 0.0999168 0.1864875 0.2687403 0.3524667 0.5229508
[1] 0.1705870 0.2164409 0.5293742 0.8397659 0.9682458
[1] "SMC:  1705.65389466063"
[1] 0.0999168 0.1865618 0.2672621 0.3498468 0.5229508
[1] 0.1705870 0.2158059 0.5273617 0.8394322 0.9682458
[1] "SMC:  1686.19699049174"
acceptance rate:  0.7945 
[1] 0.1106374 0.1950628 0.2640352 0.3361202 0.4549385
[1] 0.2005901 0.2258892 0.5258332 0.7827846 0.7999193
[1] "16. 1994.75105197685"
[1] 0.1106374 0.1956732 0.2645580 0.3354760 0.4549385
[1] 0.2005901 0.2256130 0.5213527 0.7796284 0.7999193
[1] "17. 1988.70148056483"
[1] 0.1106374 0.1961612 0.2642508 0.3353324 0.4549385
[1] 0.2005901 0.2256130 0.5173270 0.7778694 0.7999193
[1] "18. 1979.97782564538"
[1] 0.1106374 0.1956732 0.2624626 0.3336758 0.4549385
[1] 0.2005901 0.2253079 0.5155645 0.7778694 0.7999193
[1] "19. 1968.59780787976"
[1] 0.1106374 0.1951819 0.2608280 0.3320517 0.4549385
[1] 0.2005901 0.2253079 0.5146218 0.7778694 0.7999193
[1] "20. 1949.68113459421"
There were 50 or more warnings (use warnings() to see the first 50)
> 
> state_df <- get_state(full_list)
> 
> state_df$state <- true_states
> 
> theta_df <- get_parameter(full_list)
> 
> save(theta_df, file = "theta_df.RData")
> 
> ggplot(theta_df[which(theta_df$time %% 5 == 0),]) + aes(x = value, weights = weight, col = factor(time)) + geom_density() + facet_wrap(~parameter, scales = "free")
> 
> theta_df <- theta_df %>%
+   filter(time == TT) %>%
+   mutate(type = "ABC") %>%
+   select(-parameter, -time)
> 
> saveRDS(state_df, file = "state_df.rds")
> saveRDS(theta_df, file = "theta_df.rds")
> 
> 
> 
> #ggplot(state_df) + aes(x = time, y = state, ymin = lower, ymax = upper) + geom_step() + geom_ribbon(alpha = 0.2, stat = "stepribbon", fill = "red") + geom_step(mapping = aes(x = time, y = med), col = "red") + scale_y_continuous(expand = c(0, 0)) + scale_x_continuous(expand = c(0, 0))
> 
> 
> 
> proc.time()
     user    system   elapsed 
94069.733   853.855  6295.690 
