
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> library(parallel)
> library(StateSpaceInference)
> library(ggplot2)
> library(ggalt)
> sessionInfo()
R version 3.5.1 (2018-07-02)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: SUSE Linux Enterprise Server 12 SP2

Matrix products: default
BLAS/LAPACK: /pkg/suse12/software/openblas/0.2.20-gcc-6.4.0-2.28/lib/libopenblas_sandybridgep-r0.2.20.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] parallel  stats     graphics  grDevices utils     datasets  methods  
[8] base     

other attached packages:
[1] ggalt_0.4.0               ggplot2_3.1.0            
[3] StateSpaceInference_1.2.4

loaded via a namespace (and not attached):
 [1] Rcpp_1.0.0         Rttf2pt1_1.3.7     bindr_0.1.1        magrittr_1.5      
 [5] maps_3.3.0         MASS_7.3-51.1      tidyselect_0.2.5   munsell_0.5.0     
 [9] colorspace_1.3-2   R6_2.3.0           rlang_0.3.0.1      plyr_1.8.4        
[13] dplyr_0.7.8        grid_3.5.1         gtable_0.2.0       ash_1.0-15        
[17] KernSmooth_2.23-15 extrafontdb_1.0    withr_2.1.2        proj4_1.0-8       
[21] lazyeval_0.2.1     assertthat_0.2.0   tibble_1.4.2       crayon_1.3.4      
[25] bindrcpp_0.2.2     RColorBrewer_1.1-2 purrr_0.2.5        glue_1.3.0        
[29] compiler_3.5.1     pillar_1.3.0       scales_1.0.0       extrafont_0.17    
[33] pkgconfig_2.0.2   
> 
> #cl <- makeCluster(parallel::detectCores() - 1)
> cl = "mclapply"
> #cl <- NULL
> 
> set.seed(2)
> 
> TT <- 40
> true_theta <- c(0.25, 0.5)
> lower <- 0
> upper <- 3.5
> sd_t <- 1
> init <- min(rgamma(1, 100, 100), upper - 1)
> a_logit <- 0.9
> dist_coef <- 0.5
> true_states <- generate_state(init, TT, lower, upper, sd_t, a = a_logit)
> 
> lambda_fun <- stepfun(seq(1, TT - 1, by = 1), y = true_states)
> # kern <- function(x){return(decay_func(x, alpha = true_theta[1], delta = true_theta[2]))}
> #
> # y_history <- sim_hawkes(lambda_fun, NULL, kern, 0, TT*10, progressBar = FALSE)
> # y <- hist(y_history, breaks = seq(0, TT*10, by = 10), plot = FALSE)$counts
> 
> y <- generate_simple(TT, true_states, true_theta)
> 
> plot(seq(0, TT, length.out = TT * 10), unlist(y))
> 
> plot(lambda_fun, add = TRUE, col = "red")
> 
> simulator <- hawkes_simulator
> 
> inp <- list(
+   lower = lower,
+   upper = upper,
+   sd_t = sd_t,
+   a_logit = a_logit,
+   y = y,
+   simulator = simulator
+ )
> 
> loss = loss_simple
> 
> 
> Ntheta = 1000
> Nx = 10000
> pacc = 0.05
> 
> lower_theta <- c(0.1, 0.2)
> upper_theta <- c(0.5, 0.8)
> 
> prior_sample <- data.frame(theta1 = runif(Ntheta, lower_theta[1], upper_theta[1]), theta2 = runif(Ntheta, lower_theta[2], upper_theta[2]))
> 
> prior_sample <- as.matrix(prior_sample, ncol = 2)
> 
> trans <- function(x, trans_args){
+   theta1 <- log(x[,1])
+   theta2 <- log(x[,2])
+   return(cbind(theta1, theta2))
+ }
> 
> invtrans <- function(x, trans_args){
+   theta1 <- exp(x[,1])
+   theta2 <- exp(x[,2])
+   return(cbind(theta1, theta2))
+ }
> 
> full_list <- SMC2_ABC(prior_sample, dprior = function(x){dunif(x[1], 0.1, 0.5)*dunif(x[2],0.2,0.8)}, loss, loss_args = inp, Ntheta = Ntheta, Nx = Nx, pacc = pacc, cl = cl, dt = 1, ESS_threshold = 0.5, TT = TT, trans = trans, invtrans = invtrans, cov_coef = 0.25^2)
[1] 0.1000092 0.1644457 0.2188513 0.2915420 0.4996287
[1] 0.2002003 0.3507798 0.4873590 0.6273027 0.7999193
[1] "1. 739.155483283626"
[1] 0.1000092 0.1548807 0.1994540 0.2534394 0.4996287
[1] 0.2002003 0.3724150 0.5083404 0.6544850 0.7999193
[1] "2. 577.127136224489"
[1] 0.1000092 0.1567955 0.2045381 0.2569569 0.4996287
[1] 0.2002003 0.3541069 0.4860302 0.6215165 0.7999193
[1] "3. 597.417328128133"
[1] 0.1000092 0.1670239 0.2118249 0.2656886 0.4996287
[1] 0.2002003 0.3540330 0.4817247 0.6120519 0.7999193
[1] "4. 597.268123839848"
[1] 0.1000092 0.1887157 0.2299845 0.2782248 0.4996287
[1] 0.2002003 0.3507798 0.4742211 0.5990013 0.7999193
[1] "5. 568.420735417617"
[1] 0.1000092 0.1975790 0.2376606 0.2834600 0.4996287
[1] 0.2002003 0.3771907 0.5047314 0.6421129 0.7999193
[1] "6. 553.584749108927"
[1] 0.1000092 0.1938656 0.2301575 0.2745396 0.4996287
[1] 0.2002003 0.3625713 0.4839356 0.6111163 0.7999193
[1] "7. 516.74338484166"
[1] 0.1000092 0.2000461 0.2352503 0.2779827 0.4996287
[1] 0.2002003 0.3554290 0.4753043 0.5975364 0.7999193
[1] "8. 501.968957307069"
[1] 0.1000092 0.2041146 0.2376606 0.2783698 0.4996287
[1] 0.2002003 0.3535779 0.4705441 0.5895402 0.7999193
[1] "9. 479.728272520697"
[1] "resample"
[1] 0.1147117 0.1915464 0.2282319 0.2661996 0.4523507
[1] 0.1721282 0.3418910 0.4687839 0.5878901 0.9267440
[1] "SMC:  938.262315781799"
[1] 0.1147117 0.1855246 0.2191156 0.2534921 0.4523507
[1] 0.1721282 0.3728248 0.4853352 0.6234130 0.9267440
[1] "SMC:  845.357980182607"
[1] 0.1147117 0.1877715 0.2219076 0.2555144 0.4523507
[1] 0.1721282 0.3463474 0.4713469 0.5890991 0.9267440
[1] "SMC:  870.177103565288"
[1] 0.1147117 0.1927065 0.2265740 0.2580762 0.4523507
[1] 0.1721282 0.3459207 0.4687839 0.5839111 0.9267440
[1] "SMC:  879.385934882899"
[1] 0.1147117 0.2029617 0.2340872 0.2658851 0.4523507
[1] 0.1721282 0.3402963 0.4603006 0.5750952 0.9267440
[1] "SMC:  877.236079350192"
[1] 0.1147117 0.2066557 0.2378157 0.2701900 0.4523507
[1] 0.1721282 0.3728248 0.4813640 0.6072409 0.9267440
[1] "SMC:  864.408896400838"
[1] 0.1147117 0.2045375 0.2350108 0.2651725 0.4523507
[1] 0.1721282 0.3554577 0.4697789 0.5817971 0.9267440
[1] "SMC:  845.922418552645"
[1] 0.1147117 0.2070804 0.2365848 0.2669977 0.4523507
[1] 0.1721282 0.3459669 0.4644775 0.5741901 0.9267440
[1] "SMC:  835.01993536883"
[1] 0.1147117 0.2095719 0.2381495 0.2680643 0.4523507
[1] 0.1721282 0.3417443 0.4552155 0.5633173 0.9267440
[1] "SMC:  817.232216418486"
acceptance rate:  0.847 
[1] 0.1452346 0.2178244 0.2429449 0.2687225 0.3711567
[1] 0.2038786 0.3382777 0.4353217 0.5223315 0.7994776
[1] "10. 995.488113386128"
[1] 0.1452346 0.2218846 0.2445029 0.2699155 0.3711567
[1] 0.2038786 0.3650526 0.4656990 0.5443921 0.7994776
[1] "11. 962.015877147923"
[1] 0.1452346 0.2217904 0.2445029 0.2694451 0.3711567
[1] 0.2038786 0.3298592 0.4253147 0.5120474 0.7994776
[1] "12. 970.353426249363"
[1] 0.1452346 0.2346079 0.2560166 0.2791305 0.3711567
[1] 0.2038786 0.3345355 0.4330894 0.5214165 0.7994776
[1] "13. 828.384061525735"
[1] 0.1452346 0.2326191 0.2527639 0.2760407 0.3711567
[1] 0.2038786 0.3674952 0.4664840 0.5405399 0.7994776
[1] "14. 840.086016302837"
[1] 0.1452346 0.2306404 0.2512644 0.2731572 0.3711567
[1] 0.2038786 0.3574710 0.4573085 0.5361908 0.7994776
[1] "15. 861.173575105248"
[1] 0.1452346 0.2265838 0.2449509 0.2658851 0.3711567
[1] 0.2038786 0.3732537 0.4698616 0.5405399 0.7994776
[1] "16. 871.397191481344"
[1] 0.1452346 0.2277342 0.2458216 0.2669662 0.3711567
[1] 0.2038786 0.4065632 0.4938818 0.5772622 0.7994776
[1] "17. 771.28040303758"
[1] 0.1452346 0.2248234 0.2398096 0.2621172 0.3711567
[1] 0.2038786 0.4116672 0.4980498 0.5818237 0.7994776
[1] "18. 735.144098582603"
[1] 0.1452346 0.2243539 0.2381495 0.2581381 0.3711567
[1] 0.2038786 0.4108660 0.4938818 0.5710673 0.7994776
[1] "19. 733.372123677369"
[1] 0.1452346 0.2229806 0.2364564 0.2542478 0.3711567
[1] 0.2038786 0.4116672 0.4950186 0.5710673 0.7994776
[1] "20. 700.716166956921"
[1] 0.1452346 0.2226302 0.2364300 0.2527639 0.3711567
[1] 0.2038786 0.3758886 0.4659810 0.5361908 0.7994776
[1] "21. 775.92919465007"
[1] 0.1452346 0.2258572 0.2378024 0.2546365 0.3711567
[1] 0.2038786 0.3730486 0.4650478 0.5279823 0.7994776
[1] "22. 763.653583167311"
[1] 0.1452346 0.2248234 0.2367007 0.2525443 0.3711567
[1] 0.2038786 0.3738250 0.4656990 0.5280900 0.7994776
[1] "23. 736.491131410852"
[1] 0.1452346 0.2258572 0.2376606 0.2529023 0.3711567
[1] 0.2038786 0.3397063 0.4341688 0.5120420 0.7994776
[1] "24. 742.917752814744"
[1] 0.1452346 0.2264125 0.2381495 0.2534921 0.3711567
[1] 0.2038786 0.3650526 0.4543482 0.5214165 0.7994776
[1] "25. 732.230730154752"
[1] 0.1452346 0.2277927 0.2395051 0.2560166 0.3711567
[1] 0.2038786 0.3611798 0.4490064 0.5188882 0.7994776
[1] "26. 723.921306495517"
[1] 0.1452346 0.2272976 0.2384817 0.2534921 0.3711567
[1] 0.2038786 0.3732537 0.4605863 0.5215433 0.7994776
[1] "27. 700.38865300333"
[1] 0.1452346 0.2279464 0.2395882 0.2546365 0.3711567
[1] 0.2038786 0.3758886 0.4656990 0.5223315 0.7994776
[1] "28. 689.093191492662"
[1] 0.1452346 0.2279464 0.2394482 0.2545886 0.3711567
[1] 0.2038786 0.3797751 0.4664840 0.5279823 0.7994776
[1] "29. 681.832682954619"
[1] 0.1452346 0.2303889 0.2454023 0.2618688 0.3711567
[1] 0.2038786 0.3771907 0.4669769 0.5279823 0.7994776
[1] "30. 665.01715315919"
[1] 0.1452346 0.2298246 0.2449452 0.2585008 0.3711567
[1] 0.2038786 0.3725563 0.4573085 0.5214165 0.7994776
[1] "31. 668.379240755119"
[1] 0.1452346 0.2298246 0.2449509 0.2585008 0.3711567
[1] 0.2038786 0.4012570 0.4774332 0.5361908 0.7994776
[1] "32. 630.82919053237"
[1] 0.1452346 0.2303889 0.2454023 0.2603203 0.3711567
[1] 0.2038786 0.3750553 0.4656990 0.5214165 0.7994776
[1] "33. 647.152494740853"
[1] 0.1452346 0.2303889 0.2452431 0.2587528 0.3711567
[1] 0.2038786 0.3683925 0.4554658 0.5195211 0.7994776
[1] "34. 644.938044922839"
[1] 0.1452346 0.2302471 0.2449509 0.2585008 0.3711567
[1] 0.2038786 0.3657922 0.4549973 0.5187480 0.7994776
[1] "35. 642.872366556685"
[1] 0.1452346 0.2298246 0.2445029 0.2573214 0.3711567
[1] 0.2038786 0.3730098 0.4554658 0.5195211 0.7994776
[1] "36. 633.969013910724"
[1] 0.1452346 0.2308577 0.2459279 0.2615544 0.3711567
[1] 0.2038786 0.3849149 0.4723431 0.5223315 0.7994776
[1] "37. 608.164640580446"
[1] 0.1452346 0.2305257 0.2454023 0.2597038 0.3711567
[1] 0.2038786 0.3750553 0.4650478 0.5214165 0.7994776
[1] "38. 610.299691256872"
[1] 0.1452346 0.2306404 0.2454023 0.2603203 0.3711567
[1] 0.2038786 0.3558777 0.4399310 0.5132743 0.7994776
[1] "39. 619.495650796967"
[1] 0.1452346 0.2303889 0.2449509 0.2575241 0.3711567
[1] 0.2038786 0.3459207 0.4341688 0.5101304 0.7994776
[1] "40. 614.755055139137"
There were 50 or more warnings (use warnings() to see the first 50)
> 
> state_df <- get_state(full_list)
> 
> state_df$state <- true_states
> 
> theta_df <- get_parameter(full_list)
> 
> 
> save.image()
> save(state_df, file = "state_df.RData")
> save(theta_df, file = "theta_df.RData")
> 
> 
> 
> ggplot(state_df) + aes(x = time, y = state, ymin = lower, ymax = upper) + geom_step() + geom_ribbon(alpha = 0.2, stat = "stepribbon", fill = "red") + geom_step(mapping = aes(x = time, y = med), col = "red") + ggthemes::theme_base() + scale_y_continuous(expand = c(0, 0)) + scale_x_continuous(expand = c(0, 0))
> 
> ggplot(theta_df[which(theta_df$time %% 5 == 0),]) + aes(x = value, weights = weight, col = factor(time)) + geom_density() + facet_wrap(~parameter, scales = "free")
> 
> proc.time()
      user     system    elapsed 
113162.546    811.316   9719.663 
