
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> library(parallel)
> library(StateSpaceInference)
> library(ggplot2)
> library(ggalt)
> sessionInfo()
R version 3.5.1 (2018-07-02)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: SUSE Linux Enterprise Server 12 SP2

Matrix products: default
BLAS/LAPACK: /pkg/suse12/software/openblas/0.2.20-gcc-6.4.0-2.28/lib/libopenblas_sandybridgep-r0.2.20.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] parallel  stats     graphics  grDevices utils     datasets  methods  
[8] base     

other attached packages:
[1] ggalt_0.4.0               ggplot2_3.1.0            
[3] StateSpaceInference_1.2.1

loaded via a namespace (and not attached):
 [1] Rcpp_1.0.0         Rttf2pt1_1.3.7     bindr_0.1.1        magrittr_1.5      
 [5] maps_3.3.0         MASS_7.3-51.1      tidyselect_0.2.5   munsell_0.5.0     
 [9] colorspace_1.3-2   R6_2.3.0           rlang_0.3.0.1      plyr_1.8.4        
[13] dplyr_0.7.8        grid_3.5.1         gtable_0.2.0       ash_1.0-15        
[17] KernSmooth_2.23-15 extrafontdb_1.0    withr_2.1.2        proj4_1.0-8       
[21] lazyeval_0.2.1     assertthat_0.2.0   tibble_1.4.2       crayon_1.3.4      
[25] bindrcpp_0.2.2     RColorBrewer_1.1-2 purrr_0.2.5        glue_1.3.0        
[29] compiler_3.5.1     pillar_1.3.0       scales_1.0.0       extrafont_0.17    
[33] pkgconfig_2.0.2   
> 
> #cl <- makeCluster(parallel::detectCores() - 1)
> cl = "mclapply"
> #cl <- NULL
> 
> set.seed(2)
> 
> TT <- 20
> true_theta <- c(0.25, 0.5)
> lower <- 0
> upper <- 3.5
> sd_t <- 1
> init <- min(rgamma(1, 100, 100), upper - 1)
> a_logit <- 0.9
> dist_coef <- 0.5
> true_states <- generate_state(init, TT, lower, upper, sd_t, a = a_logit)
> 
> lambda_fun <- stepfun(seq(1, TT - 1, by = 1), y = true_states)
> # kern <- function(x){return(decay_func(x, alpha = true_theta[1], delta = true_theta[2]))}
> #
> # y_history <- sim_hawkes(lambda_fun, NULL, kern, 0, TT*10, progressBar = FALSE)
> # y <- hist(y_history, breaks = seq(0, TT*10, by = 10), plot = FALSE)$counts
> 
> y <- generate_simple(TT, true_states, true_theta)
> 
> plot(seq(0, TT, length.out = TT * 10), unlist(y))
> 
> plot(lambda_fun, add = TRUE, col = "red")
> 
> simulator <- hawkes_simulator
> 
> inp <- list(
+   lower = lower,
+   upper = upper,
+   sd_t = sd_t,
+   a_logit = a_logit,
+   y = y,
+   simulator = simulator
+ )
> 
> loss = loss_simple
> 
> 
> Ntheta = 1000
> Nx = 10000
> pacc = 0.005
> 
> lower_theta <- c(0.1, 0.2)
> upper_theta <- c(0.5, 0.8)
> 
> prior_sample <- data.frame(theta1 = runif(Ntheta, lower_theta[1], upper_theta[1]), theta2 = runif(Ntheta, lower_theta[2], upper_theta[2]))
> 
> prior_sample <- as.matrix(prior_sample, ncol = 2)
> 
> trans <- function(x, trans_args){
+   theta1 <- log(x[,1])
+   theta2 <- log(x[,2])
+   return(cbind(theta1, theta2))
+ }
> 
> invtrans <- function(x, trans_args){
+   theta1 <- exp(x[,1])
+   theta2 <- exp(x[,2])
+   return(cbind(theta1, theta2))
+ }
> 
> full_list <- SMC2_ABC(prior_sample, dprior = function(x){dunif(x[1], 0.1, 0.5)*dunif(x[2],0.2,0.8)}, loss, loss_args = inp, Ntheta = Ntheta, Nx = Nx, pacc = pacc, cl = cl, dt = 1, ESS_threshold = 0.5, TT = TT, trans = trans, invtrans = invtrans, cov_coef = 0.25^2)
[1] 0.1003048 0.1961792 0.2437528 0.3078368 0.4994755
[1] 0.2000138 0.3724320 0.5330608 0.6824191 0.7995355
[1] "1. 635.594082161467"
[1] 0.1003048 0.1805325 0.2132893 0.2490623 0.4994755
[1] 0.2000138 0.3801059 0.5405225 0.6831119 0.7995355
[1] "2. 418.97770880509"
[1] "resample"
[1] 0.09658407 0.18861345 0.21627691 0.24744136 0.53191721
[1] 0.1712010 0.4372150 0.5898180 0.7129559 0.9602531
[1] "SMC:  889.220823092805"
[1] 0.09658407 0.18386898 0.20773338 0.23356205 0.45519341
[1] 0.1712010 0.4403841 0.5884595 0.7085315 0.9602531
[1] "SMC:  807.54387888898"
acceptance rate:  0.738 
[1] 0.1298660 0.1874545 0.2086103 0.2314219 0.3623435
[1] 0.2092194 0.5002275 0.6304147 0.7224410 0.7991614
[1] "3. 962.178680429671"
[1] 0.1298660 0.1956025 0.2144040 0.2390748 0.3623435
[1] 0.2092194 0.4661115 0.5977508 0.6995294 0.7991614
[1] "4. 896.338425103441"
[1] 0.1420425 0.2111165 0.2314219 0.2474414 0.3623435
[1] 0.2092194 0.4535824 0.5850915 0.6917944 0.7991614
[1] "5. 656.374669298207"
[1] 0.1420425 0.2239520 0.2399656 0.2572417 0.3623435
[1] 0.2092194 0.4440954 0.5683234 0.6838433 0.7991614
[1] "6. 463.447144682299"
[1] "resample"
[1] 0.1654044 0.2251932 0.2396570 0.2569920 0.3835294
[1] 0.2020232 0.4786600 0.5980231 0.7013659 0.9372173
[1] "SMC:  959.618058806532"
[1] 0.1654044 0.2189835 0.2359779 0.2497134 0.3835294
[1] 0.2020232 0.4733249 0.5937450 0.6980033 0.9372173
[1] "SMC:  884.847190582628"
[1] 0.1654044 0.2177091 0.2348959 0.2484715 0.3835294
[1] 0.2020232 0.5044128 0.6147130 0.7092442 0.9372173
[1] "SMC:  798.485673155417"
[1] 0.1654044 0.2209631 0.2364305 0.2497067 0.3835294
[1] 0.2020232 0.4637681 0.5871418 0.6923509 0.9372173
[1] "SMC:  854.796827905653"
[1] 0.1654044 0.2288735 0.2408657 0.2552433 0.3835294
[1] 0.2020232 0.4575531 0.5829357 0.6910060 0.9372173
[1] "SMC:  852.865522452764"
[1] 0.1654044 0.2337841 0.2448443 0.2608387 0.3835294
[1] 0.2020232 0.4520321 0.5729170 0.6816906 0.9372173
[1] "SMC:  809.995227760979"
acceptance rate:  0.765 
[1] 0.1908640 0.2406259 0.2512876 0.2693886 0.3201866
[1] 0.2117964 0.5060918 0.6042790 0.6944068 0.7998934
[1] "7. 909.708849502135"
[1] 0.1908640 0.2388777 0.2488008 0.2643600 0.3201866
[1] 0.2117964 0.4935246 0.5891043 0.6848916 0.7998934
[1] "8. 946.339841321009"
[1] 0.1908640 0.2417507 0.2523155 0.2689886 0.3201866
[1] 0.2117964 0.4790196 0.5805745 0.6751788 0.7998934
[1] "9. 876.948728608385"
[1] 0.1908640 0.2424330 0.2540254 0.2692220 0.3201866
[1] 0.2117964 0.4670552 0.5669423 0.6696449 0.7998934
[1] "10. 838.207724523302"
[1] 0.1908640 0.2450484 0.2572439 0.2721655 0.3201866
[1] 0.2117964 0.4654762 0.5669423 0.6677073 0.7998934
[1] "11. 745.066695624895"
[1] 0.1908640 0.2464264 0.2584898 0.2749123 0.3201866
[1] 0.2117964 0.4966958 0.5943999 0.6912791 0.7998934
[1] "12. 677.289133463995"
[1] 0.1908640 0.2466890 0.2584141 0.2735532 0.3201866
[1] 0.2117964 0.4493230 0.5517605 0.6432195 0.7998934
[1] "13. 638.200586383551"
[1] 0.1908640 0.2548828 0.2680639 0.2802185 0.3201866
[1] 0.2117964 0.4665607 0.5669423 0.6696449 0.7998934
[1] "14. 453.42467999096"
[1] "resample"
[1] 0.2212185 0.2523317 0.2671694 0.2800092 0.3267761
[1] 0.2286346 0.4813551 0.5849335 0.6852501 0.9051793
[1] "SMC:  968.638774055146"
[1] 0.2212185 0.2491861 0.2619210 0.2757692 0.3267761
[1] 0.2286346 0.4788704 0.5764449 0.6703182 0.9051793
[1] "SMC:  884.708893678037"
[1] 0.2212185 0.2483545 0.2606671 0.2747298 0.3267761
[1] 0.2286346 0.4928409 0.5903642 0.6862739 0.9051793
[1] "SMC:  810.611943458091"
[1] 0.2212185 0.2484910 0.2605809 0.2744191 0.3267761
[1] 0.2286346 0.4750245 0.5691974 0.6592641 0.9051793
[1] "SMC:  830.155191358601"
[1] 0.2212185 0.2501652 0.2625064 0.2753957 0.3267761
[1] 0.2286346 0.4731303 0.5661454 0.6558455 0.9051793
[1] "SMC:  855.35774374348"
[1] 0.2212185 0.2522303 0.2647442 0.2768130 0.3267761
[1] 0.2286346 0.4718566 0.5613454 0.6516489 0.9051793
[1] "SMC:  865.338134683131"
[1] 0.2212185 0.2553328 0.2694121 0.2806211 0.3267761
[1] 0.2286346 0.4869461 0.5872793 0.6795383 0.9051793
[1] "SMC:  857.099227406259"
[1] 0.2212185 0.2533005 0.2654773 0.2773641 0.3267761
[1] 0.2286346 0.4784328 0.5711950 0.6593569 0.9051793
[1] "SMC:  829.066234462549"
[1] 0.2212185 0.2551406 0.2681177 0.2787552 0.3267761
[1] 0.2286346 0.4734533 0.5649295 0.6539783 0.9051793
[1] "SMC:  809.498427819538"
[1] 0.2212185 0.2552332 0.2681946 0.2787552 0.3267761
[1] 0.2286346 0.4717513 0.5575636 0.6480719 0.9051793
[1] "SMC:  780.959153804787"
[1] 0.2212185 0.2575090 0.2702177 0.2796671 0.3267761
[1] 0.2286346 0.4706778 0.5559328 0.6475209 0.9051793
[1] "SMC:  737.279507428574"
[1] 0.2212185 0.2590384 0.2708804 0.2811013 0.3267761
[1] 0.2286346 0.4843860 0.5799990 0.6684252 0.9051793
[1] "SMC:  720.854649611547"
[1] 0.2212185 0.2577439 0.2694792 0.2790525 0.3267761
[1] 0.2286346 0.4553001 0.5378291 0.6250704 0.9051793
[1] "SMC:  661.680056587942"
[1] 0.2212185 0.2629022 0.2738572 0.2837559 0.3267761
[1] 0.2286346 0.4666184 0.5539722 0.6475209 0.9051793
[1] "SMC:  627.498712898525"
acceptance rate:  0.755 
[1] 0.2374976 0.2656619 0.2745833 0.2837559 0.3201863
[1] 0.2450384 0.4821140 0.5815778 0.6525276 0.7999210
[1] "15. 946.067349399323"
[1] 0.2374976 0.2650672 0.2741510 0.2830822 0.3201863
[1] 0.2450384 0.4760424 0.5686082 0.6469820 0.7999210
[1] "16. 917.743036435263"
[1] 0.2374976 0.2625072 0.2726142 0.2802412 0.3201863
[1] 0.2450384 0.4741558 0.5596126 0.6368412 0.7999210
[1] "17. 835.296218519276"
[1] 0.2374976 0.2634258 0.2738947 0.2828736 0.3201863
[1] 0.2450384 0.4992346 0.5910825 0.6576487 0.7999210
[1] "18. 808.61037351625"
[1] 0.2374976 0.2619312 0.2715977 0.2802412 0.3201863
[1] 0.2450384 0.5021388 0.5891835 0.6507851 0.7999210
[1] "19. 716.513604904934"
[1] 0.2374976 0.2609807 0.2707895 0.2796299 0.3201863
[1] 0.2450384 0.4924802 0.5777943 0.6469820 0.7999210
[1] "20. 695.266476317465"
There were 50 or more warnings (use warnings() to see the first 50)
> 
> state_df <- get_state(full_list)
> 
> state_df$state <- true_states
> 
> theta_df <- get_parameter(full_list)
> 
> 
> save.image()
> save(state_df, file = "state_df.RData")
> save(theta_df, file = "theta_df.RData")
> 
> 
> 
> ggplot(state_df) + aes(x = time, y = state, ymin = lower, ymax = upper) + geom_step() + geom_ribbon(alpha = 0.2, stat = "stepribbon", fill = "red") + geom_step(mapping = aes(x = time, y = med), col = "red") + ggthemes::theme_base() + scale_y_continuous(expand = c(0, 0)) + scale_x_continuous(expand = c(0, 0))
> 
> ggplot(theta_df[which(theta_df$time %% 5 == 0),]) + aes(x = value, weights = weight, col = factor(time)) + geom_density() + facet_wrap(~parameter, scales = "free")
> 
> proc.time()
     user    system   elapsed 
90449.969   449.275  6084.351 
