
R version 4.0.3 (2020-10-10) -- "Bunny-Wunnies Freak Out"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(parallel)
> library(StateSpaceInference)
> library(ggplot2)
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> #library(ggalt)
> sessionInfo()
R version 4.0.3 (2020-10-10)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: SUSE Linux Enterprise Server 12 SP5

Matrix products: default
BLAS/LAPACK: /pkg/suse12/software/OpenBLAS/0.3.12-GCC-10.2.0/lib/libopenblas_haswellp-r0.3.12.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] parallel  stats     graphics  grDevices utils     datasets  methods  
[8] base     

other attached packages:
[1] dplyr_1.0.6               ggplot2_3.3.3            
[3] StateSpaceInference_2.2.1

loaded via a namespace (and not attached):
 [1] fansi_0.4.2      withr_2.4.2      assertthat_0.2.1 utf8_1.2.1      
 [5] crayon_1.4.1     grid_4.0.3       R6_2.5.0         gtable_0.3.0    
 [9] DBI_1.1.0        lifecycle_1.0.0  magrittr_2.0.1   scales_1.1.1    
[13] pillar_1.6.0     rlang_0.4.11     vctrs_0.3.8      generics_0.1.0  
[17] ellipsis_0.3.2   glue_1.4.2       munsell_0.5.0    purrr_0.3.4     
[21] compiler_4.0.3   colorspace_2.0-1 pkgconfig_2.0.3  tidyselect_1.1.1
[25] tibble_3.1.1    
> 
> cl <- makeCluster(parallel::detectCores() - 1)
> #cl = "mclapply"
> #cl <- NULL
> 
> set.seed(2)
> 
> TT <- 20
> true_theta <- c(0.25, 2)
> lower <- 0
> upper <- 3.5
> sd_t <- 1
> 
> a_logit <- 0.9
> 
> true_states <-cumsum(rnorm(TT))
> 
> lambda_fun <- stepfun(seq(1, TT - 1, by = 1), y = true_states)
> # kern <- function(x){return(decay_func(x, alpha = true_theta[1], delta = true_theta[2]))}
> #
> # y_history <- sim_hawkes(lambda_fun, NULL, kern, 0, TT*10, progressBar = FALSE)
> # y <- hist(y_history, breaks = seq(0, TT*10, by = 10), plot = FALSE)$counts
> 
> y <- generate_stan_skew(TT, true_states, true_theta)
> 
> plot(seq(0, TT, length.out = TT * 100), unlist(y))
> 
> plot(lambda_fun, add = TRUE, col = "red")
> 
> inp <- list(
+   lower = lower,
+   upper = upper,
+   sd_t = sd_t,
+   a_logit = a_logit,
+   y = y
+ )
> 
> loss = loss_stan_skew
> 
> 
> Ntheta = 2000
> Nx = 2000
> pacc = 0.05
> 
> lower_theta <- c(0.1, 0.2)
> upper_theta <- c(0.5, 4)
> 
> prior_sample <- data.frame(theta1 = runif(Ntheta, lower_theta[1], upper_theta[1]), theta2 = runif(Ntheta, lower_theta[2], upper_theta[2]))
> 
> prior_sample <- as.matrix(prior_sample, ncol = 2)
> 
> trans <- function(x, trans_args){
+   theta1 <- log(x[,1])
+   theta2 <- log(x[,2])
+   return(cbind(theta1, theta2))
+ }
> 
> invtrans <- function(x, trans_args){
+   theta1 <- exp(x[,1])
+   theta2 <- exp(x[,2])
+   return(cbind(theta1, theta2))
+ }
> 
> full_list <- SMC2_ABC(prior_sample, dprior = function(x){dunif(x[1], 0.1, 0.5)*dunif(x[2],0.2,4)}, loss, loss_args = inp, Ntheta = Ntheta, Nx = Nx, pacc = pacc, cl = cl, dt = 1, ESS_threshold = 0.5, TT = TT, trans = trans, invtrans = invtrans, cov_coef = 0.25^2)
[1] 0.1001181 0.1085883 0.2772988 0.4844310 0.4998299
[1] 0.2005911 0.4438267 2.2276215 3.8935239 3.9994787
[1] "1. 1729.11330550959"
[1] 0.1001181 0.1073879 0.2626473 0.4676067 0.4998299
[1] 0.2005911 0.3531210 1.6449946 3.4235430 3.9994787
[1] "2. 1208.60602303757"
[1] 0.1001181 0.1077469 0.2637201 0.4670273 0.4998299
[1] 0.2005911 0.5208403 1.7756996 3.4125475 3.9994787
[1] "3. 1100.24059982916"
[1] 0.1001181 0.1085883 0.2643517 0.4597042 0.4998299
[1] 0.2005911 0.7144058 1.7942456 3.2732532 3.9994787
[1] "4. 908.785874312491"
[1] "resample"
[1] 0.07907816 0.11119032 0.25526676 0.45389902 0.59472687
[1] 0.2016012 0.9389230 1.8617845 3.2806219 4.4312349
[1] "SMC:  1898.98593801559"
[1] 0.07907816 0.11199866 0.24883068 0.43069684 0.59472687
[1] 0.2016012 0.8549153 1.6902447 2.7747091 4.4312349
[1] "SMC:  1644.86905881473"
[1] 0.07907816 0.11204285 0.24975210 0.42693160 0.59472687
[1] 0.2016012 0.9724438 1.7426163 2.7795322 4.4312349
[1] "SMC:  1598.72233793936"
[1] 0.07907816 0.11416795 0.25204832 0.41831731 0.59472687
[1] 0.2016012 1.0639979 1.7546259 2.7234224 4.4312349
[1] "SMC:  1477.26298610199"
acceptance rate:  0.836 
[1] 0.1027150 0.1160890 0.2473110 0.3832247 0.4819964
[1] 0.3290936 1.1505566 1.7509311 2.4415463 3.2490773
[1] "5. 1937.25896260751"
[1] 0.1027150 0.1194178 0.2422837 0.3681097 0.4819964
[1] 0.3290936 1.1244707 1.6886484 2.2922726 3.2490773
[1] "6. 1822.11575619165"
[1] 0.1027150 0.1194178 0.2391210 0.3591585 0.4819964
[1] 0.3290936 1.0741448 1.6027203 2.1741632 3.2490773
[1] "7. 1567.78539720646"
[1] 0.1027150 0.1231019 0.2380474 0.3511857 0.4819964
[1] 0.3290936 1.1137271 1.6253785 2.1895757 3.2490773
[1] "8. 1553.94468280491"
[1] 0.1027150 0.1235926 0.2406838 0.3519565 0.4819964
[1] 0.3290936 1.1581944 1.6534613 2.2054447 3.2490773
[1] "9. 1578.6283120876"
[1] 0.1027150 0.1235926 0.2353699 0.3428057 0.4819964
[1] 0.3290936 1.1137271 1.5974357 2.1187568 3.2490773
[1] "10. 1369.67439878065"
[1] 0.1027150 0.1249782 0.2395075 0.3453847 0.4819964
[1] 0.3290936 1.1921080 1.6824919 2.1976177 3.2490773
[1] "11. 1457.9693536381"
[1] 0.1027150 0.1277404 0.2422837 0.3454131 0.4819964
[1] 0.3290936 1.2559468 1.7432278 2.2358355 3.2490773
[1] "12. 1400.97933363827"
[1] 0.1027150 0.1308115 0.2443622 0.3513016 0.4819964
[1] 0.3290936 1.3839833 1.8299616 2.3034103 3.2490773
[1] "13. 1273.59908317014"
[1] 0.1027150 0.1319713 0.2447211 0.3489615 0.4819964
[1] 0.3290936 1.3839833 1.8156856 2.2649528 3.2490773
[1] "14. 1228.88126849973"
[1] 0.1027150 0.1319713 0.2447211 0.3458571 0.4819964
[1] 0.3290936 1.3831265 1.8048051 2.2560152 3.2490773
[1] "15. 1212.96203106773"
[1] 0.1027150 0.1317616 0.2447211 0.3439320 0.4819964
[1] 0.3290936 1.3681976 1.7876839 2.2436063 3.2490773
[1] "16. 1208.17400822814"
[1] 0.1027150 0.1327091 0.2447211 0.3392607 0.4819964
[1] 0.3290936 1.3300027 1.7516663 2.1976177 3.2490773
[1] "17. 1167.71192144655"
[1] 0.1027150 0.1358238 0.2464306 0.3413671 0.4819964
[1] 0.3290936 1.3867367 1.7940837 2.2366979 3.2490773
[1] "18. 1074.85482962249"
[1] 0.1027150 0.1410470 0.2475319 0.3413671 0.4819964
[1] 0.3290936 1.4254053 1.8146565 2.2465878 3.2490773
[1] "19. 1001.28548522609"
[1] 0.1027150 0.1424209 0.2472384 0.3325217 0.4787724
[1] 0.3290936 1.4363043 1.8178200 2.2401186 3.2490773
[1] "20. 920.268725510174"
[1] "resample"
[1] 0.1054153 0.1406890 0.2436889 0.3440936 0.4350445
[1] 1.137846 1.422512 1.828907 2.280275 2.997595
[1] "SMC:  1981.7375045633"
[1] 0.1054153 0.1406890 0.2430950 0.3406805 0.4350445
[1] 1.137846 1.405449 1.791113 2.229301 2.997595
[1] "SMC:  1924.47918722239"
[1] 0.1054153 0.1420078 0.2432637 0.3403552 0.4350445
[1] 1.137846 1.414363 1.800686 2.240042 2.997595
[1] "SMC:  1922.47413200788"
[1] 0.1054153 0.1462618 0.2438287 0.3398555 0.4350445
[1] 1.137846 1.422512 1.803539 2.230174 2.997595
[1] "SMC:  1895.07079789955"
[1] 0.1054153 0.1490335 0.2436889 0.3367157 0.4350445
[1] 1.137846 1.434080 1.804424 2.224172 2.997595
[1] "SMC:  1848.67894985698"
[1] 0.1054153 0.1500965 0.2422565 0.3288832 0.4350445
[1] 1.137846 1.416568 1.780896 2.183606 2.997595
[1] "SMC:  1759.58735760021"
[1] 0.1054153 0.1497420 0.2411819 0.3268459 0.4350445
[1] 1.137846 1.379977 1.735828 2.117360 2.997595
[1] "SMC:  1570.19128565366"
[1] 0.1054153 0.1525766 0.2407699 0.3218259 0.4350445
[1] 1.137846 1.392174 1.742628 2.124593 2.997595
[1] "SMC:  1566.45869708229"
[1] 0.1054153 0.1538326 0.2411819 0.3218688 0.4350445
[1] 1.137846 1.413776 1.758364 2.131922 2.997595
[1] "SMC:  1584.94449147172"
[1] 0.1054153 0.1525766 0.2394403 0.3178251 0.4350445
[1] 1.137846 1.386092 1.722123 2.088850 2.997595
[1] "SMC:  1408.03875223867"
[1] 0.1054153 0.1549997 0.2405188 0.3185232 0.4350445
[1] 1.137846 1.431935 1.764154 2.127061 2.997595
[1] "SMC:  1538.49181348616"
[1] 0.1054153 0.1559532 0.2408501 0.3183569 0.4350445
[1] 1.137846 1.466334 1.788631 2.144539 2.997595
[1] "SMC:  1549.4214815586"
[1] 0.1054153 0.1577064 0.2422832 0.3201258 0.4350445
[1] 1.137846 1.507228 1.836623 2.197909 2.997595
[1] "SMC:  1539.41162438625"
[1] 0.1054153 0.1587124 0.2426050 0.3185232 0.4350445
[1] 1.137846 1.504204 1.830085 2.185554 2.997595
[1] "SMC:  1501.43810241127"
[1] 0.1054153 0.1587124 0.2418739 0.3178251 0.4350445
[1] 1.137846 1.503004 1.821601 2.178262 2.997595
[1] "SMC:  1470.04463423893"
[1] 0.1054153 0.1590010 0.2414483 0.3173816 0.4350445
[1] 1.137846 1.497085 1.809665 2.149981 2.997595
[1] "SMC:  1440.84243804259"
[1] 0.1054153 0.1611669 0.2414483 0.3156238 0.4350445
[1] 1.137846 1.485285 1.788092 2.124633 2.997595
[1] "SMC:  1366.19392369987"
[1] 0.1054153 0.1622773 0.2426050 0.3156238 0.4350445
[1] 1.137846 1.507228 1.814353 2.144539 2.997595
[1] "SMC:  1356.9715709359"
[1] 0.1054153 0.1639343 0.2439960 0.3158690 0.4350445
[1] 1.137846 1.527433 1.827724 2.149981 2.997595
[1] "SMC:  1324.57233246398"
[1] 0.1054153 0.1647964 0.2431121 0.3139247 0.4350445
[1] 1.137846 1.530490 1.828397 2.149681 2.997595
[1] "SMC:  1278.52571692209"
acceptance rate:  0.7635 
There were 50 or more warnings (use warnings() to see the first 50)
> 
> state_df <- get_state(full_list)
> 
> state_df$state <- true_states
> 
> theta_df <- get_parameter(full_list)
> 
> save(theta_df, file = "theta_df.RData")
> 
> ggplot(theta_df[which(theta_df$time %% 5 == 0),]) + aes(x = value, weights = weight, col = factor(time)) + geom_density() + facet_wrap(~parameter, scales = "free")
> 
> theta_df <- theta_df %>%
+   filter(time == TT) %>%
+   mutate(type = "ABC") %>%
+   select(-parameter, -time)
> 
> saveRDS(state_df, file = "state_df.rds")
> saveRDS(theta_df, file = "theta_df.rds")
> 
> 
> 
> #ggplot(state_df) + aes(x = time, y = state, ymin = lower, ymax = upper) + geom_step() + geom_ribbon(alpha = 0.2, stat = "stepribbon", fill = "red") + geom_step(mapping = aes(x = time, y = med), col = "red") + scale_y_continuous(expand = c(0, 0)) + scale_x_continuous(expand = c(0, 0))
> 
> 
> 
> proc.time()
    user   system  elapsed 
  71.508    7.812 2222.016 
