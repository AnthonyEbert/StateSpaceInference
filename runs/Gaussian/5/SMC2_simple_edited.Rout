
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> library(parallel)
> library(StateSpaceInference)
> library(ggplot2)
> library(ggalt)
> sessionInfo()
R version 3.5.1 (2018-07-02)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: SUSE Linux Enterprise Server 12 SP2

Matrix products: default
BLAS/LAPACK: /pkg/suse12/software/openblas/0.2.20-gcc-6.4.0-2.28/lib/libopenblas_sandybridgep-r0.2.20.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] parallel  stats     graphics  grDevices utils     datasets  methods  
[8] base     

other attached packages:
[1] ggalt_0.4.0               ggplot2_3.1.0            
[3] StateSpaceInference_1.1.0

loaded via a namespace (and not attached):
 [1] Rcpp_1.0.0         Rttf2pt1_1.3.7     bindr_0.1.1        magrittr_1.5      
 [5] maps_3.3.0         MASS_7.3-51.1      tidyselect_0.2.5   munsell_0.5.0     
 [9] colorspace_1.3-2   R6_2.3.0           rlang_0.3.0.1      plyr_1.8.4        
[13] dplyr_0.7.8        grid_3.5.1         gtable_0.2.0       ash_1.0-15        
[17] KernSmooth_2.23-15 extrafontdb_1.0    withr_2.1.2        proj4_1.0-8       
[21] lazyeval_0.2.1     assertthat_0.2.0   tibble_1.4.2       crayon_1.3.4      
[25] bindrcpp_0.2.2     RColorBrewer_1.1-2 purrr_0.2.5        glue_1.3.0        
[29] compiler_3.5.1     pillar_1.3.0       scales_1.0.0       extrafont_0.17    
[33] pkgconfig_2.0.2   
> 
> #cl <- makeCluster(parallel::detectCores() - 1)
> cl = "mclapply"
> #cl <- NULL
> 
> set.seed(2)
> 
> TT <- 20
> true_theta <- c(0.25, 0.5)
> lower <- 0
> upper <- 3.5
> sd_t <- 1
> init <- min(rgamma(1, 100, 100), upper - 1)
> a_logit <- 0.9
> dist_coef <- 0.5
> true_states <- generate_state(init, TT, lower, upper, sd_t, a = a_logit)
> 
> lambda_fun <- stepfun(seq(1, TT - 1, by = 1), y = true_states)
> # kern <- function(x){return(decay_func(x, alpha = true_theta[1], delta = true_theta[2]))}
> #
> # y_history <- sim_hawkes(lambda_fun, NULL, kern, 0, TT*10, progressBar = FALSE)
> # y <- hist(y_history, breaks = seq(0, TT*10, by = 10), plot = FALSE)$counts
> 
> y <- generate_simple(TT, true_states, true_theta)
> 
> plot(seq(0, TT, length.out = TT * 10), unlist(y))
> 
> plot(lambda_fun, add = TRUE, col = "red")
> 
> simulator <- hawkes_simulator
> 
> inp <- list(
+   lower = lower,
+   upper = upper,
+   sd_t = sd_t,
+   a_logit = a_logit,
+   y = y,
+   simulator = simulator
+ )
> 
> loss = loss_simple
> 
> 
> Ntheta = 1000
> Nx = 1000
> pacc = 0.05
> 
> lower_theta <- c(0.1, 0.2)
> upper_theta <- c(0.5, 0.8)
> 
> prior_sample <- data.frame(theta1 = runif(Ntheta, lower_theta[1], upper_theta[1]), theta2 = runif(Ntheta, lower_theta[2], upper_theta[2]))
> 
> prior_sample <- as.matrix(prior_sample, ncol = 2)
> 
> trans <- function(x, trans_args){
+   theta1 <- log(x[,1])
+   theta2 <- log(x[,2])
+   return(cbind(theta1, theta2))
+ }
> 
> invtrans <- function(x, trans_args){
+   theta1 <- exp(x[,1])
+   theta2 <- exp(x[,2])
+   return(cbind(theta1, theta2))
+ }
> 
> full_list <- SMC2_ABC(prior_sample, dprior = function(x){dunif(x[1], 0.1, 0.5)*dunif(x[2],0.2,0.8)}, loss, loss_args = inp, Ntheta = Ntheta, Nx = Nx, pacc = pacc, cl = cl, dt = 1, ESS_threshold = 0.5, TT = TT, trans = trans, invtrans = invtrans, cov_coef = 0.25^2)
[1] 0.1008277 0.1789855 0.2489303 0.3317228 0.4994755
[1] 0.2011203 0.3794195 0.5446005 0.6848371 0.7995355
[1] "1. 828.109002940332"
[1] 0.1008277 0.1682171 0.2257167 0.2888850 0.4994755
[1] 0.2011203 0.3831237 0.5474263 0.6825923 0.7995355
[1] "2. 666.274780012509"
[1] 0.1008277 0.1683472 0.2259247 0.2882412 0.4994755
[1] 0.2024922 0.4155428 0.5736294 0.6948296 0.7995355
[1] "3. 614.717741979211"
[1] 0.1008277 0.1742282 0.2280729 0.2880730 0.4994755
[1] 0.2024922 0.3807752 0.5328957 0.6766339 0.7995355
[1] "4. 627.252557584854"
[1] 0.1014452 0.1931580 0.2417955 0.2971566 0.4994755
[1] 0.2024922 0.3779601 0.5288335 0.6697264 0.7995355
[1] "5. 576.275787638711"
[1] 0.1026643 0.2045879 0.2484862 0.3009365 0.4994755
[1] 0.2024922 0.3709010 0.5176388 0.6624410 0.7995355
[1] "6. 540.264781540813"
[1] 0.1032227 0.2149812 0.2589375 0.3093152 0.4994755
[1] 0.2024922 0.4029023 0.5596131 0.6928133 0.7995355
[1] "7. 489.364670851666"
[1] "resample"
[1] 0.09618206 0.21501967 0.25380610 0.29592951 0.53718061
[1] 0.1737195 0.4456434 0.5950227 0.7127459 0.9409885
[1] "SMC:  927.375653033106"
[1] 0.09618206 0.20888871 0.24636348 0.28475759 0.53718061
[1] 0.1737195 0.4449826 0.5911376 0.7093268 0.9409885
[1] "SMC:  858.148827228157"
[1] 0.09618206 0.20888871 0.24636348 0.28446742 0.53718061
[1] 0.1737195 0.4716897 0.6148742 0.7274949 0.9409885
[1] "SMC:  796.032596942095"
[1] 0.09618206 0.21115058 0.24738430 0.28458487 0.53718061
[1] 0.1737195 0.4379359 0.5806266 0.7037448 0.9409885
[1] "SMC:  822.211279525539"
[1] 0.1105374 0.2188594 0.2501540 0.2870192 0.5371806
[1] 0.1716448 0.4365908 0.5774709 0.7005356 0.9409885
[1] "SMC:  797.82580291538"
[1] 0.1216828 0.2234128 0.2546281 0.2887500 0.5371806
[1] 0.1716448 0.4278936 0.5630706 0.6945723 0.9409885
[1] "SMC:  777.602868487469"
[1] 0.1252306 0.2279383 0.2578273 0.2928753 0.5371806
[1] 0.1737195 0.4647658 0.5993049 0.7112449 0.9409885
[1] "SMC:  729.000132529014"
acceptance rate:  0.743 
[1] 0.1162581 0.2306551 0.2558529 0.2880976 0.4034558
[1] 0.2092815 0.4784663 0.6027942 0.7009167 0.7979415
[1] "8. 973.434478604571"
[1] 0.1162581 0.2346272 0.2605070 0.2890774 0.4034558
[1] 0.2092815 0.4724405 0.5936358 0.6969094 0.7979415
[1] "9. 945.138130588829"
[1] 0.1162581 0.2346738 0.2605025 0.2890774 0.4034558
[1] 0.2092815 0.4621485 0.5785844 0.6923433 0.7979415
[1] "10. 911.154744476361"
[1] 0.1520477 0.2413632 0.2639647 0.2928514 0.4034558
[1] 0.2092815 0.4613922 0.5785844 0.6911726 0.7979415
[1] "11. 859.492211047823"
[1] 0.1556772 0.2423040 0.2643600 0.2909184 0.4034558
[1] 0.2092815 0.5010951 0.6113205 0.7057890 0.7979415
[1] "12. 856.753275514416"
[1] 0.1556772 0.2426094 0.2628678 0.2909184 0.4034558
[1] 0.2092815 0.4401895 0.5542158 0.6647104 0.7979415
[1] "13. 753.23211108087"
[1] 0.1773109 0.2534179 0.2769821 0.2992800 0.4034558
[1] 0.2092815 0.4507984 0.5750438 0.6730217 0.7979415
[1] "14. 669.922625674311"
[1] 0.1773109 0.2496649 0.2718864 0.2959121 0.4034558
[1] 0.2113096 0.5010951 0.6062323 0.7002574 0.7979415
[1] "15. 713.439252619931"
[1] 0.1789855 0.2490623 0.2695140 0.2946063 0.4034558
[1] 0.2092815 0.4968345 0.5978947 0.6936022 0.7979415
[1] "16. 680.265689931081"
[1] 0.1765925 0.2456626 0.2614772 0.2845543 0.4034558
[1] 0.2092815 0.4994140 0.6011705 0.6972774 0.7979415
[1] "17. 673.739968692286"
[1] 0.1765925 0.2457214 0.2621213 0.2845543 0.4034558
[1] 0.2135405 0.5329923 0.6281802 0.7182859 0.7979415
[1] "18. 649.090227050003"
[1] 0.1764550 0.2407588 0.2558529 0.2752003 0.4034558
[1] 0.2135405 0.5363086 0.6379779 0.7260604 0.7979415
[1] "19. 614.858205794964"
[1] 0.1764550 0.2397664 0.2557123 0.2739601 0.4034558
[1] 0.2135405 0.5273456 0.6234197 0.7158008 0.7979415
[1] "20. 581.64299891914"
> 
> state_df <- get_state(full_list)
> 
> state_df$state <- true_states
> 
> theta_df <- get_parameter(full_list)
> 
> 
> save.image()
> save(state_df, file = "state_df.RData")
> save(theta_df, file = "theta_df.RData")
> 
> 
> 
> ggplot(state_df) + aes(x = time, y = state, ymin = lower, ymax = upper) + geom_step() + geom_ribbon(alpha = 0.2, stat = "stepribbon", fill = "red") + geom_step(mapping = aes(x = time, y = med), col = "red") + ggthemes::theme_base() + scale_y_continuous(expand = c(0, 0)) + scale_x_continuous(expand = c(0, 0))
> 
> ggplot(theta_df[which(theta_df$time %% 5 == 0),]) + aes(x = value, weights = weight, col = factor(time)) + geom_density() + facet_wrap(~parameter, scales = "free")
> 
> proc.time()
    user   system  elapsed 
5894.914  102.285  491.859 
