
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> library(parallel)
> library(StateSpaceInference)
> library(ggplot2)
> library(ggalt)
> sessionInfo()
R version 3.5.1 (2018-07-02)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: SUSE Linux Enterprise Server 12 SP2

Matrix products: default
BLAS/LAPACK: /pkg/suse12/software/openblas/0.2.20-gcc-6.4.0-2.28/lib/libopenblas_sandybridgep-r0.2.20.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] parallel  stats     graphics  grDevices utils     datasets  methods  
[8] base     

other attached packages:
[1] ggalt_0.4.0               ggplot2_3.1.0            
[3] StateSpaceInference_1.2.1

loaded via a namespace (and not attached):
 [1] Rcpp_1.0.0         Rttf2pt1_1.3.7     bindr_0.1.1        magrittr_1.5      
 [5] maps_3.3.0         MASS_7.3-51.1      tidyselect_0.2.5   munsell_0.5.0     
 [9] colorspace_1.3-2   R6_2.3.0           rlang_0.3.0.1      plyr_1.8.4        
[13] dplyr_0.7.8        grid_3.5.1         gtable_0.2.0       ash_1.0-15        
[17] KernSmooth_2.23-15 extrafontdb_1.0    withr_2.1.2        proj4_1.0-8       
[21] lazyeval_0.2.1     assertthat_0.2.0   tibble_1.4.2       crayon_1.3.4      
[25] bindrcpp_0.2.2     RColorBrewer_1.1-2 purrr_0.2.5        glue_1.3.0        
[29] compiler_3.5.1     pillar_1.3.0       scales_1.0.0       extrafont_0.17    
[33] pkgconfig_2.0.2   
> 
> #cl <- makeCluster(parallel::detectCores())
> cl = "mclapply"
> #cl <- NULL
> 
> set.seed(3)
> 
> TT <- 40
> true_theta <- c(0.5, 0.5)
> lower <- 0
> upper <- 3.5
> sd_t <- 1
> init <- min(rgamma(1, 100, 100), upper - 1)
> a_logit <- 0.9
> dist_coef <- 0.5
> true_states <- generate_state(init, TT, lower, upper, sd_t, a = a_logit)
> 
> y <- NULL
> 
> #y <- hawkes_simulator(true_states[1], true_theta, NULL, 0, 10)
> for(tp in 1:TT){
+   y <- hawkes_simulator(true_states[tp], true_theta, y$history, tp * 10 - 10, tp * 10)
+ }
> 
> y_history <- y$history
> 
> lambda_fun <- stepfun(seq(10, TT*10 - 10, by = 10), y = true_states)
> kern <- function(x){return(decay_func(x, alpha = true_theta[1], delta = true_theta[2]))}
> #
> #y_history <- sim_hawkes(lambda_fun, NULL, kern, 0, TT*10, progressBar = FALSE)
> #y <- hist(y_history, breaks = seq(0, TT*10, by = 10), plot = FALSE)$counts
> 
> hist(y_history, breaks = TT * 10)
> 
> plot(lambda_fun, add = TRUE, col = "red")
> 
> simulator <- hawkes_simulator
> 
> inp <- list(
+   lower = lower,
+   upper = upper,
+   sd_t = sd_t,
+   a_logit = a_logit,
+   history = y_history,
+   simulator = simulator
+ )
> 
> loss = loss_hawkes
> 
> 
> Ntheta = 200
> Nx = 1000
> pacc = 0.25
> 
> lower_theta <- c(0.3, 0.4)
> upper_theta <- c(0.7, 0.6)
> 
> prior_sample <- data.frame(theta1 = runif(Ntheta, lower_theta[1], upper_theta[1]), theta2 = runif(Ntheta, lower_theta[2], upper_theta[2]))
> 
> prior_sample <- as.matrix(prior_sample, ncol = 2)
> 
> trans <- function(x, trans_args){
+   theta1 <- log(x[,1])
+   theta2 <- log(x[,2])
+   return(cbind(theta1, theta2))
+ }
> 
> invtrans <- function(x, trans_args){
+   theta1 <- exp(x[,1])
+   theta2 <- exp(x[,2])
+   return(cbind(theta1, theta2))
+ }
> 
> full_list <- SMC2_ABC(prior_sample, dprior = dHawkes, loss, loss_args = inp, Ntheta = Ntheta, Nx = Nx, pacc = pacc, cl = cl, dt = 10, ESS_threshold = 0.5, TT = TT, trans = trans, invtrans = invtrans, cov_coef = 0.25^2)
[1] 0.3002906 0.3725809 0.4798691 0.5596599 0.6982322
[1] 0.4023733 0.4466898 0.4964101 0.5433800 0.5977228
[1] "1. 185.440622764192"
[1] 0.3002906 0.3571747 0.4460941 0.5348457 0.6982322
[1] 0.4023733 0.4466898 0.4961331 0.5427192 0.5977228
[1] "2. 166.558396953941"
[1] 0.3002906 0.3537833 0.4382752 0.5168888 0.6982322
[1] 0.4023733 0.4466898 0.4957314 0.5424886 0.5977228
[1] "3. 158.50769873894"
[1] 0.3002906 0.3531863 0.4381908 0.5136618 0.6982322
[1] 0.4023733 0.4465075 0.4957314 0.5424886 0.5977228
[1] "4. 155.944006491873"
[1] 0.3002906 0.3537833 0.4381908 0.5130682 0.6982322
[1] 0.4023733 0.4464551 0.4957314 0.5417536 0.5977228
[1] "5. 154.277754172373"
[1] 0.3002906 0.3518916 0.4186139 0.5081570 0.6982322
[1] 0.4023733 0.4458146 0.4957314 0.5417536 0.5977228
[1] "6. 141.684878107123"
[1] 0.3002906 0.3518916 0.4186139 0.5081570 0.6982322
[1] 0.4023733 0.4448844 0.4933531 0.5414875 0.5977228
[1] "7. 140.168185605979"
[1] 0.3002906 0.3523801 0.4211071 0.5083329 0.6982322
[1] 0.4023733 0.4464551 0.4957314 0.5417536 0.5977228
[1] "8. 141.531315243281"
[1] 0.3002906 0.3663803 0.4615614 0.5348457 0.6982322
[1] 0.4023733 0.4458146 0.4933531 0.5417536 0.5977228
[1] "9. 165.529093456358"
[1] 0.3002906 0.3530772 0.4285804 0.5081666 0.6982322
[1] 0.4023733 0.4464551 0.4957314 0.5417536 0.5977228
[1] "10. 142.301409249476"
[1] 0.3002906 0.3571747 0.4411075 0.5125830 0.6982322
[1] 0.4023733 0.4458146 0.4935527 0.5417536 0.5977228
[1] "11. 152.091646477647"
[1] 0.3002906 0.3768593 0.4728547 0.5464528 0.6982322
[1] 0.4023733 0.4458146 0.4933137 0.5414875 0.5977228
[1] "12. 169.255326042776"
[1] 0.3002906 0.3663803 0.4636062 0.5348457 0.6982322
[1] 0.4023733 0.4448844 0.4932142 0.5373876 0.5977228
[1] "13. 161.438586414364"
[1] 0.3002906 0.3663803 0.4615614 0.5345243 0.6982322
[1] 0.4023733 0.4448844 0.4932142 0.5357357 0.5977228
[1] "14. 159.398582020547"
[1] 0.3002906 0.3899926 0.4822780 0.5528123 0.6982322
[1] 0.4023733 0.4448844 0.4932142 0.5373876 0.5977228
[1] "15. 171.278956017759"
[1] 0.3002906 0.3802565 0.4783382 0.5464319 0.6982322
[1] 0.4023733 0.4444651 0.4928110 0.5357357 0.5977228
[1] "16. 164.005549508792"
[1] 0.3002906 0.3725809 0.4695354 0.5385971 0.6982322
[1] 0.4023733 0.4444651 0.4928110 0.5357357 0.5977228
[1] "17. 161.490164907319"
[1] 0.3002906 0.3725809 0.4654969 0.5384145 0.6982322
[1] 0.4023733 0.4425580 0.4920962 0.5334279 0.5977228
[1] "18. 158.862229320468"
[1] 0.3002906 0.3620145 0.4545478 0.5136618 0.6982322
[1] 0.4023733 0.4425580 0.4928110 0.5334279 0.5977228
[1] "19. 150.352895429753"
[1] 0.3002906 0.3613931 0.4460941 0.5130682 0.6982322
[1] 0.4023733 0.4425580 0.4932142 0.5334279 0.5977228
[1] "20. 146.667231810567"
[1] 0.3002906 0.3568802 0.4382752 0.5083512 0.6982322
[1] 0.4023733 0.4425580 0.4933137 0.5322849 0.5977228
[1] "21. 139.877285778754"
[1] 0.3002906 0.3537833 0.4365074 0.5081570 0.6982322
[1] 0.4023733 0.4415652 0.4932142 0.5275103 0.5977228
[1] "22. 133.774460584058"
[1] 0.3002906 0.3537833 0.4365074 0.5064727 0.6982322
[1] 0.4023733 0.4415652 0.4932142 0.5275103 0.5977228
[1] "23. 133.591320346586"
[1] 0.3002906 0.3537833 0.4365074 0.5081570 0.6982322
[1] 0.4023733 0.4425580 0.4933137 0.5300651 0.5977228
[1] "24. 131.433992661511"
[1] 0.3002906 0.3531863 0.4291453 0.5030531 0.6982322
[1] 0.4023733 0.4425580 0.4935527 0.5322849 0.5977228
[1] "25. 125.567200301075"
[1] 0.3002906 0.3530772 0.4186139 0.5008612 0.6982322
[1] 0.4023733 0.4425580 0.4935527 0.5275103 0.5977228
[1] "26. 119.272773288023"
[1] 0.3002906 0.3509918 0.4112686 0.4912168 0.6982322
[1] 0.4023733 0.4425580 0.4957314 0.5275103 0.5977228
[1] "27. 110.419813328891"
[1] 0.3002906 0.3613931 0.4381908 0.5083329 0.6982322
[1] 0.4023733 0.4448365 0.4957314 0.5322849 0.5977228
[1] "28. 129.776800227147"
[1] 0.3002906 0.3620145 0.4381908 0.5030531 0.6982322
[1] 0.4023733 0.4444651 0.4933531 0.5322849 0.5977228
[1] "29. 125.04906877837"
[1] 0.3002906 0.4115018 0.4822780 0.5384145 0.6982322
[1] 0.4023733 0.4448365 0.4920962 0.5334279 0.5977228
[1] "30. 142.982845505897"
[1] 0.3002906 0.4186139 0.4944388 0.5536069 0.6982322
[1] 0.4023733 0.4448844 0.4928110 0.5357357 0.5977228
[1] "31. 152.694178206627"
[1] 0.3002906 0.4164819 0.4887562 0.5491699 0.6982322
[1] 0.4023733 0.4448844 0.4932142 0.5357357 0.5977228
[1] "32. 150.040312505736"
[1] 0.3002906 0.4308404 0.4983938 0.5606347 0.6982322
[1] 0.4023733 0.4448844 0.4920962 0.5357357 0.5977228
[1] "33. 150.410462952071"
[1] 0.3002906 0.4381908 0.5014794 0.5649632 0.6982322
[1] 0.4023733 0.4444651 0.4881140 0.5339159 0.5977228
[1] "34. 150.108201238504"
[1] 0.3002906 0.4411075 0.5030531 0.5674306 0.6982322
[1] 0.4023733 0.4444651 0.4881140 0.5339159 0.5977228
[1] "35. 149.250765661132"
[1] 0.3002906 0.4427814 0.5030531 0.5701068 0.6982322
[1] 0.4023733 0.4444651 0.4881140 0.5339159 0.5977228
[1] "36. 148.133725047245"
[1] 0.3002906 0.4449540 0.5064727 0.5701068 0.6982322
[1] 0.4023733 0.4444651 0.4881140 0.5334279 0.5977228
[1] "37. 146.438898267274"
[1] 0.3002906 0.5008612 0.5606347 0.6158191 0.6982322
[1] 0.4023733 0.4413595 0.4775549 0.5310119 0.5977228
[1] "38. 123.362776584264"
[1] 0.3002906 0.4999000 0.5596599 0.6158191 0.6982322
[1] 0.4023733 0.4412048 0.4720774 0.5248735 0.5977228
[1] "39. 122.738641490566"
[1] 0.3002906 0.4958564 0.5558088 0.6157507 0.6982322
[1] 0.4023733 0.4370852 0.4678049 0.5234388 0.5977228
[1] "40. 121.475368709481"
There were 50 or more warnings (use warnings() to see the first 50)
> 
> state_df <- get_state(full_list, probs = c(0.25, 0.5, 0.75))
> 
> state_df$state <- true_states
> 
> theta_df <- get_parameter(full_list)
> 
> 
> save.image()	
> save(state_df, file = "state_df.RData")	
> save(theta_df, file = "theta_df.RData")
> 
> 
> 
> ggplot(state_df) + aes(x = time, y = state, ymin = lower, ymax = upper) + geom_step() + geom_ribbon(alpha = 0.2, stat = "stepribbon", fill = "red") + geom_step(mapping = aes(x = time, y = med), col = "red") + ggthemes::theme_base() + scale_y_continuous(expand = c(0, 0)) + scale_x_continuous(expand = c(0, 0))
> 
> ggplot(theta_df[which(theta_df$time %% 5 == 0),]) + aes(x = value, weights = weight, col = factor(time)) + geom_density() + facet_wrap(~parameter, scales = "free")
> 
> proc.time()
    user   system  elapsed 
8939.264  144.071  647.901 
