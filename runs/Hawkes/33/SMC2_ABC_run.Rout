
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> library(parallel)
> library(StateSpaceInference)
> library(ggplot2)
> library(ggalt)
> sessionInfo()
R version 3.5.1 (2018-07-02)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: SUSE Linux Enterprise Server 12 SP2

Matrix products: default
BLAS/LAPACK: /pkg/suse12/software/openblas/0.2.20-gcc-6.4.0-2.28/lib/libopenblas_sandybridgep-r0.2.20.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] parallel  stats     graphics  grDevices utils     datasets  methods  
[8] base     

other attached packages:
[1] ggalt_0.4.0               ggplot2_3.1.0            
[3] StateSpaceInference_0.5.0

loaded via a namespace (and not attached):
 [1] Rcpp_1.0.0         Rttf2pt1_1.3.7     bindr_0.1.1        magrittr_1.5      
 [5] maps_3.3.0         MASS_7.3-51.1      tidyselect_0.2.5   munsell_0.5.0     
 [9] colorspace_1.3-2   R6_2.3.0           rlang_0.3.0.1      plyr_1.8.4        
[13] dplyr_0.7.8        grid_3.5.1         gtable_0.2.0       ash_1.0-15        
[17] KernSmooth_2.23-15 extrafontdb_1.0    withr_2.1.2        proj4_1.0-8       
[21] lazyeval_0.2.1     assertthat_0.2.0   tibble_1.4.2       crayon_1.3.4      
[25] bindrcpp_0.2.2     RColorBrewer_1.1-2 purrr_0.2.5        glue_1.3.0        
[29] compiler_3.5.1     pillar_1.3.0       scales_1.0.0       extrafont_0.17    
[33] pkgconfig_2.0.2   
> 
> #cl <- makeCluster(parallel::detectCores())
> cl = "mclapply"
> #cl <- NULL
> 
> set.seed(3)
> 
> TT <- 20
> true_theta <- c(0.5, 0.5)
> lower <- 0
> upper <- 3.5
> sd_t <- 1
> init <- min(rgamma(1, 100, 100), upper - 1)
> a_logit <- 0.9
> dist_coef <- 0.5
> true_states <- generate_state(init, TT, lower, upper, sd_t, a = a_logit)
> 
> y <- hawkes_simulator(true_states[1], true_theta, NULL, 0, 10)
> for(tp in 1:TT){
+   y <- hawkes_simulator(true_states[tp], true_theta, y$history, tp * 10, tp * 10 + 10)
+ }
> 
> y_history <- y$history
> 
> lambda_fun <- stepfun(seq(10, TT*10 - 10, by = 10), y = true_states)
> kern <- function(x){return(decay_func(x, alpha = true_theta[1], delta = true_theta[2]))}
> #
> #y_history <- sim_hawkes(lambda_fun, NULL, kern, 0, TT*10, progressBar = FALSE)
> #y <- hist(y_history, breaks = seq(0, TT*10, by = 10), plot = FALSE)$counts
> 
> hist(y_history, breaks = TT * 10)
> 
> plot(lambda_fun, add = TRUE, col = "red")
> 
> simulator <- hawkes_simulator
> 
> inp <- list(
+   lower = lower,
+   upper = upper,
+   sd_t = sd_t,
+   a_logit = a_logit,
+   history = y_history,
+   simulator = simulator
+ )
> 
> loss = loss_hawkes
> 
> 
> Ntheta = 200
> Nx = 5000
> pacc = 5e-2
> 
> lower_theta <- c(0.3, 0.3)
> upper_theta <- c(0.7, 0.7)
> 
> trans_args <- list(
+   lower_theta = lower_theta,
+   upper_theta = upper_theta,
+   a = 1
+ )
> 
> prior_sample <- data.frame(theta1 = runif(Ntheta, lower_theta[1], upper_theta[1]), theta2 = runif(Ntheta, lower_theta[2], upper_theta[2]))
> 
> prior_sample <- as.matrix(prior_sample, ncol = 2)
> 
> trans <- function(x, trans_args){
+   theta1 <- gtools::logit(x[,1], min = trans_args$lower[1], max = trans_args$upper[1])
+   theta2 <- gtools::logit(x[,2], min = trans_args$lower[2], max = trans_args$upper[2])
+   return(cbind(theta1, theta2))
+ }
> 
> invtrans <- function(x, trans_args){
+   theta1 <- gtools::inv.logit(trans_args$a * x[,1], min = trans_args$lower[1], max = trans_args$upper[1])
+   theta2 <- gtools::inv.logit(trans_args$a * x[,2], min = trans_args$lower[2], max = trans_args$upper[2])
+   return(cbind(theta1, theta2))
+ }
> 
> full_list <- SMC2_ABC(prior_sample, dprior = dHawkes, loss, loss_args = inp, Ntheta = Ntheta, Nx = Nx, pacc = pacc, cl = cl, dt = 10, ESS_threshold = 0.2, TT = TT, trans = trans, invtrans = invtrans, trans_args = trans_args)
[1] 0.3032790 0.3690037 0.4551251 0.5516371 0.6992435
[1] 0.3053522 0.4019257 0.4898805 0.5771258 0.6998184
[1] "1. 186.641653698805"
[1] 0.3032790 0.3646264 0.4505309 0.5425521 0.6992435
[1] 0.3004527 0.3964423 0.4814757 0.5734539 0.6998184
[1] "2. 180.171137662813"
[1] 0.3032790 0.3606640 0.4328697 0.5285687 0.6992435
[1] 0.3004527 0.3956298 0.4755858 0.5727637 0.6998184
[1] "3. 165.00484025316"
[1] 0.3032790 0.3590265 0.4292403 0.5244050 0.6992435
[1] 0.3004527 0.3896068 0.4698263 0.5657149 0.6998184
[1] "4. 158.979014123652"
[1] 0.3032790 0.3549531 0.4264136 0.5193234 0.6992435
[1] 0.3004527 0.3883964 0.4641645 0.5643182 0.6998184
[1] "5. 152.187710752459"
[1] 0.3032790 0.3535992 0.4229568 0.5146976 0.6992435
[1] 0.3004527 0.3879525 0.4633271 0.5642999 0.6998184
[1] "6. 146.465052205189"
[1] 0.3032790 0.3486974 0.4200366 0.5091185 0.6992435
[1] 0.3004527 0.3850724 0.4585096 0.5636016 0.6998184
[1] "7. 137.96206688646"
[1] 0.3032790 0.3361881 0.4134162 0.4930763 0.6992435
[1] 0.3004527 0.3850724 0.4558337 0.5627363 0.6998184
[1] "8. 129.351355397951"
[1] 0.3032790 0.3549531 0.4253551 0.5146976 0.6992435
[1] 0.3004527 0.3869838 0.4633271 0.5636016 0.6998184
[1] "9. 143.846694769013"
[1] 0.3034827 0.4037620 0.4656783 0.5436927 0.6992435
[1] 0.3004527 0.3761439 0.4388579 0.5453598 0.6998184
[1] "10. 153.901258961554"
[1] 0.3034827 0.3690037 0.4455408 0.5280225 0.6992435
[1] 0.3004527 0.3869838 0.4638516 0.5642999 0.6998184
[1] "11. 154.560738040499"
[1] 0.3034827 0.4037620 0.4656783 0.5418823 0.6992435
[1] 0.3004527 0.3822859 0.4598895 0.5621724 0.6998184
[1] "12. 157.869784163944"
[1] 0.3067442 0.4186923 0.4808484 0.5511676 0.6992435
[1] 0.3004527 0.3761439 0.4388579 0.5481379 0.6998184
[1] "13. 151.684304378905"
[1] 0.3067442 0.4182775 0.4723555 0.5454643 0.6992435
[1] 0.3004527 0.3727165 0.4298782 0.5385654 0.6998184
[1] "14. 143.241291052872"
[1] 0.3067442 0.4182309 0.4715161 0.5453707 0.6992435
[1] 0.3004527 0.3727165 0.4273143 0.5363904 0.6998184
[1] "15. 141.747535933535"
[1] 0.3067442 0.4227937 0.4857836 0.5549296 0.6992435
[1] 0.3004527 0.3700596 0.4268459 0.5363904 0.6998184
[1] "16. 138.825795491525"
[1] 0.3067442 0.4182775 0.4675385 0.5422958 0.6992435
[1] 0.3004527 0.3713537 0.4265079 0.5359380 0.6998184
[1] "17. 135.088785457643"
[1] 0.3034827 0.4182775 0.4664185 0.5419156 0.6992435
[1] 0.3004527 0.3713537 0.4261699 0.5336777 0.6998184
[1] "18. 133.149952706315"
[1] 0.3034827 0.4186923 0.4696675 0.5419156 0.6992435
[1] 0.3004527 0.3660779 0.4168969 0.5298693 0.6998184
[1] "19. 128.049850561892"
[1] 0.3034827 0.4065535 0.4586047 0.5399217 0.6992435
[1] 0.3004527 0.3713537 0.4247212 0.5329243 0.6998184
[1] "20. 129.895085679718"
> 
> state_df <- get_state(full_list, probs = c(0.25, 0.5, 0.75))
> 
> state_df$state <- true_states
> 
> theta_df <- get_parameter(full_list)
> 
> 
> save.image()
> save(state_df, file = "state_df.RData")
> save(theta_df, file = "theta_df.RData")
> 
> 
> 
> ggplot(state_df) + aes(x = time, y = state, ymin = lower, ymax = upper) + geom_step() + geom_ribbon(alpha = 0.2, stat = "stepribbon", fill = "red") + geom_step(mapping = aes(x = time, y = med), col = "red") + ggthemes::theme_base() + scale_y_continuous(expand = c(0, 0)) + scale_x_continuous(expand = c(0, 0))
> 
> ggplot(theta_df[which(theta_df$time %% 5 == 0),]) + aes(x = value, weights = weight, col = factor(time)) + geom_density() + facet_wrap(~parameter, scales = "free")
> 
> proc.time()
     user    system   elapsed 
18159.416    62.244  1239.197 
