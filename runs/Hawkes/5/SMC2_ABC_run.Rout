
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> library(parallel)
> library(StateSpaceInference)
> library(ggplot2)
> library(ggalt)
> sessionInfo()
R version 3.5.1 (2018-07-02)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: SUSE Linux Enterprise Server 12 SP2

Matrix products: default
BLAS/LAPACK: /pkg/suse12/software/openblas/0.2.20-gcc-6.4.0-2.28/lib/libopenblas_sandybridgep-r0.2.20.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] parallel  stats     graphics  grDevices utils     datasets  methods  
[8] base     

other attached packages:
[1] ggalt_0.4.0               ggplot2_3.1.0            
[3] StateSpaceInference_0.4.0

loaded via a namespace (and not attached):
 [1] Rcpp_1.0.0         Rttf2pt1_1.3.7     bindr_0.1.1        magrittr_1.5      
 [5] maps_3.3.0         MASS_7.3-51.1      tidyselect_0.2.5   munsell_0.5.0     
 [9] colorspace_1.3-2   R6_2.3.0           rlang_0.3.0.1      plyr_1.8.4        
[13] dplyr_0.7.8        grid_3.5.1         gtable_0.2.0       ash_1.0-15        
[17] KernSmooth_2.23-15 extrafontdb_1.0    withr_2.1.2        proj4_1.0-8       
[21] lazyeval_0.2.1     assertthat_0.2.0   tibble_1.4.2       crayon_1.3.4      
[25] bindrcpp_0.2.2     RColorBrewer_1.1-2 purrr_0.2.5        glue_1.3.0        
[29] compiler_3.5.1     pillar_1.3.0       scales_1.0.0       extrafont_0.17    
[33] pkgconfig_2.0.2   
> 
> #cl <- makeCluster(parallel::detectCores() - 1)
> cl = "mclapply"
> 
> 
> set.seed(3)
> 
> TT <- 60
> true_theta <- c(0.25, 0.5)
> lower <- 0
> upper <- 3.5
> sd_t <- 1
> init <- min(rgamma(1, 100, 100), upper - 1)
> a_logit <- 0.9
> dist_coef <- 0.5
> true_states <- generate_state(init, TT, lower, upper, sd_t, a = a_logit)
> 
> lambda_fun <- stepfun(seq(10, TT*10 - 10, by = 10), y = true_states)
> kern <- function(x){return(decay_func(x, alpha = true_theta[1], delta = true_theta[2]))}
> 
> y_history <- sim_hawkes(lambda_fun, NULL, kern, 0, TT*10, progressBar = FALSE)
> y <- hist(y_history, breaks = seq(0, TT*10, by = 10), plot = FALSE)$counts
> 
> hist(y_history, breaks = TT * 10)
> 
> plot(lambda_fun, add = TRUE, col = "red")
> 
> simulator <- hawkes_simulator
> 
> inp <- list(
+   lower = lower,
+   upper = upper,
+   sd_t = sd_t,
+   a_logit = a_logit,
+   history = y_history,
+   simulator = simulator
+ )
> 
> loss = loss_hawkes
> 
> 
> Ntheta = 4000
> Nx = 500
> pacc = 0.005
> 
> lower_theta <- c(0.1, 0.2)
> upper_theta <- c(0.5, 1)
> 
> trans_args <- list(
+   lower_theta = lower_theta,
+   upper_theta = upper_theta,
+   a = 0.9
+ )
> 
> prior_sample <- data.frame(theta1 = runif(Ntheta, lower_theta[1], upper_theta[1]), theta2 = runif(Ntheta, lower_theta[2], upper_theta[2]))
> 
> prior_sample <- as.matrix(prior_sample, ncol = 2)
> 
> trans <- function(x, trans_args){
+   theta1 <- gtools::logit(x[,1], min = trans_args$lower[1], max = trans_args$upper[1])
+   theta2 <- gtools::logit(x[,2], min = trans_args$lower[2], max = trans_args$upper[2])
+   return(cbind(theta1, theta2))
+ }
> 
> invtrans <- function(x, trans_args){
+   theta1 <- gtools::inv.logit(trans_args$a * x[,1], min = trans_args$lower[1], max = trans_args$upper[1])
+   theta2 <- gtools::inv.logit(trans_args$a * x[,2], min = trans_args$lower[2], max = trans_args$upper[2])
+   return(cbind(theta1, theta2))
+ }
> 
> full_list <- SMC2_ABC(prior_sample, dprior = dHawkes, loss, loss_args = inp, Ntheta = Ntheta, Nx = Nx, pacc = pacc, cl = cl, dt = 10, ESS_threshold = 0.1, TT = TT, trans = trans, invtrans = invtrans, trans_args = trans_args)
[1] "1. 3170.55181881901"
[1] "2. 2390.84352911185"
[1] "3. 2217.33990503602"
[1] "4. 1935.40812744136"
[1] "5. 1643.11534608933"
[1] "6. 1443.1211100259"
[1] "7. 1180.27983401617"
[1] "8. 1040.94803044388"
[1] "9. 850.90272329958"
[1] "10. 720.923311881859"
[1] "11. 760.838856526598"
[1] "12. 677.646365141492"
[1] "13. 646.305217485661"
[1] "14. 512.400909722684"
[1] "15. 403.681101920063"
[1] "16. 326.533962027098"
[1] "resample"
[1] "SMC:  3300.51115302932"
[1] "SMC:  2762.01228020533"
[1] "SMC:  2582.79287146152"
[1] "SMC:  2262.02591067611"
[1] "SMC:  1956.39812552912"
[1] "SMC:  1645.56002036038"
[1] "SMC:  1312.57981596855"
[1] "SMC:  1177.24226422902"
[1] "SMC:  1022.61824541914"
[1] "SMC:  859.324648543754"
[1] "SMC:  822.447666154058"
[1] "SMC:  710.259329688912"
[1] "SMC:  652.173433310968"
[1] "SMC:  609.86456296183"
[1] "SMC:  472.118326974353"
[1] "SMC:  432.671524847433"
acceptance rate:  0.23475 
[1] "17. 3632.44386326504"
[1] "18. 3217.2250695861"
[1] "19. 2901.10429302724"
[1] "20. 2666.84607007594"
[1] "21. 2423.6908618152"
[1] "22. 2104.46115312033"
[1] "23. 1784.12611346664"
[1] "24. 1579.70879906734"
[1] "25. 1195.12903810671"
[1] "26. 983.341915860065"
[1] "27. 909.481964321077"
[1] "28. 731.509034715532"
[1] "29. 673.148617785586"
[1] "30. 455.039119429078"
[1] "31. 155.104089277277"
[1] "resample"
[1] "SMC:  3276.42391280003"
[1] "SMC:  2752.68693945224"
[1] "SMC:  2551.77791400616"
[1] "SMC:  2216.80364457482"
[1] "SMC:  1870.98202159109"
[1] "SMC:  1637.66931154057"
[1] "SMC:  1365.25556171338"
[1] "SMC:  1266.40656420115"
[1] "SMC:  949.368154681568"
[1] "SMC:  700.058667074406"
[1] "SMC:  616.343800509772"
[1] "SMC:  669.578609056217"
[1] "SMC:  499.374646639563"
[1] "SMC:  587.207023460972"
[1] "SMC:  499.447225566942"
[1] "SMC:  474.886874889353"
[1] "SMC:  440.252853090933"
[1] "SMC:  368.000930767323"
[1] "SMC:  344.544834109595"
[1] "SMC:  291.118224605974"
[1] "SMC:  302.753270575336"
[1] "SMC:  240.955331288906"
[1] "SMC:  214.908486482875"
[1] "SMC:  237.792245128365"
[1] "SMC:  249.665805246633"
[1] "SMC:  234.763744834822"
[1] "SMC:  235.061648934426"
[1] "SMC:  297.481086322041"
[1] "SMC:  262.66240078066"
[1] "SMC:  245.376150906425"
[1] "SMC:  141.658266261367"
acceptance rate:  0.05875 
[1] "32. 3071.51634268337"
[1] "33. 2944.21167031444"
[1] "34. 2822.09915697288"
[1] "35. 2708.36491168427"
[1] "36. 2597.10394641455"
[1] "37. 2157.59834451783"
[1] "38. 1442.83523956693"
[1] "39. 1136.71321127899"
[1] "40. 1112.71138148481"
[1] "41. 1065.1706499028"
[1] "42. 908.09416423462"
[1] "43. 883.736832846132"
[1] "44. 821.402343498205"
[1] "45. 603.570644012172"
[1] "46. 474.102119886629"
[1] "47. 480.810495846977"
[1] "48. 445.486591470042"
[1] "49. 398.2938814212"
[1] "resample"
[1] "SMC:  3308.90437923181"
[1] "SMC:  2861.01823711905"
[1] "SMC:  2642.20180529622"
[1] "SMC:  2359.09691812841"
[1] "SMC:  2020.92547595681"
[1] "SMC:  1697.36457568333"
[1] "SMC:  1318.81696656926"
[1] "SMC:  1246.5636244731"
[1] "SMC:  1037.1186557437"
[1] "SMC:  838.841057140912"
[1] "SMC:  889.567874783439"
[1] "SMC:  809.726477277925"
[1] "SMC:  761.251666518019"
[1] "SMC:  741.889951182376"
[1] "SMC:  515.791763936571"
[1] "SMC:  437.420686072165"
[1] "SMC:  342.932156963947"
[1] "SMC:  308.754264647905"
[1] "SMC:  256.423554296144"
[1] "SMC:  249.489676316619"
[1] "SMC:  219.195735467065"
[1] "SMC:  176.025918433961"
[1] "SMC:  134.857329677876"
[1] "SMC:  85.4495975235528"
[1] "SMC:  121.604658207448"
[1] "SMC:  98.3948738069489"
[1] "SMC:  67.6135793767208"
[1] "SMC:  147.136841268745"
[1] "SMC:  109.462987063589"
[1] "SMC:  71.6101806989315"
[1] "SMC:  35.1929835938415"
[1] "SMC:  41.755320520217"
[1] "SMC:  45.921846441984"
[1] "SMC:  45.0492352256858"
[1] "SMC:  59.9988687506801"
[1] "SMC:  65.4084631064607"
[1] "SMC:  56.7978575377421"
[1] "SMC:  38.0033647407101"
[1] "SMC:  50.4207988681734"
[1] "SMC:  53.5708127903462"
[1] "SMC:  51.5514213021213"
[1] "SMC:  43.2257771445285"
[1] "SMC:  46.7303195362753"
[1] "SMC:  44.5645954692067"
[1] "SMC:  41.2691211811867"
[1] "SMC:  29.2031471269326"
[1] "SMC:  22.810562758142"
[1] "SMC:  15.3849048022764"
[1] "SMC:  18.0585543264674"
acceptance rate:  0.02175 
[1] "50. 3482.6594938431"
[1] "51. 3068.82570015817"
[1] "52. 2567.49169477872"
[1] "53. 1971.69888135483"
[1] "54. 1637.46923047558"
[1] "55. 1385.67285693343"
[1] "56. 1034.67300554634"
[1] "57. 900.39729954034"
[1] "58. 830.85037887384"
[1] "59. 802.441599260842"
[1] "60. 745.393185501377"
> 
> state_df <- get_state(full_list)
> 
> state_df$state <- true_states
> 
> theta_df <- get_parameter(full_list)
> 
> 
> save.image()
> save(state_df, file = "state_df.RData")
> save(theta_df, file = "theta_df.RData")
> 
> 
> 
> ggplot(state_df) + aes(x = time, y = state, ymin = lower, ymax = upper) + geom_step() + geom_ribbon(alpha = 0.2, stat = "stepribbon", fill = "red") + geom_step(mapping = aes(x = time, y = med), col = "red") + ggthemes::theme_base() + scale_y_continuous(expand = c(0, 0)) + scale_x_continuous(expand = c(0, 0))
> 
> ggplot(theta_df) + aes(x = value, weights = weight, col = factor(time)) + geom_density() + facet_wrap(~parameter)
> 
> proc.time()
      user     system    elapsed 
573866.462   5301.386  53452.138 
