
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> library(parallel)
> library(StateSpaceInference)
> library(ggplot2)
> library(ggalt)
> sessionInfo()
R version 3.5.1 (2018-07-02)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: SUSE Linux Enterprise Server 12 SP2

Matrix products: default
BLAS/LAPACK: /pkg/suse12/software/openblas/0.2.20-gcc-6.4.0-2.28/lib/libopenblas_sandybridgep-r0.2.20.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] parallel  stats     graphics  grDevices utils     datasets  methods  
[8] base     

other attached packages:
[1] ggalt_0.4.0               ggplot2_3.1.0            
[3] StateSpaceInference_1.2.1

loaded via a namespace (and not attached):
 [1] Rcpp_1.0.0         Rttf2pt1_1.3.7     bindr_0.1.1        magrittr_1.5      
 [5] maps_3.3.0         MASS_7.3-51.1      tidyselect_0.2.5   munsell_0.5.0     
 [9] colorspace_1.3-2   R6_2.3.0           rlang_0.3.0.1      plyr_1.8.4        
[13] dplyr_0.7.8        grid_3.5.1         gtable_0.2.0       ash_1.0-15        
[17] KernSmooth_2.23-15 extrafontdb_1.0    withr_2.1.2        proj4_1.0-8       
[21] lazyeval_0.2.1     assertthat_0.2.0   tibble_1.4.2       crayon_1.3.4      
[25] bindrcpp_0.2.2     RColorBrewer_1.1-2 purrr_0.2.5        glue_1.3.0        
[29] compiler_3.5.1     pillar_1.3.0       scales_1.0.0       extrafont_0.17    
[33] pkgconfig_2.0.2   
> 
> #cl <- makeCluster(parallel::detectCores())
> cl = "mclapply"
> #cl <- NULL
> 
> set.seed(3)
> 
> TT <- 40
> true_theta <- c(0.5, 0.5)
> lower <- 0
> upper <- 3.5
> sd_t <- 1
> init <- min(rgamma(1, 100, 100), upper - 1)
> a_logit <- 0.9
> dist_coef <- 0.5
> true_states <- generate_state(init, TT, lower, upper, sd_t, a = a_logit)
> 
> y <- NULL
> 
> #y <- hawkes_simulator(true_states[1], true_theta, NULL, 0, 10)
> for(tp in 1:TT){
+   y <- hawkes_simulator(true_states[tp], true_theta, y$history, tp * 10 - 10, tp * 10)
+ }
> 
> y_history <- y$history
> 
> lambda_fun <- stepfun(seq(10, TT*10 - 10, by = 10), y = true_states)
> kern <- function(x){return(decay_func(x, alpha = true_theta[1], delta = true_theta[2]))}
> #
> #y_history <- sim_hawkes(lambda_fun, NULL, kern, 0, TT*10, progressBar = FALSE)
> #y <- hist(y_history, breaks = seq(0, TT*10, by = 10), plot = FALSE)$counts
> 
> hist(y_history, breaks = TT * 10)
> 
> plot(lambda_fun, add = TRUE, col = "red")
> 
> simulator <- hawkes_simulator
> 
> inp <- list(
+   lower = lower,
+   upper = upper,
+   sd_t = sd_t,
+   a_logit = a_logit,
+   history = y_history,
+   simulator = simulator
+ )
> 
> loss = loss_hawkes
> 
> 
> Ntheta = 200
> Nx = 1000
> pacc = 0.1
> 
> lower_theta <- c(0.3, 0.4)
> upper_theta <- c(0.7, 0.6)
> 
> prior_sample <- data.frame(theta1 = runif(Ntheta, lower_theta[1], upper_theta[1]), theta2 = runif(Ntheta, lower_theta[2], upper_theta[2]))
> 
> prior_sample <- as.matrix(prior_sample, ncol = 2)
> 
> trans <- function(x, trans_args){
+   theta1 <- log(x[,1])
+   theta2 <- log(x[,2])
+   return(cbind(theta1, theta2))
+ }
> 
> invtrans <- function(x, trans_args){
+   theta1 <- exp(x[,1])
+   theta2 <- exp(x[,2])
+   return(cbind(theta1, theta2))
+ }
> 
> full_list <- SMC2_ABC(prior_sample, dprior = dHawkes, loss, loss_args = inp, Ntheta = Ntheta, Nx = Nx, pacc = pacc, cl = cl, dt = 10, ESS_threshold = 0.5, TT = TT, trans = trans, invtrans = invtrans, cov_coef = 0.25^2)
[1] 0.3002906 0.3725809 0.4798691 0.5596599 0.6982322
[1] 0.4023733 0.4466898 0.4964101 0.5434473 0.5977228
[1] "1. 184.628423988031"
[1] 0.3002906 0.3568802 0.4460941 0.5371446 0.6982322
[1] 0.4023733 0.4466898 0.4964101 0.5433800 0.5977228
[1] "2. 164.959425995182"
[1] 0.3002906 0.3537833 0.4381908 0.5168888 0.6982322
[1] 0.4023733 0.4465075 0.4957314 0.5424886 0.5977228
[1] "3. 155.796407001186"
[1] 0.3002906 0.3531863 0.4365074 0.5130682 0.6982322
[1] 0.4023733 0.4458146 0.4957314 0.5414875 0.5977228
[1] "4. 150.101268186135"
[1] 0.3002906 0.3530772 0.4285804 0.5096770 0.6982322
[1] 0.4023733 0.4458146 0.4957314 0.5384408 0.5977228
[1] "5. 143.723581435655"
[1] 0.3002906 0.3504491 0.4133178 0.5030531 0.6982322
[1] 0.4023733 0.4464551 0.4957314 0.5373876 0.5977228
[1] "6. 131.401624965835"
[1] 0.3002906 0.3504491 0.4133178 0.5020806 0.6982322
[1] 0.4023733 0.4448844 0.4957314 0.5357357 0.5977228
[1] "7. 128.518650230276"
[1] 0.3002906 0.3531863 0.4382752 0.5136618 0.6982322
[1] 0.4023733 0.4466898 0.4961331 0.5424886 0.5977228
[1] "8. 149.552373360601"
[1] 0.3002906 0.4057305 0.4872997 0.5554018 0.6982322
[1] 0.4023733 0.4464551 0.4956261 0.5427192 0.5977228
[1] "9. 169.000236510737"
[1] 0.3002906 0.3655346 0.4636062 0.5371446 0.6982322
[1] 0.4023733 0.4466898 0.4964101 0.5427192 0.5977228
[1] "10. 157.714210366816"
[1] 0.3002906 0.3842073 0.4822780 0.5477000 0.6982322
[1] 0.4023733 0.4467272 0.4974405 0.5433800 0.5977228
[1] "11. 162.502577179319"
[1] 0.3002906 0.4115018 0.4983938 0.5634196 0.6982322
[1] 0.4023733 0.4466898 0.4974405 0.5434473 0.5977228
[1] "12. 165.131072419305"
[1] 0.3002906 0.4042954 0.4887562 0.5548750 0.6982322
[1] 0.4023733 0.4465075 0.4964101 0.5433800 0.5977228
[1] "13. 160.77477910521"
[1] 0.3002906 0.4042954 0.4887562 0.5548750 0.6982322
[1] 0.4023733 0.4465075 0.4964101 0.5431754 0.5977228
[1] "14. 158.92964098164"
[1] 0.3002906 0.4285804 0.5062424 0.5701068 0.6982322
[1] 0.4023733 0.4465075 0.4964101 0.5431754 0.5977228
[1] "15. 157.170563102449"
[1] 0.3002906 0.4112686 0.4999000 0.5606347 0.6982322
[1] 0.4023733 0.4464551 0.4961331 0.5427192 0.5977228
[1] "16. 152.039672572976"
[1] 0.3002906 0.4115018 0.5008612 0.5596599 0.6982322
[1] 0.4023733 0.4465075 0.4964101 0.5431754 0.5977228
[1] "17. 150.844911970627"
[1] 0.3002906 0.4094747 0.4965135 0.5554018 0.6982322
[1] 0.4023733 0.4464551 0.4956261 0.5424886 0.5977228
[1] "18. 148.505040636892"
[1] 0.3002906 0.3899926 0.4875871 0.5474742 0.6982322
[1] 0.4023733 0.4465075 0.4961331 0.5427192 0.5977228
[1] "19. 143.247366168448"
[1] 0.3002906 0.3884264 0.4837660 0.5464319 0.6982322
[1] 0.4023733 0.4465075 0.4961331 0.5424886 0.5977228
[1] "20. 139.830364502649"
[1] 0.3002906 0.3725809 0.4798691 0.5348457 0.6982322
[1] 0.4023733 0.4465075 0.4961331 0.5427192 0.5977228
[1] "21. 135.748777310258"
[1] 0.3002906 0.3703828 0.4654969 0.5298289 0.6982322
[1] 0.4023733 0.4464551 0.4956261 0.5417536 0.5977228
[1] "22. 126.505734698832"
[1] 0.3002906 0.3663803 0.4636062 0.5168888 0.6982322
[1] 0.4023733 0.4464551 0.4956261 0.5414875 0.5977228
[1] "23. 125.143253788375"
[1] 0.3002906 0.3703828 0.4654969 0.5231742 0.6982322
[1] 0.4023733 0.4465075 0.4957314 0.5417536 0.5977228
[1] "24. 126.575267197079"
[1] 0.3002906 0.3620145 0.4576373 0.5130682 0.6982322
[1] 0.4023733 0.4465075 0.4957314 0.5417536 0.5977228
[1] "25. 120.657382775323"
[1] 0.3002906 0.3571747 0.4460941 0.5096879 0.6982322
[1] 0.4023733 0.4465075 0.4957314 0.5417536 0.5977228
[1] "26. 117.552139168588"
[1] 0.3002906 0.3531863 0.4381908 0.5064727 0.6982322
[1] 0.4023733 0.4466898 0.4957314 0.5417536 0.5977228
[1] "27. 110.873393609598"
[1] 0.3002906 0.4186139 0.4999000 0.5536069 0.6982322
[1] 0.4023733 0.4464551 0.4956261 0.5427192 0.5977228
[1] "28. 125.773987445218"
[1] 0.3002906 0.4186139 0.4944388 0.5464319 0.6982322
[1] 0.4023733 0.4464551 0.4956261 0.5424886 0.5977228
[1] "29. 115.889150300541"
[1] 0.3002906 0.4887562 0.5231742 0.5790721 0.6982322
[1] 0.4023733 0.4458146 0.4935527 0.5427192 0.5977228
[1] "30. 93.8727321229126"
[1] "resample"
[1] 0.3348757 0.4679696 0.5072791 0.5567543 0.7252474
[1] 0.3898170 0.4485780 0.4862554 0.5368735 0.6314170
[1] "SMC:  191.161235840807"
[1] 0.3348757 0.4611899 0.4998345 0.5450533 0.7252474
[1] 0.3898170 0.4489196 0.4875020 0.5368735 0.6314170
[1] "SMC:  179.358117154852"
[1] 0.3348757 0.4593045 0.4981341 0.5417089 0.7252474
[1] 0.3898170 0.4489196 0.4840695 0.5335412 0.6314170
[1] "SMC:  173.562743845934"
[1] 0.3348757 0.4593045 0.4981341 0.5417089 0.7252474
[1] 0.3898170 0.4485780 0.4840695 0.5335412 0.6314170
[1] "SMC:  171.269325683251"
[1] 0.3348757 0.4520304 0.4980440 0.5378269 0.7252474
[1] 0.3898170 0.4489196 0.4862554 0.5335412 0.6314170
[1] "SMC:  165.363918693195"
[1] 0.3348757 0.4475771 0.4946333 0.5316239 0.7252474
[1] 0.3898170 0.4491258 0.4875020 0.5335412 0.6314170
[1] "SMC:  156.821657085539"
[1] 0.3348757 0.4464727 0.4946333 0.5342556 0.7252474
[1] 0.3898170 0.4485780 0.4862554 0.5303027 0.6314170
[1] "SMC:  153.224551825916"
[1] 0.3348757 0.4593045 0.4984808 0.5417089 0.7252474
[1] 0.3898170 0.4489196 0.4875020 0.5335412 0.6314170
[1] "SMC:  163.954323855582"
[1] 0.3348757 0.4725764 0.5072791 0.5483245 0.7252474
[1] 0.3898170 0.4471889 0.4819965 0.5297953 0.6314170
[1] "SMC:  171.918115044298"
[1] 0.3348757 0.4617866 0.4986551 0.5407844 0.7252474
[1] 0.3898170 0.4489196 0.4862554 0.5309446 0.6314170
[1] "SMC:  163.236498712401"
[1] 0.3348757 0.4657027 0.5044568 0.5450533 0.7252474
[1] 0.3898170 0.4472591 0.4823910 0.5305089 0.6314170
[1] "SMC:  165.243958632581"
[1] 0.3348757 0.4733340 0.5086051 0.5566689 0.7252474
[1] 0.3898170 0.4465053 0.4818110 0.5276712 0.6314170
[1] "SMC:  167.693694243403"
[1] 0.3348757 0.4725764 0.5072791 0.5483245 0.7252474
[1] 0.3898170 0.4465053 0.4803542 0.5234812 0.6314170
[1] "SMC:  163.171574450078"
[1] 0.3348757 0.4725764 0.5068372 0.5489203 0.7252474
[1] 0.3898170 0.4444043 0.4772543 0.5234812 0.6314170
[1] "SMC:  162.042157679642"
[1] 0.3348757 0.4760129 0.5114766 0.5567543 0.7252474
[1] 0.3898170 0.4443167 0.4733701 0.5234812 0.6314170
[1] "SMC:  164.952587271724"
[1] 0.3348757 0.4739240 0.5074628 0.5495155 0.7252474
[1] 0.3898170 0.4443167 0.4733701 0.5229731 0.6314170
[1] "SMC:  159.898016719789"
[1] 0.3348757 0.4739240 0.5072791 0.5489203 0.7252474
[1] 0.3898170 0.4444043 0.4733701 0.5229731 0.6314170
[1] "SMC:  156.194820482307"
[1] 0.3348757 0.4726173 0.5068372 0.5483245 0.7252474
[1] 0.3898170 0.4443167 0.4709648 0.5196441 0.6314170
[1] "SMC:  153.624426856894"
[1] 0.3348757 0.4679696 0.5039487 0.5450533 0.7252474
[1] 0.3898170 0.4443167 0.4733701 0.5196441 0.6314170
[1] "SMC:  149.361921707953"
[1] 0.3348757 0.4657027 0.5039487 0.5441220 0.7252474
[1] 0.3898170 0.4443167 0.4733701 0.5196441 0.6314170
[1] "SMC:  145.417489682488"
[1] 0.3348757 0.4657027 0.5005327 0.5407844 0.7252474
[1] 0.3898170 0.4444043 0.4772543 0.5193056 0.6314170
[1] "SMC:  141.146437243381"
[1] 0.3348757 0.4656750 0.4986551 0.5368192 0.7252474
[1] 0.3898170 0.4443167 0.4733701 0.5173759 0.6314170
[1] "SMC:  138.377758062872"
[1] 0.3348757 0.4657027 0.4986551 0.5403503 0.7252474
[1] 0.3898170 0.4443167 0.4722448 0.5173759 0.6314170
[1] "SMC:  136.977425100295"
[1] 0.3348757 0.4657027 0.4986551 0.5368192 0.7252474
[1] 0.3898170 0.4443167 0.4709648 0.5173759 0.6314170
[1] "SMC:  137.705158319107"
[1] 0.3348757 0.4617866 0.4984808 0.5344326 0.7252474
[1] 0.3898170 0.4444043 0.4772543 0.5193056 0.6314170
[1] "SMC:  138.221744267729"
[1] 0.3348757 0.4611899 0.4981161 0.5338359 0.7252474
[1] 0.3898170 0.4444043 0.4803542 0.5193056 0.6314170
[1] "SMC:  135.914543796201"
[1] 0.3348757 0.4494179 0.4935565 0.5261648 0.7252474
[1] 0.3898170 0.4468184 0.4862554 0.5229731 0.6314170
[1] "SMC:  125.663012058527"
[1] 0.3348757 0.4754068 0.5072791 0.5483245 0.7252474
[1] 0.3898170 0.4443167 0.4737560 0.5229731 0.6314170
[1] "SMC:  143.86386504942"
[1] 0.3348757 0.4725764 0.5012657 0.5407844 0.7252474
[1] 0.3898170 0.4444043 0.4733701 0.5229731 0.6314170
[1] "SMC:  137.209387270235"
[1] 0.3348757 0.4905806 0.5189022 0.5626558 0.7252474
[1] 0.3898170 0.4414249 0.4699686 0.5196441 0.6314170
[1] "SMC:  134.522014348847"
acceptance rate:  0.785 
[1] 0.4052703 0.4920503 0.5220851 0.5646646 0.6953158
[1] 0.3898170 0.4448844 0.4737560 0.5229731 0.6065135
[1] "31. 196.689905579011"
[1] 0.4052703 0.4998345 0.5305554 0.5695886 0.6953158
[1] 0.3898170 0.4444043 0.4704079 0.5196441 0.6065135
[1] "32. 186.432178459071"
[1] 0.4052703 0.5017836 0.5342556 0.5709019 0.6953158
[1] 0.3898170 0.4458940 0.4704079 0.5229731 0.6065135
[1] "33. 174.173174292399"
[1] 0.4052703 0.4998345 0.5305554 0.5695886 0.6953158
[1] 0.3898170 0.4448844 0.4704079 0.5196441 0.6065135
[1] "34. 175.45713652036"
[1] 0.4052703 0.5017836 0.5338359 0.5709019 0.6953158
[1] 0.3898170 0.4444043 0.4704079 0.5196441 0.6065135
[1] "35. 170.533851912914"
[1] 0.4052703 0.4998345 0.5305554 0.5695886 0.6953158
[1] 0.3898170 0.4444043 0.4704079 0.5196441 0.6065135
[1] "36. 171.742456442256"
[1] 0.4052703 0.5058524 0.5342556 0.5709019 0.6953158
[1] 0.3898170 0.4448844 0.4704079 0.5229731 0.6065135
[1] "37. 165.204166654678"
[1] 0.4052703 0.5122852 0.5589224 0.5880652 0.6953158
[1] 0.3898170 0.4409968 0.4631387 0.5170449 0.6065135
[1] "38. 134.897929085593"
[1] 0.4052703 0.5122852 0.5589224 0.5880652 0.6953158
[1] 0.3898170 0.4409968 0.4631387 0.5148146 0.6065135
[1] "39. 131.776272498362"
[1] 0.4052703 0.5122852 0.5589224 0.5880652 0.6953158
[1] 0.3898170 0.4400903 0.4630464 0.5136616 0.6065135
[1] "40. 134.431158944054"
There were 50 or more warnings (use warnings() to see the first 50)
> 
> state_df <- get_state(full_list, probs = c(0.25, 0.5, 0.75))
> 
> state_df$state <- true_states
> 
> theta_df <- get_parameter(full_list)
> 
> 
> save.image()	
> save(state_df, file = "state_df.RData")	
> save(theta_df, file = "theta_df.RData")
> 
> 
> 
> ggplot(state_df) + aes(x = time, y = state, ymin = lower, ymax = upper) + geom_step() + geom_ribbon(alpha = 0.2, stat = "stepribbon", fill = "red") + geom_step(mapping = aes(x = time, y = med), col = "red") + ggthemes::theme_base() + scale_y_continuous(expand = c(0, 0)) + scale_x_continuous(expand = c(0, 0))
> 
> ggplot(theta_df[which(theta_df$time %% 5 == 0),]) + aes(x = value, weights = weight, col = factor(time)) + geom_density() + facet_wrap(~parameter, scales = "free")
> 
> proc.time()
     user    system   elapsed 
15522.307   297.042  3927.844 
