
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> library(parallel)
> library(StateSpaceInference)
> library(ggplot2)
> library(ggalt)
> sessionInfo()
R version 3.5.1 (2018-07-02)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: SUSE Linux Enterprise Server 12 SP2

Matrix products: default
BLAS/LAPACK: /pkg/suse12/software/openblas/0.2.20-gcc-6.4.0-2.28/lib/libopenblas_sandybridgep-r0.2.20.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] parallel  stats     graphics  grDevices utils     datasets  methods  
[8] base     

other attached packages:
[1] ggalt_0.4.0               ggplot2_3.1.0            
[3] StateSpaceInference_0.4.2

loaded via a namespace (and not attached):
 [1] Rcpp_1.0.0         Rttf2pt1_1.3.7     bindr_0.1.1        magrittr_1.5      
 [5] maps_3.3.0         MASS_7.3-51.1      tidyselect_0.2.5   munsell_0.5.0     
 [9] colorspace_1.3-2   R6_2.3.0           rlang_0.3.0.1      plyr_1.8.4        
[13] dplyr_0.7.8        grid_3.5.1         gtable_0.2.0       ash_1.0-15        
[17] KernSmooth_2.23-15 extrafontdb_1.0    withr_2.1.2        proj4_1.0-8       
[21] lazyeval_0.2.1     assertthat_0.2.0   tibble_1.4.2       crayon_1.3.4      
[25] bindrcpp_0.2.2     RColorBrewer_1.1-2 purrr_0.2.5        glue_1.3.0        
[29] compiler_3.5.1     pillar_1.3.0       scales_1.0.0       extrafont_0.17    
[33] pkgconfig_2.0.2   
> 
> #cl <- makeCluster(parallel::detectCores())
> cl = "mclapply"
> #cl <- NULL
> 
> set.seed(3)
> 
> TT <- 40
> true_theta <- c(0.25, 0.5)
> lower <- 0
> upper <- 3.5
> sd_t <- 1
> init <- min(rgamma(1, 100, 100), upper - 1)
> a_logit <- 0.9
> dist_coef <- 0.5
> true_states <- generate_state(init, TT, lower, upper, sd_t, a = a_logit)
> 
> y <- hawkes_simulator(true_states[1], true_theta, NULL, 0, 10)
> for(tp in 1:TT){
+   y <- hawkes_simulator(true_states[tp], true_theta, y$history, tp * 10, tp * 10 + 10)
+ }
> 
> y_history <- y$history
> 
> lambda_fun <- stepfun(seq(10, TT*10 - 10, by = 10), y = true_states)
> kern <- function(x){return(decay_func(x, alpha = true_theta[1], delta = true_theta[2]))}
> #
> #y_history <- sim_hawkes(lambda_fun, NULL, kern, 0, TT*10, progressBar = FALSE)
> #y <- hist(y_history, breaks = seq(0, TT*10, by = 10), plot = FALSE)$counts
> 
> hist(y_history, breaks = TT * 10)
> 
> plot(lambda_fun, add = TRUE, col = "red")
> 
> simulator <- hawkes_simulator
> 
> inp <- list(
+   lower = lower,
+   upper = upper,
+   sd_t = sd_t,
+   a_logit = a_logit,
+   history = y_history,
+   simulator = simulator
+ )
> 
> loss = loss_hawkes
> 
> 
> Ntheta = 200
> Nx = 1000
> pacc = 0.05
> 
> lower_theta <- c(0.1, 0.2)
> upper_theta <- c(0.5, 0.8)
> 
> trans_args <- list(
+   lower_theta = lower_theta,
+   upper_theta = upper_theta,
+   a = 1
+ )
> 
> prior_sample <- data.frame(theta1 = runif(Ntheta, lower_theta[1], upper_theta[1]), theta2 = runif(Ntheta, lower_theta[2], upper_theta[2]))
> 
> prior_sample <- as.matrix(prior_sample, ncol = 2)
> 
> trans <- function(x, trans_args){
+   theta1 <- gtools::logit(x[,1], min = trans_args$lower[1], max = trans_args$upper[1])
+   theta2 <- gtools::logit(x[,2], min = trans_args$lower[2], max = trans_args$upper[2])
+   return(cbind(theta1, theta2))
+ }
> 
> invtrans <- function(x, trans_args){
+   theta1 <- gtools::inv.logit(trans_args$a * x[,1], min = trans_args$lower[1], max = trans_args$upper[1])
+   theta2 <- gtools::inv.logit(trans_args$a * x[,2], min = trans_args$lower[2], max = trans_args$upper[2])
+   return(cbind(theta1, theta2))
+ }
> 
> full_list <- SMC2_ABC(prior_sample, dprior = dHawkes, loss, loss_args = inp, Ntheta = Ntheta, Nx = Nx, pacc = pacc, cl = cl, dt = 10, ESS_threshold = 0.2, TT = TT, trans = trans, invtrans = invtrans, trans_args = trans_args)
[1] "1. 176.000563201802"
[1] "2. 153.874426126756"
[1] "3. 138.866398566532"
[1] "4. 135.332391593243"
[1] "5. 122.632124451902"
[1] "6. 108.298999865635"
[1] "7. 98.4197698285403"
[1] "8. 92.1622751230506"
[1] "9. 106.552339323957"
[1] "10. 91.8875433342703"
[1] "11. 85.4699242148901"
[1] "12. 96.7314438883715"
[1] "13. 103.77448974454"
[1] "14. 98.7661755159628"
[1] "15. 100.371879128409"
[1] "16. 90.4866442253473"
[1] "17. 84.204648128899"
[1] "18. 80.6696257001658"
[1] "19. 81.0142954997838"
[1] "20. 77.2625494416358"
[1] "21. 65.5261904432286"
[1] "22. 54.1846081893596"
[1] "23. 60.8463103682227"
[1] "24. 62.8378060692307"
[1] "25. 66.7168760799824"
[1] "26. 61.6274744723697"
[1] "27. 56.2013101052292"
[1] "28. 55.8225412310258"
[1] "29. 43.8394716439779"
[1] "30. 30.6883164693681"
[1] "resample"
[1] "SMC:  181.639482615736"
[1] "SMC:  165.40808325782"
[1] "SMC:  150.989738082661"
[1] "SMC:  149.756132808058"
[1] "SMC:  144.914523179463"
[1] "SMC:  134.574422943892"
[1] "SMC:  126.414933593976"
[1] "SMC:  118.410706028528"
[1] "SMC:  122.963524034146"
[1] "SMC:  109.704617974389"
[1] "SMC:  102.063850158736"
[1] "SMC:  105.290709117275"
[1] "SMC:  112.262600782147"
[1] "SMC:  106.614248511818"
[1] "SMC:  102.140484504951"
[1] "SMC:  95.2978349488308"
[1] "SMC:  96.8223918078744"
[1] "SMC:  89.2316539513831"
[1] "SMC:  88.2222490110319"
[1] "SMC:  86.2959413573219"
[1] "SMC:  85.0036644468514"
[1] "SMC:  79.9264672266138"
[1] "SMC:  87.936114451518"
[1] "SMC:  83.1086887737213"
[1] "SMC:  80.7915686532435"
[1] "SMC:  77.5925421922181"
[1] "SMC:  67.826561257426"
[1] "SMC:  74.6897107563323"
[1] "SMC:  66.218564883786"
[1] "SMC:  58.1529716425379"
acceptance rate:  0.28 
[1] "31. 186.858607828628"
[1] "32. 150.077187942476"
[1] "33. 89.8118192117346"
[1] "34. 82.1610898284196"
[1] "35. 84.328971170882"
[1] "36. 62.909714149958"
[1] "37. 51.5450877999254"
[1] "38. 30.4771347818306"
[1] "resample"
[1] "SMC:  178.39352977176"
[1] "SMC:  152.265034687382"
[1] "SMC:  136.321701363601"
[1] "SMC:  136.570707486829"
[1] "SMC:  126.084239160123"
[1] "SMC:  115.267377676038"
[1] "SMC:  105.323320107906"
[1] "SMC:  101.009398849929"
[1] "SMC:  102.583982116487"
[1] "SMC:  86.7870003902745"
[1] "SMC:  75.8017870312167"
[1] "SMC:  92.3643749456014"
[1] "SMC:  109.825002695451"
[1] "SMC:  100.365769121586"
[1] "SMC:  100.892949966539"
[1] "SMC:  95.052939477123"
[1] "SMC:  86.4130508394019"
[1] "SMC:  80.9802906591781"
[1] "SMC:  78.4898841852102"
[1] "SMC:  69.5449310817043"
[1] "SMC:  61.3371829405521"
[1] "SMC:  56.8663418199056"
[1] "SMC:  70.5702240698246"
[1] "SMC:  68.1324993696786"
[1] "SMC:  64.7554427513321"
[1] "SMC:  59.588900991959"
[1] "SMC:  48.976687900355"
[1] "SMC:  57.8604723451145"
[1] "SMC:  65.3489970024529"
[1] "SMC:  57.4550557751092"
[1] "SMC:  45.1319652744857"
[1] "SMC:  59.3240601635349"
[1] "SMC:  42.9272050869714"
[1] "SMC:  40.4332344132581"
[1] "SMC:  37.9462992910118"
[1] "SMC:  37.2998337059165"
[1] "SMC:  28.1977520518361"
[1] "SMC:  19.6326578041722"
acceptance rate:  0.34 
[1] "39. 182.18785754367"
[1] "40. 171.949912934161"
> 
> state_df <- get_state(full_list, probs = c(0.25, 0.5, 0.75))
> 
> state_df$state <- true_states
> 
> theta_df <- get_parameter(full_list)
> 
> 
> save.image()
> save(state_df, file = "state_df.RData")
> save(theta_df, file = "theta_df.RData")
> 
> 
> 
> ggplot(state_df) + aes(x = time, y = state, ymin = lower, ymax = upper) + geom_step() + geom_ribbon(alpha = 0.2, stat = "stepribbon", fill = "red") + geom_step(mapping = aes(x = time, y = med), col = "red") + ggthemes::theme_base() + scale_y_continuous(expand = c(0, 0)) + scale_x_continuous(expand = c(0, 0))
> 
> ggplot(theta_df[which(theta_df$time %% 5 == 0),]) + aes(x = value, weights = weight, col = factor(time)) + geom_density() + facet_wrap(~parameter, scales = "free")
> 
> proc.time()
     user    system   elapsed 
27248.536   289.932  2809.758 
