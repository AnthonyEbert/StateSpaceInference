
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> library(parallel)
> library(StateSpaceInference)
> library(ggplot2)
> library(ggalt)
> sessionInfo()
R version 3.5.1 (2018-07-02)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: SUSE Linux Enterprise Server 12 SP2

Matrix products: default
BLAS/LAPACK: /pkg/suse12/software/openblas/0.2.20-gcc-6.4.0-2.28/lib/libopenblas_sandybridgep-r0.2.20.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] parallel  stats     graphics  grDevices utils     datasets  methods  
[8] base     

other attached packages:
[1] ggalt_0.4.0               ggplot2_3.1.0            
[3] StateSpaceInference_0.4.2

loaded via a namespace (and not attached):
 [1] Rcpp_1.0.0         Rttf2pt1_1.3.7     bindr_0.1.1        magrittr_1.5      
 [5] maps_3.3.0         MASS_7.3-51.1      tidyselect_0.2.5   munsell_0.5.0     
 [9] colorspace_1.3-2   R6_2.3.0           rlang_0.3.0.1      plyr_1.8.4        
[13] dplyr_0.7.8        grid_3.5.1         gtable_0.2.0       ash_1.0-15        
[17] KernSmooth_2.23-15 extrafontdb_1.0    withr_2.1.2        proj4_1.0-8       
[21] lazyeval_0.2.1     assertthat_0.2.0   tibble_1.4.2       crayon_1.3.4      
[25] bindrcpp_0.2.2     RColorBrewer_1.1-2 purrr_0.2.5        glue_1.3.0        
[29] compiler_3.5.1     pillar_1.3.0       scales_1.0.0       extrafont_0.17    
[33] pkgconfig_2.0.2   
> 
> #cl <- makeCluster(parallel::detectCores())
> cl = "mclapply"
> #cl <- NULL
> 
> set.seed(3)
> 
> TT <- 40
> true_theta <- c(0.25, 0.5)
> lower <- 0
> upper <- 3.5
> sd_t <- 1
> init <- min(rgamma(1, 100, 100), upper - 1)
> a_logit <- 0.9
> dist_coef <- 0.5
> true_states <- generate_state(init, TT, lower, upper, sd_t, a = a_logit)
> 
> y <- hawkes_simulator(true_states[1], true_theta, NULL, 0, 10)
> for(tp in 1:TT){
+   y <- hawkes_simulator(true_states[tp], true_theta, y$history, tp * 10, tp * 10 + 10)
+ }
> 
> y_history <- y$history
> 
> lambda_fun <- stepfun(seq(10, TT*10 - 10, by = 10), y = true_states)
> kern <- function(x){return(decay_func(x, alpha = true_theta[1], delta = true_theta[2]))}
> #
> #y_history <- sim_hawkes(lambda_fun, NULL, kern, 0, TT*10, progressBar = FALSE)
> #y <- hist(y_history, breaks = seq(0, TT*10, by = 10), plot = FALSE)$counts
> 
> hist(y_history, breaks = TT * 10)
> 
> plot(lambda_fun, add = TRUE, col = "red")
> 
> simulator <- hawkes_simulator
> 
> inp <- list(
+   lower = lower,
+   upper = upper,
+   sd_t = sd_t,
+   a_logit = a_logit,
+   history = y_history,
+   simulator = simulator
+ )
> 
> loss = loss_hawkes
> 
> 
> Ntheta = 200
> Nx = 1000
> pacc = 0.1
> 
> lower_theta <- c(0.1, 0.2)
> upper_theta <- c(0.5, 0.8)
> 
> trans_args <- list(
+   lower_theta = lower_theta,
+   upper_theta = upper_theta,
+   a = 1
+ )
> 
> prior_sample <- data.frame(theta1 = runif(Ntheta, lower_theta[1], upper_theta[1]), theta2 = runif(Ntheta, lower_theta[2], upper_theta[2]))
> 
> prior_sample <- as.matrix(prior_sample, ncol = 2)
> 
> trans <- function(x, trans_args){
+   theta1 <- gtools::logit(x[,1], min = trans_args$lower[1], max = trans_args$upper[1])
+   theta2 <- gtools::logit(x[,2], min = trans_args$lower[2], max = trans_args$upper[2])
+   return(cbind(theta1, theta2))
+ }
> 
> invtrans <- function(x, trans_args){
+   theta1 <- gtools::inv.logit(trans_args$a * x[,1], min = trans_args$lower[1], max = trans_args$upper[1])
+   theta2 <- gtools::inv.logit(trans_args$a * x[,2], min = trans_args$lower[2], max = trans_args$upper[2])
+   return(cbind(theta1, theta2))
+ }
> 
> full_list <- SMC2_ABC(prior_sample, dprior = dHawkes, loss, loss_args = inp, Ntheta = Ntheta, Nx = Nx, pacc = pacc, cl = cl, dt = 10, ESS_threshold = 0.2, TT = TT, trans = trans, invtrans = invtrans, trans_args = trans_args)
[1] "1. 169.860035330887"
[1] "2. 150.129446361564"
[1] "3. 139.200434201965"
[1] "4. 139.679484686158"
[1] "5. 128.651969200052"
[1] "6. 115.643589821161"
[1] "7. 107.629648536727"
[1] "8. 95.9990186158211"
[1] "9. 116.977092182961"
[1] "10. 104.943291561095"
[1] "11. 90.2248650787995"
[1] "12. 101.555067496825"
[1] "13. 123.950975640902"
[1] "14. 117.484757639661"
[1] "15. 118.815757520357"
[1] "16. 116.090139439389"
[1] "17. 110.848527713712"
[1] "18. 108.506492889108"
[1] "19. 103.335095135947"
[1] "20. 97.9352959273217"
[1] "21. 91.9349710116155"
[1] "22. 82.4720002548776"
[1] "23. 90.6564895092367"
[1] "24. 83.7610934022148"
[1] "25. 77.4904490200937"
[1] "26. 75.8373192136067"
[1] "27. 70.2304078369979"
[1] "28. 79.072794519669"
[1] "29. 66.7389512625393"
[1] "30. 49.1870378187061"
[1] "31. 35.8537322831408"
[1] "resample"
[1] "SMC:  178.229250765699"
[1] "SMC:  161.823089612434"
[1] "SMC:  151.728790221875"
[1] "SMC:  151.462171104638"
[1] "SMC:  145.98619798636"
[1] "SMC:  137.559199910276"
[1] "SMC:  130.476234431651"
[1] "SMC:  122.921359539488"
[1] "SMC:  133.635177846935"
[1] "SMC:  120.068002306823"
[1] "SMC:  117.449862029519"
[1] "SMC:  120.970279793548"
[1] "SMC:  125.390303598895"
[1] "SMC:  121.764729944727"
[1] "SMC:  119.159977182333"
[1] "SMC:  112.434535148058"
[1] "SMC:  106.016949053293"
[1] "SMC:  101.871292425317"
[1] "SMC:  98.8069853746757"
[1] "SMC:  93.0928194141267"
[1] "SMC:  85.3663042382206"
[1] "SMC:  77.7580124954872"
[1] "SMC:  84.3941450298311"
[1] "SMC:  77.574242596143"
[1] "SMC:  80.2454320304093"
[1] "SMC:  77.2164971703336"
[1] "SMC:  73.4754543073421"
[1] "SMC:  85.6586226511197"
[1] "SMC:  76.2779865602253"
[1] "SMC:  65.4927152395936"
[1] "SMC:  55.8015661501228"
acceptance rate:  0.39 
[1] "32. 168.079373803485"
[1] "33. 118.41575789034"
[1] "34. 72.9212883534457"
[1] "35. 95.6804288878306"
[1] "36. 71.2281409521641"
[1] "37. 62.7007000411395"
[1] "38. 30.8436937821342"
[1] "resample"
[1] "SMC:  170.104476571494"
[1] "SMC:  146.328817238325"
[1] "SMC:  133.37239590347"
[1] "SMC:  133.307737500832"
[1] "SMC:  122.565676489883"
[1] "SMC:  110.405734508654"
[1] "SMC:  101.359862641822"
[1] "SMC:  91.2440286549888"
[1] "SMC:  106.16546992579"
[1] "SMC:  91.9079890913545"
[1] "SMC:  78.9762735310729"
[1] "SMC:  92.1519678121308"
[1] "SMC:  121.356919821758"
[1] "SMC:  111.688115521761"
[1] "SMC:  115.491653303052"
[1] "SMC:  108.350479007849"
[1] "SMC:  98.5826959503494"
[1] "SMC:  92.9949065507046"
[1] "SMC:  84.5365450322081"
[1] "SMC:  76.1797800899363"
[1] "SMC:  65.1359863942302"
[1] "SMC:  59.0076745724159"
[1] "SMC:  76.8898153185388"
[1] "SMC:  78.5315527158055"
[1] "SMC:  71.9123959880995"
[1] "SMC:  73.0848157985736"
[1] "SMC:  66.0873026665009"
[1] "SMC:  79.6636498835382"
[1] "SMC:  60.0996191042342"
[1] "SMC:  47.6798274695348"
[1] "SMC:  36.7007738752772"
[1] "SMC:  54.0027391145472"
[1] "SMC:  47.2483922429611"
[1] "SMC:  45.8000876439486"
[1] "SMC:  46.7991885898786"
[1] "SMC:  54.0348696960089"
[1] "SMC:  52.2033859088911"
[1] "SMC:  41.0011292784324"
acceptance rate:  0.33 
[1] "39. 184.765869309558"
[1] "40. 170.197223148974"
> 
> state_df <- get_state(full_list, probs = c(0.25, 0.5, 0.75))
> 
> state_df$state <- true_states
> 
> theta_df <- get_parameter(full_list)
> 
> 
> save.image()
> save(state_df, file = "state_df.RData")
> save(theta_df, file = "theta_df.RData")
> 
> 
> 
> ggplot(state_df) + aes(x = time, y = state, ymin = lower, ymax = upper) + geom_step() + geom_ribbon(alpha = 0.2, stat = "stepribbon", fill = "red") + geom_step(mapping = aes(x = time, y = med), col = "red") + ggthemes::theme_base() + scale_y_continuous(expand = c(0, 0)) + scale_x_continuous(expand = c(0, 0))
> 
> ggplot(theta_df[which(theta_df$time %% 5 == 0),]) + aes(x = value, weights = weight, col = factor(time)) + geom_density() + facet_wrap(~parameter, scales = "free")
> 
> proc.time()
     user    system   elapsed 
29127.184   307.536  2833.307 
