
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> library(parallel)
> library(StateSpaceInference)
> library(ggplot2)
> library(ggalt)
> sessionInfo()
R version 3.5.1 (2018-07-02)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: SUSE Linux Enterprise Server 12 SP2

Matrix products: default
BLAS/LAPACK: /pkg/suse12/software/openblas/0.2.20-gcc-6.4.0-2.28/lib/libopenblas_sandybridgep-r0.2.20.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] parallel  stats     graphics  grDevices utils     datasets  methods  
[8] base     

other attached packages:
[1] ggalt_0.4.0               ggplot2_3.1.0            
[3] StateSpaceInference_0.4.2

loaded via a namespace (and not attached):
 [1] Rcpp_1.0.0         Rttf2pt1_1.3.7     bindr_0.1.1        magrittr_1.5      
 [5] maps_3.3.0         MASS_7.3-51.1      tidyselect_0.2.5   munsell_0.5.0     
 [9] colorspace_1.3-2   R6_2.3.0           rlang_0.3.0.1      plyr_1.8.4        
[13] dplyr_0.7.8        grid_3.5.1         gtable_0.2.0       ash_1.0-15        
[17] KernSmooth_2.23-15 extrafontdb_1.0    withr_2.1.2        proj4_1.0-8       
[21] lazyeval_0.2.1     assertthat_0.2.0   tibble_1.4.2       crayon_1.3.4      
[25] bindrcpp_0.2.2     RColorBrewer_1.1-2 purrr_0.2.5        glue_1.3.0        
[29] compiler_3.5.1     pillar_1.3.0       scales_1.0.0       extrafont_0.17    
[33] pkgconfig_2.0.2   
> 
> #cl <- makeCluster(parallel::detectCores())
> cl = "mclapply"
> #cl <- NULL
> 
> set.seed(3)
> 
> TT <- 40
> true_theta <- c(0.25, 0.5)
> lower <- 0
> upper <- 3.5
> sd_t <- 1
> init <- min(rgamma(1, 100, 100), upper - 1)
> a_logit <- 0.9
> dist_coef <- 0.5
> true_states <- generate_state(init, TT, lower, upper, sd_t, a = a_logit)
> 
> y <- hawkes_simulator(true_states[1], true_theta, NULL, 0, 10)
> for(tp in 1:TT){
+   y <- hawkes_simulator(true_states[tp], true_theta, y$history, tp * 10, tp * 10 + 10)
+ }
> 
> y_history <- y$history
> 
> lambda_fun <- stepfun(seq(10, TT*10 - 10, by = 10), y = true_states)
> kern <- function(x){return(decay_func(x, alpha = true_theta[1], delta = true_theta[2]))}
> #
> #y_history <- sim_hawkes(lambda_fun, NULL, kern, 0, TT*10, progressBar = FALSE)
> #y <- hist(y_history, breaks = seq(0, TT*10, by = 10), plot = FALSE)$counts
> 
> hist(y_history, breaks = TT * 10)
> 
> plot(lambda_fun, add = TRUE, col = "red")
> 
> simulator <- hawkes_simulator
> 
> inp <- list(
+   lower = lower,
+   upper = upper,
+   sd_t = sd_t,
+   a_logit = a_logit,
+   history = y_history,
+   simulator = simulator
+ )
> 
> loss = loss_hawkes
> 
> 
> Ntheta = 200
> Nx = 2000
> pacc = 0.05
> 
> lower_theta <- c(0.1, 0.2)
> upper_theta <- c(0.5, 0.8)
> 
> trans_args <- list(
+   lower_theta = lower_theta,
+   upper_theta = upper_theta,
+   a = 1
+ )
> 
> prior_sample <- data.frame(theta1 = runif(Ntheta, lower_theta[1], upper_theta[1]), theta2 = runif(Ntheta, lower_theta[2], upper_theta[2]))
> 
> prior_sample <- as.matrix(prior_sample, ncol = 2)
> 
> trans <- function(x, trans_args){
+   theta1 <- gtools::logit(x[,1], min = trans_args$lower[1], max = trans_args$upper[1])
+   theta2 <- gtools::logit(x[,2], min = trans_args$lower[2], max = trans_args$upper[2])
+   return(cbind(theta1, theta2))
+ }
> 
> invtrans <- function(x, trans_args){
+   theta1 <- gtools::inv.logit(trans_args$a * x[,1], min = trans_args$lower[1], max = trans_args$upper[1])
+   theta2 <- gtools::inv.logit(trans_args$a * x[,2], min = trans_args$lower[2], max = trans_args$upper[2])
+   return(cbind(theta1, theta2))
+ }
> 
> full_list <- SMC2_ABC(prior_sample, dprior = dHawkes, loss, loss_args = inp, Ntheta = Ntheta, Nx = Nx, pacc = pacc, cl = cl, dt = 10, ESS_threshold = 0.2, TT = TT, trans = trans, invtrans = invtrans, trans_args = trans_args)
[1] "1. 174.337517433752"
[1] "2. 154.873875253441"
[1] "3. 142.446320087088"
[1] "4. 141.466008583553"
[1] "5. 132.934545569247"
[1] "6. 119.693039585892"
[1] "7. 109.47101647121"
[1] "8. 100.780018216236"
[1] "9. 116.654768979511"
[1] "10. 103.012143150819"
[1] "11. 91.3328752957679"
[1] "12. 109.003252498296"
[1] "13. 124.234983477994"
[1] "14. 119.098824970328"
[1] "15. 118.903172222005"
[1] "16. 109.776787307173"
[1] "17. 106.234171812581"
[1] "18. 102.534091760229"
[1] "19. 96.4758931443519"
[1] "20. 86.9667712979445"
[1] "21. 75.785017482655"
[1] "22. 62.8875946474963"
[1] "23. 75.7067385764986"
[1] "24. 74.2942394349416"
[1] "25. 70.6742180811496"
[1] "26. 68.3131175701318"
[1] "27. 58.9048275866887"
[1] "28. 75.3451090650056"
[1] "29. 57.780819150331"
[1] "30. 43.1530873169"
[1] "31. 33.2648144462514"
[1] "resample"
[1] "SMC:  183.422057187579"
[1] "SMC:  170.365289919741"
[1] "SMC:  159.178424530542"
[1] "SMC:  160.572374176814"
[1] "SMC:  156.162548290538"
[1] "SMC:  147.543259591233"
[1] "SMC:  142.2080820401"
[1] "SMC:  137.966246768858"
[1] "SMC:  141.261260794038"
[1] "SMC:  127.972638827984"
[1] "SMC:  128.569530526113"
[1] "SMC:  132.317454146813"
[1] "SMC:  141.403516687447"
[1] "SMC:  137.257642798456"
[1] "SMC:  135.263128435353"
[1] "SMC:  129.670929415581"
[1] "SMC:  127.763734922921"
[1] "SMC:  125.845799299811"
[1] "SMC:  125.537540936406"
[1] "SMC:  119.73349342317"
[1] "SMC:  113.421498832043"
[1] "SMC:  105.225703067611"
[1] "SMC:  112.081521088245"
[1] "SMC:  107.624450545014"
[1] "SMC:  105.996814608032"
[1] "SMC:  103.784034780442"
[1] "SMC:  97.6272175898973"
[1] "SMC:  101.582174319557"
[1] "SMC:  87.2870288062496"
[1] "SMC:  72.3664907668686"
[1] "SMC:  59.9417268027834"
acceptance rate:  0.29 
[1] "32. 128.229376709057"
[1] "33. 66.9749180250501"
[1] "34. 56.4541879361207"
[1] "35. 57.2246989006521"
[1] "36. 40.5349309647517"
[1] "37. 33.384977118015"
[1] "resample"
[1] "SMC:  176.936368266405"
[1] "SMC:  153.916728941134"
[1] "SMC:  138.398602381979"
[1] "SMC:  138.09573551584"
[1] "SMC:  129.97973717863"
[1] "SMC:  115.577685349151"
[1] "SMC:  106.609551389927"
[1] "SMC:  100.194601474395"
[1] "SMC:  103.914418714158"
[1] "SMC:  89.6479728979805"
[1] "SMC:  82.3431847598153"
[1] "SMC:  94.7100301585068"
[1] "SMC:  118.807529121867"
[1] "SMC:  113.664087575346"
[1] "SMC:  115.341794191586"
[1] "SMC:  106.443883019685"
[1] "SMC:  99.7793192118398"
[1] "SMC:  97.0066284802044"
[1] "SMC:  91.4432918414741"
[1] "SMC:  86.2847777003336"
[1] "SMC:  76.8606276354174"
[1] "SMC:  71.5814202365332"
[1] "SMC:  78.9186803642984"
[1] "SMC:  74.0842608133208"
[1] "SMC:  71.633135243515"
[1] "SMC:  69.6256054775621"
[1] "SMC:  63.864499920245"
[1] "SMC:  68.4510796254923"
[1] "SMC:  62.0267355152027"
[1] "SMC:  53.7983121694066"
[1] "SMC:  45.9604381940685"
[1] "SMC:  53.8319791376242"
[1] "SMC:  45.3715928018955"
[1] "SMC:  40.8853973894572"
[1] "SMC:  40.2091640391126"
[1] "SMC:  43.5150383731525"
[1] "SMC:  45.7740854060094"
acceptance rate:  0.345 
[1] "38. 171.322498327464"
[1] "39. 186.03386701321"
[1] "40. 182.389673953079"
> 
> state_df <- get_state(full_list, probs = c(0.25, 0.5, 0.75))
> 
> state_df$state <- true_states
> 
> theta_df <- get_parameter(full_list)
> 
> 
> save.image()
> save(state_df, file = "state_df.RData")
> save(theta_df, file = "theta_df.RData")
> 
> 
> 
> ggplot(state_df) + aes(x = time, y = state, ymin = lower, ymax = upper) + geom_step() + geom_ribbon(alpha = 0.2, stat = "stepribbon", fill = "red") + geom_step(mapping = aes(x = time, y = med), col = "red") + ggthemes::theme_base() + scale_y_continuous(expand = c(0, 0)) + scale_x_continuous(expand = c(0, 0))
> 
> ggplot(theta_df[which(theta_df$time %% 5 == 0),]) + aes(x = value, weights = weight, col = factor(time)) + geom_density() + facet_wrap(~parameter, scales = "free")
> 
> proc.time()
     user    system   elapsed 
54829.081   331.237  4684.170 
