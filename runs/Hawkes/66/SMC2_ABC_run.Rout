
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> library(parallel)
> library(StateSpaceInference)
> library(ggplot2)
> library(ggalt)
> sessionInfo()
R version 3.5.1 (2018-07-02)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: SUSE Linux Enterprise Server 12 SP2

Matrix products: default
BLAS/LAPACK: /pkg/suse12/software/openblas/0.2.20-gcc-6.4.0-2.28/lib/libopenblas_sandybridgep-r0.2.20.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] parallel  stats     graphics  grDevices utils     datasets  methods  
[8] base     

other attached packages:
[1] ggalt_0.4.0               ggplot2_3.1.0            
[3] StateSpaceInference_1.2.1

loaded via a namespace (and not attached):
 [1] Rcpp_1.0.0         Rttf2pt1_1.3.7     bindr_0.1.1        magrittr_1.5      
 [5] maps_3.3.0         MASS_7.3-51.1      tidyselect_0.2.5   munsell_0.5.0     
 [9] colorspace_1.3-2   R6_2.3.0           rlang_0.3.0.1      plyr_1.8.4        
[13] dplyr_0.7.8        grid_3.5.1         gtable_0.2.0       ash_1.0-15        
[17] KernSmooth_2.23-15 extrafontdb_1.0    withr_2.1.2        proj4_1.0-8       
[21] lazyeval_0.2.1     assertthat_0.2.0   tibble_1.4.2       crayon_1.3.4      
[25] bindrcpp_0.2.2     RColorBrewer_1.1-2 purrr_0.2.5        glue_1.3.0        
[29] compiler_3.5.1     pillar_1.3.0       scales_1.0.0       extrafont_0.17    
[33] pkgconfig_2.0.2   
> 
> #cl <- makeCluster(parallel::detectCores())
> cl = "mclapply"
> #cl <- NULL
> 
> set.seed(3)
> 
> TT <- 40
> true_theta <- c(0.5, 0.5)
> lower <- 0
> upper <- 3.5
> sd_t <- 1
> init <- min(rgamma(1, 100, 100), upper - 1)
> a_logit <- 0.9
> dist_coef <- 0.5
> true_states <- generate_state(init, TT, lower, upper, sd_t, a = a_logit)
> 
> y <- NULL
> 
> #y <- hawkes_simulator(true_states[1], true_theta, NULL, 0, 10)
> for(tp in 1:TT){
+   y <- hawkes_simulator(true_states[tp], true_theta, y$history, tp * 10 - 10, tp * 10)
+ }
> 
> y_history <- y$history
> 
> lambda_fun <- stepfun(seq(10, TT*10 - 10, by = 10), y = true_states)
> kern <- function(x){return(decay_func(x, alpha = true_theta[1], delta = true_theta[2]))}
> #
> #y_history <- sim_hawkes(lambda_fun, NULL, kern, 0, TT*10, progressBar = FALSE)
> #y <- hist(y_history, breaks = seq(0, TT*10, by = 10), plot = FALSE)$counts
> 
> hist(y_history, breaks = TT * 10)
> 
> plot(lambda_fun, add = TRUE, col = "red")
> 
> simulator <- hawkes_simulator
> 
> inp <- list(
+   lower = lower,
+   upper = upper,
+   sd_t = sd_t,
+   a_logit = a_logit,
+   history = y_history,
+   simulator = simulator
+ )
> 
> loss = loss_hawkes
> 
> 
> Ntheta = 200
> Nx = 10000
> pacc = 0.02
> 
> lower_theta <- c(0.3, 0.3)
> upper_theta <- c(0.7, 0.7)
> 
> prior_sample <- data.frame(theta1 = runif(Ntheta, lower_theta[1], upper_theta[1]), theta2 = runif(Ntheta, lower_theta[2], upper_theta[2]))
> 
> prior_sample <- as.matrix(prior_sample, ncol = 2)
> 
> trans <- function(x, trans_args){
+   theta1 <- log(x[,1])
+   theta2 <- log(x[,2])
+   return(cbind(theta1, theta2))
+ }
> 
> invtrans <- function(x, trans_args){
+   theta1 <- exp(x[,1])
+   theta2 <- exp(x[,2])
+   return(cbind(theta1, theta2))
+ }
> 
> full_list <- SMC2_ABC(prior_sample, dprior = dHawkes, loss, loss_args = inp, Ntheta = Ntheta, Nx = Nx, pacc = pacc, cl = cl, dt = 10, ESS_threshold = 0.5, TT = TT, trans = trans, invtrans = invtrans, cov_coef = 0.25^2)
[1] 0.3002906 0.3802565 0.4837660 0.5649632 0.6982322
[1] 0.3047466 0.3929101 0.4914627 0.5863509 0.6954456
[1] "1. 188.94220470518"
[1] 0.3002906 0.3571747 0.4545478 0.5371446 0.6982322
[1] 0.3047466 0.3831304 0.4821643 0.5714714 0.6954456
[1] "2. 163.691055027982"
[1] 0.3002906 0.3531863 0.4382752 0.5136618 0.6982322
[1] 0.3047466 0.3741704 0.4671410 0.5497470 0.6954456
[1] "3. 151.361572524385"
[1] 0.3002906 0.3530772 0.4365074 0.5125830 0.6982322
[1] 0.3047466 0.3694483 0.4621609 0.5443956 0.6954456
[1] "4. 145.559426073518"
[1] 0.3002906 0.3518916 0.4285804 0.5083512 0.6982322
[1] 0.3047466 0.3633394 0.4621609 0.5432048 0.6954456
[1] "5. 135.997329218039"
[1] 0.3002906 0.3458222 0.4115018 0.5020806 0.6982322
[1] 0.3047466 0.3590331 0.4551099 0.5352506 0.6954456
[1] "6. 120.747024904365"
[1] 0.3002906 0.3458090 0.4094747 0.5008612 0.6982322
[1] 0.3047466 0.3522068 0.4356099 0.5297361 0.6954456
[1] "7. 113.076221275294"
[1] 0.3002906 0.3620145 0.4545478 0.5342484 0.6982322
[1] 0.3047466 0.3759080 0.4621979 0.5468776 0.6954456
[1] "8. 155.571290255297"
[1] 0.3002906 0.4133178 0.4912168 0.5606347 0.6982322
[1] 0.3047466 0.3701879 0.4498694 0.5397986 0.6954456
[1] "9. 161.273518829966"
[1] 0.3002906 0.3895003 0.4783382 0.5464319 0.6982322
[1] 0.3047466 0.3851161 0.4639204 0.5497470 0.6954456
[1] "10. 162.33057605851"
[1] 0.3002906 0.4112686 0.4887562 0.5528123 0.6982322
[1] 0.3047466 0.3896730 0.4671410 0.5550205 0.6954456
[1] "11. 165.13112142638"
[1] 0.3002906 0.4291453 0.5008612 0.5649632 0.6982322
[1] 0.3047466 0.3851161 0.4639204 0.5528816 0.6954456
[1] "12. 164.350999892374"
[1] 0.3002906 0.4164819 0.4944388 0.5558088 0.6982322
[1] 0.3047466 0.3824095 0.4551099 0.5432048 0.6954456
[1] "13. 156.022268019246"
[1] 0.3002906 0.4142018 0.4944388 0.5558088 0.6982322
[1] 0.3047466 0.3824095 0.4498694 0.5397986 0.6954456
[1] "14. 153.907947956033"
[1] 0.3002906 0.4365074 0.5014794 0.5669979 0.6982322
[1] 0.3047466 0.3824095 0.4551099 0.5397986 0.6954456
[1] "15. 153.146026565003"
[1] 0.3002906 0.4164819 0.4944388 0.5596599 0.6982322
[1] 0.3047466 0.3741704 0.4470162 0.5306063 0.6954456
[1] "16. 149.205674511632"
[1] 0.3002906 0.4142018 0.4912168 0.5548750 0.6982322
[1] 0.3047466 0.3741704 0.4470162 0.5306063 0.6954456
[1] "17. 146.89342311664"
[1] 0.3002906 0.4133178 0.4892174 0.5528123 0.6982322
[1] 0.3047466 0.3694483 0.4301877 0.5235673 0.6954456
[1] "18. 139.923907118194"
[1] 0.3002906 0.4057305 0.4822780 0.5474742 0.6982322
[1] 0.3047466 0.3693185 0.4301877 0.5237838 0.6954456
[1] "19. 137.534686223206"
[1] 0.3002906 0.4044955 0.4798691 0.5385971 0.6982322
[1] 0.3047466 0.3625494 0.4301877 0.5215560 0.6954456
[1] "20. 132.73953613793"
[1] 0.3002906 0.3926368 0.4695354 0.5231742 0.6982322
[1] 0.3047466 0.3590331 0.4274115 0.5147939 0.6954456
[1] "21. 126.908943576404"
[1] 0.3002906 0.3895003 0.4636062 0.5136618 0.6982322
[1] 0.3047466 0.3553051 0.4181270 0.5098974 0.6954456
[1] "22. 119.971391787055"
[1] 0.3002906 0.3842073 0.4576373 0.5125830 0.6982322
[1] 0.3047466 0.3553051 0.4181270 0.5098974 0.6954456
[1] "23. 118.37401841212"
[1] 0.3002906 0.3884264 0.4576373 0.5130682 0.6982322
[1] 0.3047466 0.3578248 0.4249541 0.5135926 0.6954456
[1] "24. 119.085496805132"
[1] 0.3002906 0.3802565 0.4545478 0.5096879 0.6982322
[1] 0.3047466 0.3625494 0.4274115 0.5147001 0.6954456
[1] "25. 119.007014588763"
[1] 0.3002906 0.3725809 0.4460941 0.5083329 0.6982322
[1] 0.3047466 0.3590331 0.4274115 0.5147001 0.6954456
[1] "26. 116.788820423086"
[1] 0.3002906 0.3655346 0.4365074 0.5030531 0.6982322
[1] 0.3047466 0.3590331 0.4274115 0.5147939 0.6954456
[1] "27. 111.607641453986"
[1] 0.3002906 0.4411075 0.5014794 0.5649632 0.6982322
[1] 0.3047466 0.3694483 0.4274115 0.5147001 0.6954456
[1] "28. 118.162043194433"
[1] 0.3002906 0.4365074 0.4958564 0.5491699 0.6982322
[1] 0.3047466 0.3633394 0.4274115 0.5098974 0.6954456
[1] "29. 109.724629922752"
[1] 0.3002906 0.4912168 0.5231742 0.5781375 0.6982322
[1] 0.3047466 0.3590331 0.4117365 0.4934913 0.6954456
[1] "30. 86.5498883957549"
[1] "resample"
[1] 0.3484275 0.4834011 0.5288242 0.5717036 0.7026727
[1] 0.2711516 0.3679634 0.4161514 0.5134292 0.7081185
[1] "SMC:  196.011236996991"
[1] 0.3484275 0.4762875 0.5233262 0.5647768 0.7026727
[1] 0.2711516 0.3659413 0.4131868 0.4988396 0.7081185
[1] "SMC:  184.22921033618"
[1] 0.3484275 0.4714621 0.5206505 0.5641616 0.7026727
[1] 0.2711516 0.3647363 0.4079724 0.4931917 0.7081185
[1] "SMC:  176.310985769856"
[1] 0.3484275 0.4708214 0.5205972 0.5647682 0.7026727
[1] 0.2711516 0.3639702 0.4052864 0.4899264 0.7081185
[1] "SMC:  172.018121371278"
[1] 0.3484275 0.4662657 0.5188741 0.5641616 0.7026727
[1] 0.2711516 0.3589487 0.4046400 0.4888928 0.7081185
[1] "SMC:  165.741075982743"
[1] 0.3484275 0.4637701 0.5156450 0.5616493 0.7026727
[1] 0.2711516 0.3577610 0.3996152 0.4869593 0.7081185
[1] "SMC:  155.837691811751"
[1] 0.3484275 0.4637701 0.5156450 0.5616493 0.7026727
[1] 0.2711516 0.3556119 0.3984234 0.4742973 0.7081185
[1] "SMC:  149.910027400191"
[1] 0.3484275 0.4762875 0.5220263 0.5641616 0.7026727
[1] 0.2711516 0.3643858 0.4055425 0.4888928 0.7081185
[1] "SMC:  170.843527451469"
[1] 0.3484275 0.4834330 0.5274462 0.5677238 0.7026727
[1] 0.2711516 0.3577610 0.3985740 0.4742973 0.7081185
[1] "SMC:  170.294422236933"
[1] 0.3484275 0.4785800 0.5220263 0.5630312 0.7026727
[1] 0.2711516 0.3659413 0.4099518 0.4899264 0.7081185
[1] "SMC:  171.265547274193"
[1] 0.3484275 0.4832290 0.5262484 0.5641616 0.7026727
[1] 0.2711516 0.3674862 0.4118577 0.4921095 0.7081185
[1] "SMC:  173.431476187361"
[1] 0.3484275 0.4855135 0.5286307 0.5677238 0.7026727
[1] 0.2711516 0.3659413 0.4057199 0.4882641 0.7081185
[1] "SMC:  175.337989896822"
[1] 0.3484275 0.4838060 0.5269930 0.5654648 0.7026727
[1] 0.2711516 0.3643858 0.4046400 0.4789308 0.7081185
[1] "SMC:  168.259718667188"
[1] 0.3484275 0.4838060 0.5269930 0.5657080 0.7026727
[1] 0.2711516 0.3647363 0.3996152 0.4778322 0.7081185
[1] "SMC:  166.799799168936"
[1] 0.3484275 0.4865978 0.5316098 0.5687588 0.7026727
[1] 0.2711516 0.3647363 0.3996152 0.4789308 0.7081185
[1] "SMC:  170.748850292825"
[1] 0.3484275 0.4854478 0.5272532 0.5662134 0.7026727
[1] 0.2711516 0.3639702 0.3985740 0.4732835 0.7081185
[1] "SMC:  165.44269302373"
[1] 0.3484275 0.4854478 0.5272532 0.5657080 0.7026727
[1] 0.2711516 0.3639702 0.3985740 0.4732835 0.7081185
[1] "SMC:  162.396112463798"
[1] 0.3484275 0.4838060 0.5274462 0.5657080 0.7026727
[1] 0.2711516 0.3566394 0.3951795 0.4703373 0.7081185
[1] "SMC:  156.715329912419"
[1] 0.3484275 0.4832290 0.5264848 0.5654648 0.7026727
[1] 0.2711516 0.3577610 0.3965084 0.4715633 0.7081185
[1] "SMC:  154.383060878018"
[1] 0.3484275 0.4820225 0.5262484 0.5647768 0.7026727
[1] 0.2711516 0.3577610 0.3951795 0.4703373 0.7081185
[1] "SMC:  151.323858109157"
[1] 0.3484275 0.4799961 0.5233262 0.5641616 0.7026727
[1] 0.2711516 0.3566394 0.3951795 0.4672614 0.7081185
[1] "SMC:  147.487875581112"
[1] 0.3484275 0.4785800 0.5233262 0.5641616 0.7026727
[1] 0.2711516 0.3556119 0.3926002 0.4629280 0.7081185
[1] "SMC:  144.051168010802"
[1] 0.3484275 0.4785800 0.5233262 0.5641616 0.7026727
[1] 0.2711516 0.3556119 0.3915067 0.4598933 0.7081185
[1] "SMC:  143.460164307533"
[1] 0.3484275 0.4785800 0.5233262 0.5630312 0.7026727
[1] 0.2711516 0.3566394 0.3945769 0.4637158 0.7081185
[1] "SMC:  145.560557495364"
[1] 0.3484275 0.4762875 0.5205972 0.5628652 0.7026727
[1] 0.2711516 0.3566394 0.3951795 0.4703373 0.7081185
[1] "SMC:  143.884703296128"
[1] 0.3484275 0.4736399 0.5188741 0.5608938 0.7026727
[1] 0.2711516 0.3566394 0.3951795 0.4703373 0.7081185
[1] "SMC:  140.144446263184"
[1] 0.3484275 0.4654343 0.5120350 0.5592450 0.7026727
[1] 0.2711516 0.3577610 0.3965084 0.4721413 0.7081185
[1] "SMC:  135.425644912774"
[1] 0.3484275 0.4879033 0.5355269 0.5717036 0.7026727
[1] 0.2711516 0.3566394 0.3940889 0.4637158 0.7081185
[1] "SMC:  150.797583655215"
[1] 0.3484275 0.4855135 0.5274462 0.5647682 0.7026727
[1] 0.2711516 0.3577610 0.3940889 0.4629280 0.7081185
[1] "SMC:  145.394700299891"
[1] 0.3484275 0.5110241 0.5498119 0.5722144 0.7026727
[1] 0.2711516 0.3555984 0.3881021 0.4530854 0.7081185
[1] "SMC:  133.801009797231"
acceptance rate:  0.84 
[1] 0.4214587 0.5178429 0.5545418 0.5722144 0.6658294
[1] 0.3104626 0.3674862 0.3945769 0.4742973 0.6537371
[1] "31. 184.057534544723"
[1] 0.4214587 0.5233262 0.5590202 0.5841165 0.6658294
[1] 0.3104626 0.3648704 0.3926002 0.4703373 0.6537371
[1] "32. 182.044435312981"
[1] 0.4214587 0.5233262 0.5591214 0.5841165 0.6658294
[1] 0.3104626 0.3648704 0.3926002 0.4715633 0.6537371
[1] "33. 175.81835406772"
[1] 0.4214587 0.5233262 0.5590202 0.5841165 0.6658294
[1] 0.3104626 0.3648704 0.3915067 0.4578825 0.6537371
[1] "34. 182.191022138266"
[1] 0.4214587 0.5203434 0.5590202 0.5835460 0.6658294
[1] 0.3104626 0.3639702 0.3915067 0.4540563 0.6537371
[1] "35. 183.794096849881"
[1] 0.4214587 0.5203434 0.5590202 0.5786057 0.6658294
[1] 0.3104626 0.3639702 0.3900915 0.4530854 0.6537371
[1] "36. 183.851252087323"
[1] 0.4214587 0.5239068 0.5592450 0.5847658 0.6658294
[1] 0.3104626 0.3648704 0.3926002 0.4598933 0.6537371
[1] "37. 166.916813343479"
[1] 0.4214587 0.5274462 0.5608938 0.5855569 0.6658294
[1] 0.3104626 0.3639702 0.3900915 0.4540563 0.6537371
[1] "38. 161.387717358176"
[1] 0.4214587 0.5274462 0.5608938 0.5861381 0.6658294
[1] 0.3104626 0.3639702 0.3900915 0.4540563 0.6537371
[1] "39. 158.744094577417"
[1] 0.4214587 0.5274462 0.5608938 0.5861381 0.6658294
[1] 0.3104626 0.3606506 0.3881021 0.4302415 0.6537371
[1] "40. 162.729539837238"
There were 50 or more warnings (use warnings() to see the first 50)
> 
> state_df <- get_state(full_list, probs = c(0.25, 0.5, 0.75))
> 
> state_df$state <- true_states
> 
> theta_df <- get_parameter(full_list)
> 
> 
> save.image()	
> save(state_df, file = "state_df.RData")	
> save(theta_df, file = "theta_df.RData")
> 
> 
> 
> ggplot(state_df) + aes(x = time, y = state, ymin = lower, ymax = upper) + geom_step() + geom_ribbon(alpha = 0.2, stat = "stepribbon", fill = "red") + geom_step(mapping = aes(x = time, y = med), col = "red") + ggthemes::theme_base() + scale_y_continuous(expand = c(0, 0)) + scale_x_continuous(expand = c(0, 0))
> 
> ggplot(theta_df[which(theta_df$time %% 5 == 0),]) + aes(x = value, weights = weight, col = factor(time)) + geom_density() + facet_wrap(~parameter, scales = "free")
> 
> proc.time()
      user     system    elapsed 
151613.696   1106.312  10554.771 
