
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> library(parallel)
> library(StateSpaceInference)
> library(ggplot2)
> library(ggalt)
> sessionInfo()
R version 3.5.1 (2018-07-02)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: SUSE Linux Enterprise Server 12 SP2

Matrix products: default
BLAS/LAPACK: /pkg/suse12/software/openblas/0.2.20-gcc-6.4.0-2.28/lib/libopenblas_sandybridgep-r0.2.20.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] parallel  stats     graphics  grDevices utils     datasets  methods  
[8] base     

other attached packages:
[1] ggalt_0.4.0               ggplot2_3.1.0            
[3] StateSpaceInference_0.5.0

loaded via a namespace (and not attached):
 [1] Rcpp_1.0.0         Rttf2pt1_1.3.7     bindr_0.1.1        magrittr_1.5      
 [5] maps_3.3.0         MASS_7.3-51.1      tidyselect_0.2.5   munsell_0.5.0     
 [9] colorspace_1.3-2   R6_2.3.0           rlang_0.3.0.1      plyr_1.8.4        
[13] dplyr_0.7.8        grid_3.5.1         gtable_0.2.0       ash_1.0-15        
[17] KernSmooth_2.23-15 extrafontdb_1.0    withr_2.1.2        proj4_1.0-8       
[21] lazyeval_0.2.1     assertthat_0.2.0   tibble_1.4.2       crayon_1.3.4      
[25] bindrcpp_0.2.2     RColorBrewer_1.1-2 purrr_0.2.5        glue_1.3.0        
[29] compiler_3.5.1     pillar_1.3.0       scales_1.0.0       extrafont_0.17    
[33] pkgconfig_2.0.2   
> 
> #cl <- makeCluster(parallel::detectCores())
> cl = "mclapply"
> #cl <- NULL
> 
> set.seed(3)
> 
> TT <- 20
> true_theta <- c(0.5, 0.5)
> lower <- 0
> upper <- 3.5
> sd_t <- 1
> init <- min(rgamma(1, 100, 100), upper - 1)
> a_logit <- 0.9
> dist_coef <- 0.5
> true_states <- generate_state(init, TT, lower, upper, sd_t, a = a_logit)
> 
> y <- hawkes_simulator(true_states[1], true_theta, NULL, 0, 10)
> for(tp in 1:TT){
+   y <- hawkes_simulator(true_states[tp], true_theta, y$history, tp * 10, tp * 10 + 10)
+ }
> 
> y_history <- y$history
> 
> lambda_fun <- stepfun(seq(10, TT*10 - 10, by = 10), y = true_states)
> kern <- function(x){return(decay_func(x, alpha = true_theta[1], delta = true_theta[2]))}
> #
> #y_history <- sim_hawkes(lambda_fun, NULL, kern, 0, TT*10, progressBar = FALSE)
> #y <- hist(y_history, breaks = seq(0, TT*10, by = 10), plot = FALSE)$counts
> 
> hist(y_history, breaks = TT * 10)
> 
> plot(lambda_fun, add = TRUE, col = "red")
> 
> simulator <- hawkes_simulator
> 
> inp <- list(
+   lower = lower,
+   upper = upper,
+   sd_t = sd_t,
+   a_logit = a_logit,
+   history = y_history,
+   simulator = simulator
+ )
> 
> loss = loss_hawkes
> 
> 
> Ntheta = 100
> Nx = 10000
> pacc = 5e-4
> 
> lower_theta <- c(0.3, 0.3)
> upper_theta <- c(0.7, 0.7)
> 
> trans_args <- list(
+   lower_theta = lower_theta,
+   upper_theta = upper_theta,
+   a = 1
+ )
> 
> prior_sample <- data.frame(theta1 = runif(Ntheta, lower_theta[1], upper_theta[1]), theta2 = runif(Ntheta, lower_theta[2], upper_theta[2]))
> 
> prior_sample <- as.matrix(prior_sample, ncol = 2)
> 
> trans <- function(x, trans_args){
+   theta1 <- gtools::logit(x[,1], min = trans_args$lower[1], max = trans_args$upper[1])
+   theta2 <- gtools::logit(x[,2], min = trans_args$lower[2], max = trans_args$upper[2])
+   return(cbind(theta1, theta2))
+ }
> 
> invtrans <- function(x, trans_args){
+   theta1 <- gtools::inv.logit(trans_args$a * x[,1], min = trans_args$lower[1], max = trans_args$upper[1])
+   theta2 <- gtools::inv.logit(trans_args$a * x[,2], min = trans_args$lower[2], max = trans_args$upper[2])
+   return(cbind(theta1, theta2))
+ }
> 
> full_list <- SMC2_ABC(prior_sample, dprior = dHawkes, loss, loss_args = inp, Ntheta = Ntheta, Nx = Nx, pacc = pacc, cl = cl, dt = 10, ESS_threshold = 0.2, TT = TT, trans = trans, invtrans = invtrans, trans_args = trans_args)
[1] 0.3032790 0.3890356 0.4536155 0.5708583 0.6901670
[1] 0.3034827 0.4214358 0.5055307 0.5878385 0.6992435
[1] "1. 82.7814569536424"
[1] 0.3086144 0.3913207 0.4566347 0.5829727 0.6901670
[1] 0.3034827 0.4253551 0.5139270 0.5851662 0.6992435
[1] "2. 71.1192231753433"
[1] 0.3032790 0.3504875 0.4284163 0.5299234 0.6901670
[1] 0.3034827 0.4191610 0.4854175 0.5521270 0.6992435
[1] "3. 47.5702558513018"
[1] 0.3032790 0.3504875 0.4199016 0.4814120 0.6901670
[1] 0.3034827 0.4186923 0.4826140 0.5474988 0.6992435
[1] "4. 41.1285343509858"
[1] 0.3032790 0.3504875 0.4237635 0.4598944 0.6901670
[1] 0.3034827 0.4217067 0.4826140 0.5415137 0.6992435
[1] "5. 32.0539047825182"
[1] 0.3032790 0.3504875 0.4168465 0.5210489 0.6901670
[1] 0.3116785 0.4186923 0.4826140 0.5404078 0.6992435
[1] "6. 34.3999070222661"
[1] 0.3032790 0.3504875 0.4034350 0.4664734 0.6901670
[1] 0.3147703 0.4218703 0.4826140 0.5404078 0.6992435
[1] "7. 28.6703576466309"
[1] 0.3032790 0.3504875 0.3996464 0.4566347 0.6901670
[1] 0.3147703 0.4516118 0.4826140 0.5568097 0.6992435
[1] "8. 18.5484526983099"
[1] "resample"
[1] 0.3019925 0.3226195 0.3610187 0.5215291 0.6960324
[1] 0.3071098 0.4050844 0.5659516 0.6416990 0.6996278
[1] "SMC:  83.8312686885946"
[1] 0.3019925 0.3223548 0.3557486 0.4850251 0.6960324
[1] 0.3071098 0.4041538 0.5530987 0.6271254 0.6996278
[1] "SMC:  66.0841013029001"
[1] 0.3019925 0.3211057 0.3518013 0.4554797 0.6960324
[1] 0.3071098 0.4071398 0.5530987 0.6490244 0.6996278
[1] "SMC:  54.125206259731"
[1] 0.3019925 0.3188416 0.3534929 0.4505258 0.6960324
[1] 0.3063672 0.4077890 0.5771144 0.6778430 0.6996278
[1] "SMC:  35.9247782180155"
[1] 0.3019925 0.3203221 0.3534929 0.4667646 0.6960324
[1] 0.3063672 0.3995305 0.5602082 0.6670359 0.6996278
[1] "SMC:  42.643376649057"
[1] 0.3019925 0.3186129 0.3534929 0.5236059 0.6960324
[1] 0.3075869 0.3666163 0.5530987 0.6525672 0.6996278
[1] "SMC:  38.4231952875685"
[1] 0.3019925 0.3152909 0.3436006 0.5222214 0.6960324
[1] 0.3075869 0.4098006 0.5602082 0.6551132 0.6996278
[1] "SMC:  27.6165037268532"
[1] 0.3019925 0.3158344 0.3397622 0.4608369 0.6960324
[1] 0.3075869 0.4098006 0.5602082 0.6592486 0.6996278
[1] "SMC:  34.523025758244"
acceptance rate:  0.75 
[1] 0.3019925 0.3157340 0.3388894 0.5050168 0.6863294
[1] 0.3136836 0.4341370 0.5279022 0.6490244 0.6957168
[1] "9. 74.00828892836"
[1] 0.3019925 0.3329260 0.4452209 0.5760980 0.6863294
[1] 0.3136836 0.3592055 0.4436902 0.6307430 0.6957168
[1] "10. 48.1825886839596"
[1] 0.3019925 0.3185643 0.3591416 0.5760980 0.6863294
[1] 0.3136836 0.4331413 0.4826140 0.6496776 0.6957168
[1] "11. 56.5334160108644"
[1] 0.3019925 0.3262691 0.5215291 0.5760980 0.6863294
[1] 0.3136836 0.4104420 0.4436902 0.6434136 0.6957168
[1] "12. 30.9808939522361"
[1] 0.3019925 0.3262691 0.5215291 0.5760980 0.6863294
[1] 0.3136836 0.4104420 0.4436902 0.6406082 0.6957168
[1] "13. 21.6375465981804"
[1] 0.3019925 0.3297709 0.5215291 0.5760980 0.6863294
[1] 0.3136836 0.3976329 0.4436902 0.6095636 0.6957168
[1] "14. 16.2608893669615"
[1] "resample"
[1] 0.3001551 0.3113757 0.3589110 0.4936213 0.6992024
[1] 0.3002387 0.3892402 0.5520146 0.6716899 0.6998943
[1] "SMC:  85.5625"
[1] 0.3001551 0.3094055 0.3441650 0.4747170 0.6992024
[1] 0.3002387 0.3951387 0.5581858 0.6742197 0.6998943
[1] "SMC:  78.7364720269031"
[1] 0.3000879 0.3089849 0.3308941 0.4284212 0.6992024
[1] 0.3002387 0.3973072 0.5560639 0.6739373 0.6998943
[1] "SMC:  67.0496919324556"
[1] 0.3000879 0.3068030 0.3289508 0.4377610 0.6992024
[1] 0.3002387 0.3893756 0.5560639 0.6761848 0.6998943
[1] "SMC:  58.6645420553386"
[1] 0.3000879 0.3038483 0.3235326 0.4171207 0.6992024
[1] 0.3002387 0.3933739 0.5713509 0.6831756 0.6998943
[1] "SMC:  51.0394726945103"
[1] 0.3000879 0.3038313 0.3239752 0.4032745 0.6992024
[1] 0.3008650 0.4172315 0.5679694 0.6818090 0.6990910
[1] "SMC:  46.3315966497269"
[1] 0.3000879 0.3040068 0.3239752 0.3996915 0.6992024
[1] 0.3008650 0.3941510 0.5562766 0.6691044 0.6990910
[1] "SMC:  39.8007566886171"
[1] 0.3000879 0.3038825 0.3138089 0.3996915 0.6992024
[1] 0.3008650 0.3939621 0.5474215 0.6629165 0.6990910
[1] "SMC:  32.9701938501328"
[1] 0.3000879 0.3063402 0.3263938 0.4177480 0.6992024
[1] 0.3008650 0.4044184 0.5541365 0.6711671 0.6990910
[1] "SMC:  34.2776647431342"
[1] 0.3002230 0.3122025 0.3923652 0.4818969 0.6992024
[1] 0.3008650 0.3969295 0.5373589 0.6558372 0.6990910
[1] "SMC:  25.351067671426"
[1] 0.3000879 0.3038825 0.3268645 0.4290194 0.6992024
[1] 0.3021466 0.4571044 0.5713509 0.6716899 0.6990910
[1] "SMC:  22.1074498069636"
[1] 0.3001551 0.3268645 0.4082441 0.4831804 0.6992024
[1] 0.3021466 0.4446510 0.5373589 0.6818090 0.6986617
[1] "SMC:  18.9510779358714"
[1] 0.3001551 0.3734216 0.4818969 0.5914213 0.6992024
[1] 0.3021466 0.3947057 0.5180481 0.6557020 0.6986617
[1] "SMC:  14.040148531528"
[1] 0.3001551 0.3268645 0.4818969 0.5351400 0.6992024
[1] 0.3008650 0.3893756 0.5180481 0.6716899 0.6986617
[1] "SMC:  11.0269683283834"
acceptance rate:  0.73 
[1] 0.3002230 0.3968582 0.4818969 0.5523890 0.6765053
[1] 0.3008650 0.4007917 0.5180481 0.6716899 0.6927982
[1] "15. 80.8538163001294"
[1] 0.3010300 0.3968582 0.4818969 0.5914213 0.6765053
[1] 0.3008650 0.3964824 0.5180481 0.6716899 0.6927982
[1] "16. 63.4742221677092"
[1] 0.3010300 0.3968582 0.4818969 0.5852920 0.6765053
[1] 0.3008650 0.4029463 0.5180481 0.6716899 0.6927982
[1] "17. 55.7826521871605"
[1] 0.3010300 0.3968582 0.4818969 0.5914213 0.6765053
[1] 0.3008650 0.3964824 0.5180481 0.6716899 0.6927982
[1] "18. 53.1554896940036"
[1] 0.3010300 0.3968582 0.4818969 0.5914213 0.6765053
[1] 0.3008650 0.3964824 0.5180481 0.6716899 0.6927982
[1] "19. 42.7403107044334"
[1] 0.3011971 0.3968582 0.4818969 0.5129046 0.6765053
[1] 0.3008650 0.4064362 0.5180481 0.6716899 0.6927982
[1] "20. 31.5067588048957"
> 
> state_df <- get_state(full_list, probs = c(0.25, 0.5, 0.75))
> 
> state_df$state <- true_states
> 
> theta_df <- get_parameter(full_list)
> 
> 
> save.image()
> save(state_df, file = "state_df.RData")
> save(theta_df, file = "theta_df.RData")
> 
> 
> 
> ggplot(state_df) + aes(x = time, y = state, ymin = lower, ymax = upper) + geom_step() + geom_ribbon(alpha = 0.2, stat = "stepribbon", fill = "red") + geom_step(mapping = aes(x = time, y = med), col = "red") + ggthemes::theme_base() + scale_y_continuous(expand = c(0, 0)) + scale_x_continuous(expand = c(0, 0))
> 
> ggplot(theta_df[which(theta_df$time %% 5 == 0),]) + aes(x = value, weights = weight, col = factor(time)) + geom_density() + facet_wrap(~parameter, scales = "free")
> 
> proc.time()
     user    system   elapsed 
33155.899   142.978  2449.830 
