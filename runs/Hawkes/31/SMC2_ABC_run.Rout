
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> library(parallel)
> library(StateSpaceInference)
> library(ggplot2)
> library(ggalt)
> sessionInfo()
R version 3.5.1 (2018-07-02)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: SUSE Linux Enterprise Server 12 SP2

Matrix products: default
BLAS/LAPACK: /pkg/suse12/software/openblas/0.2.20-gcc-6.4.0-2.28/lib/libopenblas_sandybridgep-r0.2.20.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] parallel  stats     graphics  grDevices utils     datasets  methods  
[8] base     

other attached packages:
[1] ggalt_0.4.0               ggplot2_3.1.0            
[3] StateSpaceInference_0.5.0

loaded via a namespace (and not attached):
 [1] Rcpp_1.0.0         Rttf2pt1_1.3.7     bindr_0.1.1        magrittr_1.5      
 [5] maps_3.3.0         MASS_7.3-51.1      tidyselect_0.2.5   munsell_0.5.0     
 [9] colorspace_1.3-2   R6_2.3.0           rlang_0.3.0.1      plyr_1.8.4        
[13] dplyr_0.7.8        grid_3.5.1         gtable_0.2.0       ash_1.0-15        
[17] KernSmooth_2.23-15 extrafontdb_1.0    withr_2.1.2        proj4_1.0-8       
[21] lazyeval_0.2.1     assertthat_0.2.0   tibble_1.4.2       crayon_1.3.4      
[25] bindrcpp_0.2.2     RColorBrewer_1.1-2 purrr_0.2.5        glue_1.3.0        
[29] compiler_3.5.1     pillar_1.3.0       scales_1.0.0       extrafont_0.17    
[33] pkgconfig_2.0.2   
> 
> #cl <- makeCluster(parallel::detectCores())
> cl = "mclapply"
> #cl <- NULL
> 
> set.seed(3)
> 
> TT <- 20
> true_theta <- c(0.5, 0.5)
> lower <- 0
> upper <- 3.5
> sd_t <- 1
> init <- min(rgamma(1, 100, 100), upper - 1)
> a_logit <- 0.9
> dist_coef <- 0.5
> true_states <- generate_state(init, TT, lower, upper, sd_t, a = a_logit)
> 
> y <- hawkes_simulator(true_states[1], true_theta, NULL, 0, 10)
> for(tp in 1:TT){
+   y <- hawkes_simulator(true_states[tp], true_theta, y$history, tp * 10, tp * 10 + 10)
+ }
> 
> y_history <- y$history
> 
> lambda_fun <- stepfun(seq(10, TT*10 - 10, by = 10), y = true_states)
> kern <- function(x){return(decay_func(x, alpha = true_theta[1], delta = true_theta[2]))}
> #
> #y_history <- sim_hawkes(lambda_fun, NULL, kern, 0, TT*10, progressBar = FALSE)
> #y <- hist(y_history, breaks = seq(0, TT*10, by = 10), plot = FALSE)$counts
> 
> hist(y_history, breaks = TT * 10)
> 
> plot(lambda_fun, add = TRUE, col = "red")
> 
> simulator <- hawkes_simulator
> 
> inp <- list(
+   lower = lower,
+   upper = upper,
+   sd_t = sd_t,
+   a_logit = a_logit,
+   history = y_history,
+   simulator = simulator
+ )
> 
> loss = loss_hawkes
> 
> 
> Ntheta = 1000
> Nx = 10000
> pacc = 5e-3
> 
> lower_theta <- c(0.3, 0.3)
> upper_theta <- c(0.7, 0.7)
> 
> trans_args <- list(
+   lower_theta = lower_theta,
+   upper_theta = upper_theta,
+   a = 1
+ )
> 
> prior_sample <- data.frame(theta1 = runif(Ntheta, lower_theta[1], upper_theta[1]), theta2 = runif(Ntheta, lower_theta[2], upper_theta[2]))
> 
> prior_sample <- as.matrix(prior_sample, ncol = 2)
> 
> trans <- function(x, trans_args){
+   theta1 <- gtools::logit(x[,1], min = trans_args$lower[1], max = trans_args$upper[1])
+   theta2 <- gtools::logit(x[,2], min = trans_args$lower[2], max = trans_args$upper[2])
+   return(cbind(theta1, theta2))
+ }
> 
> invtrans <- function(x, trans_args){
+   theta1 <- gtools::inv.logit(trans_args$a * x[,1], min = trans_args$lower[1], max = trans_args$upper[1])
+   theta2 <- gtools::inv.logit(trans_args$a * x[,2], min = trans_args$lower[2], max = trans_args$upper[2])
+   return(cbind(theta1, theta2))
+ }
> 
> full_list <- SMC2_ABC(prior_sample, dprior = dHawkes, loss, loss_args = inp, Ntheta = Ntheta, Nx = Nx, pacc = pacc, cl = cl, dt = 10, ESS_threshold = 0.2, TT = TT, trans = trans, invtrans = invtrans, trans_args = trans_args)
[1] 0.3004481 0.3839958 0.4774753 0.5790977 0.6998184
[1] 0.3002906 0.3938371 0.5016315 0.5962871 0.6995915
[1] "1. 950.638296577854"
[1] 0.3004481 0.3835710 0.4714760 0.5735401 0.6998184
[1] 0.3002906 0.3938371 0.5016315 0.5964253 0.6995915
[1] "2. 924.128745843144"
[1] 0.3004481 0.3646264 0.4442232 0.5441268 0.6998184
[1] 0.3002906 0.3831606 0.4866899 0.5848494 0.6995915
[1] "3. 808.338495668714"
[1] 0.3004481 0.3619959 0.4388884 0.5388969 0.6998184
[1] 0.3002906 0.3735342 0.4786995 0.5785559 0.6995915
[1] "4. 757.544577358896"
[1] 0.3004481 0.3605387 0.4313884 0.5330270 0.6998184
[1] 0.3002906 0.3663651 0.4673236 0.5729597 0.6995915
[1] "5. 714.208675490096"
[1] 0.3004481 0.3582526 0.4262705 0.5284354 0.6998184
[1] 0.3002906 0.3648391 0.4630886 0.5694348 0.6995915
[1] "6. 683.271944570756"
[1] 0.3004481 0.3568071 0.4197465 0.5211964 0.6998184
[1] 0.3002906 0.3625479 0.4621609 0.5689144 0.6995915
[1] "7. 645.695001366879"
[1] 0.3004481 0.3546364 0.4138935 0.5111634 0.6998184
[1] 0.3002906 0.3620862 0.4618612 0.5682657 0.6995915
[1] "8. 603.177954347478"
[1] 0.3004527 0.3606544 0.4262705 0.5243388 0.6998184
[1] 0.3002906 0.3626703 0.4618612 0.5679245 0.6995915
[1] "9. 635.345432706471"
[1] 0.3032790 0.4014736 0.4774753 0.5610779 0.6998184
[1] 0.3002906 0.3567324 0.4416508 0.5486072 0.6995915
[1] "10. 632.272905034702"
[1] 0.3032790 0.3723995 0.4455408 0.5359380 0.6998184
[1] 0.3002906 0.3675795 0.4623082 0.5679245 0.6995915
[1] "11. 626.567201909271"
[1] 0.3033549 0.4007284 0.4762817 0.5559349 0.6998184
[1] 0.3002906 0.3694158 0.4630886 0.5682146 0.6995915
[1] "12. 642.947568639041"
[1] 0.3044519 0.4145152 0.4990328 0.5735416 0.6998184
[1] 0.3002906 0.3683987 0.4618612 0.5669235 0.6995915
[1] "13. 631.305227826999"
[1] 0.3044519 0.4090149 0.4880914 0.5643092 0.6998184
[1] 0.3002906 0.3550573 0.4408519 0.5441607 0.6995915
[1] "14. 575.525622298758"
[1] 0.3034827 0.4062070 0.4827569 0.5615353 0.6998184
[1] 0.3002906 0.3537833 0.4366631 0.5389061 0.6995915
[1] "15. 549.33553257246"
[1] 0.3044519 0.4126450 0.4940057 0.5689293 0.6998184
[1] 0.3002906 0.3518359 0.4287466 0.5343977 0.6995915
[1] "16. 512.818090695197"
[1] 0.3044519 0.4048544 0.4745809 0.5557222 0.6998184
[1] 0.3002906 0.3558711 0.4411075 0.5439534 0.6995915
[1] "17. 521.256914894013"
[1] 0.3034827 0.3999861 0.4693420 0.5530755 0.6998184
[1] 0.3002906 0.3523801 0.4333497 0.5366419 0.6995915
[1] "18. 483.987047478849"
[1] 0.3034827 0.4062070 0.4754097 0.5545104 0.6998184
[1] 0.3002906 0.3517927 0.4302885 0.5360457 0.6995915
[1] "19. 480.221830046322"
[1] 0.3034827 0.3963964 0.4667129 0.5448808 0.6998184
[1] 0.3002906 0.3517927 0.4355391 0.5379371 0.6995915
[1] "20. 471.950332380362"
> 
> state_df <- get_state(full_list, probs = c(0.25, 0.5, 0.75))
> 
> state_df$state <- true_states
> 
> theta_df <- get_parameter(full_list)
> 
> 
> save.image()
> save(state_df, file = "state_df.RData")
> save(theta_df, file = "theta_df.RData")
> 
> 
> 
> ggplot(state_df) + aes(x = time, y = state, ymin = lower, ymax = upper) + geom_step() + geom_ribbon(alpha = 0.2, stat = "stepribbon", fill = "red") + geom_step(mapping = aes(x = time, y = med), col = "red") + ggthemes::theme_base() + scale_y_continuous(expand = c(0, 0)) + scale_x_continuous(expand = c(0, 0))
> 
> ggplot(theta_df[which(theta_df$time %% 5 == 0),]) + aes(x = value, weights = weight, col = factor(time)) + geom_density() + facet_wrap(~parameter, scales = "free")
> 
> proc.time()
      user     system    elapsed 
182607.368    191.365  11882.229 
