
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> library(parallel)
> library(StateSpaceInference)
> library(ggplot2)
> library(ggalt)
> sessionInfo()
R version 3.5.1 (2018-07-02)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: SUSE Linux Enterprise Server 12 SP2

Matrix products: default
BLAS/LAPACK: /pkg/suse12/software/openblas/0.2.20-gcc-6.4.0-2.28/lib/libopenblas_sandybridgep-r0.2.20.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] parallel  stats     graphics  grDevices utils     datasets  methods  
[8] base     

other attached packages:
[1] ggalt_0.4.0               ggplot2_3.1.0            
[3] StateSpaceInference_0.5.0

loaded via a namespace (and not attached):
 [1] Rcpp_1.0.0         Rttf2pt1_1.3.7     bindr_0.1.1        magrittr_1.5      
 [5] maps_3.3.0         MASS_7.3-51.1      tidyselect_0.2.5   munsell_0.5.0     
 [9] colorspace_1.3-2   R6_2.3.0           rlang_0.3.0.1      plyr_1.8.4        
[13] dplyr_0.7.8        grid_3.5.1         gtable_0.2.0       ash_1.0-15        
[17] KernSmooth_2.23-15 extrafontdb_1.0    withr_2.1.2        proj4_1.0-8       
[21] lazyeval_0.2.1     assertthat_0.2.0   tibble_1.4.2       crayon_1.3.4      
[25] bindrcpp_0.2.2     RColorBrewer_1.1-2 purrr_0.2.5        glue_1.3.0        
[29] compiler_3.5.1     pillar_1.3.0       scales_1.0.0       extrafont_0.17    
[33] pkgconfig_2.0.2   
> 
> #cl <- makeCluster(parallel::detectCores())
> cl = "mclapply"
> #cl <- NULL
> 
> set.seed(3)
> 
> TT <- 20
> true_theta <- c(0.5, 0.5)
> lower <- 0
> upper <- 3.5
> sd_t <- 1
> init <- min(rgamma(1, 100, 100), upper - 1)
> a_logit <- 0.9
> dist_coef <- 0.5
> true_states <- generate_state(init, TT, lower, upper, sd_t, a = a_logit)
> 
> y <- hawkes_simulator(true_states[1], true_theta, NULL, 0, 10)
> for(tp in 1:TT){
+   y <- hawkes_simulator(true_states[tp], true_theta, y$history, tp * 10, tp * 10 + 10)
+ }
> 
> y_history <- y$history
> 
> lambda_fun <- stepfun(seq(10, TT*10 - 10, by = 10), y = true_states)
> kern <- function(x){return(decay_func(x, alpha = true_theta[1], delta = true_theta[2]))}
> #
> #y_history <- sim_hawkes(lambda_fun, NULL, kern, 0, TT*10, progressBar = FALSE)
> #y <- hist(y_history, breaks = seq(0, TT*10, by = 10), plot = FALSE)$counts
> 
> hist(y_history, breaks = TT * 10)
> 
> plot(lambda_fun, add = TRUE, col = "red")
> 
> simulator <- hawkes_simulator
> 
> inp <- list(
+   lower = lower,
+   upper = upper,
+   sd_t = sd_t,
+   a_logit = a_logit,
+   history = y_history,
+   simulator = simulator
+ )
> 
> loss = loss_hawkes
> 
> 
> Ntheta = 1000
> Nx = 1000
> pacc = 5e-2
> 
> lower_theta <- c(0.3, 0.3)
> upper_theta <- c(0.7, 0.7)
> 
> trans_args <- list(
+   lower_theta = lower_theta,
+   upper_theta = upper_theta,
+   a = 1
+ )
> 
> prior_sample <- data.frame(theta1 = runif(Ntheta, lower_theta[1], upper_theta[1]), theta2 = runif(Ntheta, lower_theta[2], upper_theta[2]))
> 
> prior_sample <- as.matrix(prior_sample, ncol = 2)
> 
> trans <- function(x, trans_args){
+   theta1 <- gtools::logit(x[,1], min = trans_args$lower[1], max = trans_args$upper[1])
+   theta2 <- gtools::logit(x[,2], min = trans_args$lower[2], max = trans_args$upper[2])
+   return(cbind(theta1, theta2))
+ }
> 
> invtrans <- function(x, trans_args){
+   theta1 <- gtools::inv.logit(trans_args$a * x[,1], min = trans_args$lower[1], max = trans_args$upper[1])
+   theta2 <- gtools::inv.logit(trans_args$a * x[,2], min = trans_args$lower[2], max = trans_args$upper[2])
+   return(cbind(theta1, theta2))
+ }
> 
> full_list <- SMC2_ABC(prior_sample, dprior = dHawkes, loss, loss_args = inp, Ntheta = Ntheta, Nx = Nx, pacc = pacc, cl = cl, dt = 10, ESS_threshold = 0.2, TT = TT, trans = trans, invtrans = invtrans, trans_args = trans_args)
[1] 0.3004481 0.3730207 0.4640798 0.5667193 0.6998184
[1] 0.3002386 0.3912759 0.4991579 0.5920995 0.6995915
[1] "1. 912.577952408695"
[1] 0.3004481 0.3661645 0.4531345 0.5559252 0.6998184
[1] 0.3002386 0.3865797 0.4916133 0.5875197 0.6995915
[1] "2. 859.095987750431"
[1] 0.3004481 0.3606083 0.4328697 0.5348435 0.6998184
[1] 0.3002906 0.3831606 0.4876942 0.5860736 0.6995915
[1] "3. 770.377968773319"
[1] 0.3004481 0.3570337 0.4256049 0.5272392 0.6998184
[1] 0.3002386 0.3735342 0.4790608 0.5800124 0.6995915
[1] "4. 717.883558727374"
[1] 0.3004481 0.3547652 0.4189625 0.5186079 0.6998184
[1] 0.3002386 0.3663651 0.4678765 0.5718453 0.6995915
[1] "5. 663.297245162813"
[1] 0.3004481 0.3508445 0.4146997 0.5119206 0.6998184
[1] 0.3002386 0.3625479 0.4621609 0.5678126 0.6995915
[1] "6. 620.561772749541"
[1] 0.3004481 0.3486922 0.4089788 0.5046825 0.6998184
[1] 0.3002906 0.3583659 0.4518299 0.5646682 0.6995915
[1] "7. 568.428923451151"
[1] 0.3004481 0.3461667 0.3975259 0.4910916 0.6998184
[1] 0.3002386 0.3565642 0.4483914 0.5566262 0.6995915
[1] "8. 519.953750042513"
[1] 0.3004481 0.3537735 0.4158042 0.5093805 0.6998184
[1] 0.3002386 0.3621116 0.4560365 0.5678126 0.6995915
[1] "9. 581.852683820932"
[1] 0.3004527 0.3886091 0.4642330 0.5501166 0.6998184
[1] 0.3002386 0.3552533 0.4364232 0.5438192 0.6995915
[1] "10. 626.471619098108"
[1] 0.3004481 0.3661645 0.4353337 0.5271086 0.6998184
[1] 0.3002906 0.3684703 0.4638794 0.5718453 0.6995915
[1] "11. 612.229055149607"
[1] 0.3004527 0.3883964 0.4638516 0.5495297 0.6998184
[1] 0.3002906 0.3681940 0.4595767 0.5685351 0.6995915
[1] "12. 644.006158150923"
[1] 0.3004527 0.4006817 0.4738976 0.5619845 0.6998184
[1] 0.3002386 0.3619905 0.4436106 0.5528296 0.6995915
[1] "13. 622.746710413574"
[1] 0.3004527 0.3952747 0.4692010 0.5546309 0.6998184
[1] 0.3002386 0.3565642 0.4308404 0.5436122 0.6995915
[1] "14. 580.504199188032"
[1] 0.3004527 0.3932731 0.4688059 0.5546162 0.6998184
[1] 0.3002386 0.3571011 0.4356099 0.5436122 0.6995915
[1] "15. 578.70952321547"
[1] 0.3004527 0.4104689 0.4830477 0.5660035 0.6998184
[1] 0.3002386 0.3576623 0.4344405 0.5404794 0.6995915
[1] "16. 565.288199009092"
[1] 0.3004527 0.3897240 0.4651446 0.5520010 0.6998184
[1] 0.3002386 0.3560597 0.4291453 0.5387605 0.6995915
[1] "17. 532.478184647702"
[1] 0.3004527 0.3895418 0.4644376 0.5495297 0.6998184
[1] 0.3002386 0.3560597 0.4274115 0.5344651 0.6995915
[1] "18. 519.467630172301"
[1] 0.3032790 0.3935024 0.4681613 0.5528564 0.6998184
[1] 0.3002386 0.3529847 0.4206256 0.5285586 0.6995915
[1] "19. 499.177193833566"
[1] 0.3004527 0.3877493 0.4598536 0.5417984 0.6998184
[1] 0.3002386 0.3550573 0.4244400 0.5334209 0.6995915
[1] "20. 480.504129756636"
> 
> state_df <- get_state(full_list, probs = c(0.25, 0.5, 0.75))
> 
> state_df$state <- true_states
> 
> theta_df <- get_parameter(full_list)
> 
> 
> save.image()
> save(state_df, file = "state_df.RData")
> save(theta_df, file = "theta_df.RData")
> 
> 
> 
> ggplot(state_df) + aes(x = time, y = state, ymin = lower, ymax = upper) + geom_step() + geom_ribbon(alpha = 0.2, stat = "stepribbon", fill = "red") + geom_step(mapping = aes(x = time, y = med), col = "red") + ggthemes::theme_base() + scale_y_continuous(expand = c(0, 0)) + scale_x_continuous(expand = c(0, 0))
> 
> ggplot(theta_df[which(theta_df$time %% 5 == 0),]) + aes(x = value, weights = weight, col = factor(time)) + geom_density() + facet_wrap(~parameter, scales = "free")
> 
> proc.time()
     user    system   elapsed 
19674.235   113.177  1524.338 
