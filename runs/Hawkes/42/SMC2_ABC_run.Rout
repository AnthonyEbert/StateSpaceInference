
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> library(parallel)
> library(StateSpaceInference)
> library(ggplot2)
> library(ggalt)
> sessionInfo()
R version 3.5.1 (2018-07-02)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: SUSE Linux Enterprise Server 12 SP2

Matrix products: default
BLAS/LAPACK: /pkg/suse12/software/openblas/0.2.20-gcc-6.4.0-2.28/lib/libopenblas_sandybridgep-r0.2.20.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] parallel  stats     graphics  grDevices utils     datasets  methods  
[8] base     

other attached packages:
[1] ggalt_0.4.0               ggplot2_3.1.0            
[3] StateSpaceInference_1.1.0

loaded via a namespace (and not attached):
 [1] Rcpp_1.0.0         Rttf2pt1_1.3.7     bindr_0.1.1        magrittr_1.5      
 [5] maps_3.3.0         MASS_7.3-51.1      tidyselect_0.2.5   munsell_0.5.0     
 [9] colorspace_1.3-2   R6_2.3.0           rlang_0.3.0.1      plyr_1.8.4        
[13] dplyr_0.7.8        grid_3.5.1         gtable_0.2.0       ash_1.0-15        
[17] KernSmooth_2.23-15 extrafontdb_1.0    withr_2.1.2        proj4_1.0-8       
[21] lazyeval_0.2.1     assertthat_0.2.0   tibble_1.4.2       crayon_1.3.4      
[25] bindrcpp_0.2.2     RColorBrewer_1.1-2 purrr_0.2.5        glue_1.3.0        
[29] compiler_3.5.1     pillar_1.3.0       scales_1.0.0       extrafont_0.17    
[33] pkgconfig_2.0.2   
> 
> #cl <- makeCluster(parallel::detectCores())
> cl = "mclapply"
> #cl <- NULL
> 
> set.seed(3)
> 
> TT <- 20
> true_theta <- c(0.5, 0.5)
> lower <- 0
> upper <- 3.5
> sd_t <- 1
> init <- min(rgamma(1, 100, 100), upper - 1)
> a_logit <- 0.9
> dist_coef <- 0.5
> true_states <- generate_state(init, TT, lower, upper, sd_t, a = a_logit)
> 
> y <- hawkes_simulator(true_states[1], true_theta, NULL, 0, 10)
> for(tp in 1:TT){
+   y <- hawkes_simulator(true_states[tp], true_theta, y$history, tp * 10, tp * 10 + 10)
+ }
> 
> y_history <- y$history
> 
> lambda_fun <- stepfun(seq(10, TT*10 - 10, by = 10), y = true_states)
> kern <- function(x){return(decay_func(x, alpha = true_theta[1], delta = true_theta[2]))}
> #
> #y_history <- sim_hawkes(lambda_fun, NULL, kern, 0, TT*10, progressBar = FALSE)
> #y <- hist(y_history, breaks = seq(0, TT*10, by = 10), plot = FALSE)$counts
> 
> hist(y_history, breaks = TT * 10)
> 
> plot(lambda_fun, add = TRUE, col = "red")
> 
> simulator <- hawkes_simulator
> 
> inp <- list(
+   lower = lower,
+   upper = upper,
+   sd_t = sd_t,
+   a_logit = a_logit,
+   history = y_history,
+   simulator = simulator
+ )
> 
> loss = loss_hawkes
> 
> 
> Ntheta = 200
> Nx = 1000
> pacc = 0.01
> 
> lower_theta <- c(0.3, 0.3)
> upper_theta <- c(0.7, 0.7)
> 
> prior_sample <- data.frame(theta1 = runif(Ntheta, lower_theta[1], upper_theta[1]), theta2 = runif(Ntheta, lower_theta[2], upper_theta[2]))
> 
> prior_sample <- as.matrix(prior_sample, ncol = 2)
> 
> trans <- function(x, trans_args){
+   theta1 <- log(x[,1])
+   theta2 <- log(x[,2])
+   return(cbind(theta1, theta2))
+ }
> 
> invtrans <- function(x, trans_args){
+   theta1 <- exp(x[,1])
+   theta2 <- exp(x[,2])
+   return(cbind(theta1, theta2))
+ }
> 
> full_list <- SMC2_ABC(prior_sample, dprior = dHawkes, loss, loss_args = inp, Ntheta = Ntheta, Nx = Nx, pacc = pacc, cl = cl, dt = 10, ESS_threshold = 0.5, TT = TT, trans = trans, invtrans = invtrans, cov_coef = 0.25^2)
[1] 0.3032790 0.3861122 0.4715161 0.5558874 0.6992435
[1] 0.3053522 0.4027871 0.4906322 0.5754356 0.6998184
[1] "1. 178.20112154524"
[1] 0.3032790 0.3714596 0.4685476 0.5490903 0.6992435
[1] 0.3004527 0.3993414 0.4931651 0.5799561 0.6998184
[1] "2. 160.071246848824"
[1] 0.3032790 0.3619959 0.4510713 0.5404078 0.6992435
[1] 0.3004527 0.3931925 0.4755858 0.5751867 0.6998184
[1] "3. 138.068370623545"
[1] 0.3032790 0.3641403 0.4516118 0.5420154 0.6992435
[1] 0.3004527 0.3931138 0.4635893 0.5706986 0.6998184
[1] "4. 121.749317644903"
[1] 0.3034827 0.3641403 0.4515922 0.5423956 0.6992435
[1] 0.3004527 0.3864838 0.4633271 0.5659415 0.6998184
[1] "5. 112.076548219534"
[1] 0.3034827 0.3620229 0.4500064 0.5369077 0.6992435
[1] 0.3004527 0.3835722 0.4633271 0.5657149 0.6998184
[1] "6. 108.451396165195"
[1] 0.3034827 0.3620229 0.4353337 0.5272094 0.6992435
[1] 0.3004527 0.3964423 0.4633271 0.5650074 0.6998184
[1] "7. 96.2954606243582"
[1] "resample"
[1] 0.2913105 0.3635943 0.4414509 0.5262047 0.7078673
[1] 0.2795399 0.3882445 0.4609687 0.5571821 0.7329041
[1] "SMC:  181.589811704039"
[1] 0.2913105 0.3592523 0.4404819 0.5262047 0.7078673
[1] 0.2795399 0.3877125 0.4594691 0.5571821 0.7329041
[1] "SMC:  165.155421320619"
[1] 0.2913105 0.3505987 0.4321125 0.5007856 0.7078673
[1] 0.2795399 0.3762242 0.4472656 0.5485855 0.7329041
[1] "SMC:  143.998537428322"
[1] 0.2913105 0.3489127 0.4329629 0.4953176 0.7078673
[1] 0.2709246 0.3690250 0.4264245 0.5433156 0.7329041
[1] "SMC:  123.36828973476"
[1] 0.2913105 0.3476652 0.4282706 0.4912489 0.7078673
[1] 0.2795399 0.3686579 0.4255459 0.5316989 0.7329041
[1] "SMC:  107.622130608125"
[1] 0.2913105 0.3481429 0.4295787 0.4912489 0.7078673
[1] 0.2795399 0.3664390 0.4154992 0.5232537 0.7329041
[1] "SMC:  94.3900830862986"
[1] 0.2913105 0.3472106 0.4178956 0.4912489 0.7078673
[1] 0.2795399 0.3664390 0.4145069 0.5196414 0.7329041
[1] "SMC:  71.909365169157"
acceptance rate:  0.625 
[1] 0.3063094 0.3451470 0.3972153 0.4857836 0.6603402
[1] 0.3002307 0.3334296 0.4059493 0.4929798 0.6790593
[1] "8. 179.979368004675"
[1] 0.3063094 0.3481429 0.4102384 0.4912489 0.6603402
[1] 0.3002307 0.3334296 0.4061130 0.4921669 0.6790593
[1] "9. 154.749221659004"
[1] 0.3063094 0.3832549 0.4536155 0.4912489 0.6603402
[1] 0.3002307 0.3274856 0.4059493 0.4405276 0.6790593
[1] "10. 122.217370424121"
[1] 0.3063094 0.3554362 0.4282706 0.4912489 0.6603402
[1] 0.3002307 0.3274856 0.4059493 0.4929798 0.6790593
[1] "11. 117.285208963167"
[1] 0.3063094 0.3824793 0.4536155 0.4912489 0.6603402
[1] 0.3002307 0.3274856 0.4059493 0.4845762 0.6790593
[1] "12. 84.1762649067021"
[1] "resample"
[1] 0.3082126 0.3654048 0.4526072 0.4916759 0.6238159
[1] 0.2781643 0.3320637 0.4005682 0.4970678 0.7733944
[1] "SMC:  180.797907488987"
[1] 0.3082126 0.3739094 0.4549778 0.4915469 0.6238159
[1] 0.2781643 0.3321086 0.3977856 0.5127556 0.7733944
[1] "SMC:  167.147710943745"
[1] 0.3046208 0.3611826 0.4464078 0.4905929 0.6238159
[1] 0.2781643 0.3293491 0.3905409 0.4449957 0.7733944
[1] "SMC:  148.917521181285"
[1] 0.3046208 0.3629685 0.4549778 0.4887261 0.6238159
[1] 0.2781643 0.3217860 0.3814018 0.4399342 0.7733944
[1] "SMC:  134.063007807956"
[1] 0.3082126 0.3621058 0.4410242 0.4877730 0.6238159
[1] 0.2781643 0.3221775 0.3812502 0.4361199 0.7733944
[1] "SMC:  126.863072082326"
[1] 0.3082126 0.3651173 0.4418331 0.4872507 0.6238159
[1] 0.2857041 0.3206115 0.3801702 0.4331686 0.7733944
[1] "SMC:  112.100529064654"
[1] 0.3046208 0.3607917 0.4342115 0.4853708 0.6238159
[1] 0.2857041 0.3293491 0.3859709 0.4361199 0.7733944
[1] "SMC:  98.6153243714886"
[1] 0.3046208 0.3607917 0.4342115 0.4873508 0.6238159
[1] 0.2857041 0.3293491 0.3853377 0.4361199 0.7733944
[1] "SMC:  93.2023417192379"
[1] 0.3046208 0.3674870 0.4572755 0.4886323 0.6238159
[1] 0.2781643 0.3199389 0.3772976 0.4309271 0.7733944
[1] "SMC:  88.887204754597"
[1] 0.3082126 0.3900721 0.4718782 0.4913533 0.6238159
[1] 0.2781643 0.3185095 0.3732009 0.4177676 0.7733944
[1] "SMC:  62.12181488756"
[1] 0.3082126 0.3796420 0.4591322 0.4886323 0.6238159
[1] 0.2781643 0.3293491 0.3772976 0.4274513 0.7733944
[1] "SMC:  63.8604137721022"
[1] 0.3082126 0.3861949 0.4703633 0.4927154 0.6238159
[1] 0.2781643 0.3185095 0.3732009 0.4272386 0.7733944
[1] "SMC:  55.9761417643846"
acceptance rate:  0.45 
[1] 0.3150539 0.4276112 0.4703633 0.4912489 0.5980904
[1] 0.3073344 0.3274856 0.3346549 0.4012348 0.6790593
[1] "13. 177.050674331196"
[1] 0.3150539 0.4339457 0.4783173 0.4912489 0.5980904
[1] 0.3073344 0.3274856 0.3274856 0.3883584 0.6790593
[1] "14. 156.803319492013"
[1] 0.3150539 0.4339457 0.4828973 0.4912489 0.5980904
[1] 0.3073344 0.3274856 0.3274856 0.3902959 0.6790593
[1] "15. 142.524610966899"
[1] 0.3150539 0.4509826 0.4890073 0.4912489 0.5980904
[1] 0.3073344 0.3267862 0.3274856 0.3866040 0.6790593
[1] "16. 120.377324764987"
[1] 0.3150539 0.4370755 0.4873954 0.4912489 0.5980904
[1] 0.3073344 0.3274856 0.3274856 0.3902959 0.6790593
[1] "17. 115.682576689177"
[1] 0.3150539 0.4500064 0.4890073 0.4912489 0.5980904
[1] 0.3073344 0.3246880 0.3274856 0.3868812 0.6790593
[1] "18. 102.386359248843"
[1] 0.3150539 0.4500064 0.4890073 0.4912489 0.5980904
[1] 0.3073344 0.3221775 0.3274856 0.3796242 0.6790593
[1] "19. 86.4493667928164"
[1] "resample"
[1] 0.3143551 0.4406891 0.4768781 0.4962079 0.5444241
[1] 0.2875630 0.3144955 0.3378768 0.3872666 0.6869927
[1] "SMC:  182.781071752952"
[1] 0.3157498 0.4394433 0.4762632 0.4972979 0.5444241
[1] 0.2892662 0.3167406 0.3387263 0.3872666 0.6869927
[1] "SMC:  162.795880576988"
[1] 0.3157498 0.4276565 0.4745993 0.4978983 0.5444241
[1] 0.2875630 0.3165158 0.3387263 0.3872666 0.6869927
[1] "SMC:  146.789593565884"
[1] 0.3157498 0.4252460 0.4745993 0.4982828 0.5444241
[1] 0.2875630 0.3156900 0.3383530 0.3872846 0.6869927
[1] "SMC:  135.019741605384"
[1] 0.3157498 0.4160498 0.4725455 0.4992560 0.5444241
[1] 0.2875630 0.3165158 0.3388005 0.3934080 0.6869927
[1] "SMC:  114.855062620482"
[1] 0.3157498 0.4066509 0.4707606 0.4995216 0.5444241
[1] 0.2875630 0.3165158 0.3388439 0.3934080 0.6869927
[1] "SMC:  103.370620559203"
[1] 0.3157498 0.3969030 0.4656774 0.4992302 0.5444241
[1] 0.2875630 0.3167406 0.3430611 0.4063956 0.6869927
[1] "SMC:  88.2520928734889"
[1] 0.3157498 0.3938990 0.4637045 0.4971593 0.5444241
[1] 0.2875630 0.3131395 0.3430611 0.4063487 0.6869927
[1] "SMC:  83.958871011807"
[1] 0.3157498 0.4066509 0.4655346 0.4976797 0.5444241
[1] 0.2892662 0.3132632 0.3394217 0.3960023 0.6869927
[1] "SMC:  82.1386208923253"
[1] 0.3333816 0.4461411 0.4799038 0.5045970 0.5444241
[1] 0.2892662 0.3076856 0.3284185 0.3805997 0.6869927
[1] "SMC:  65.0910473383897"
[1] 0.3333816 0.4178214 0.4669890 0.4992302 0.5444241
[1] 0.2892662 0.3117907 0.3400899 0.3878161 0.6869927
[1] "SMC:  68.4052342218829"
[1] 0.3333816 0.4406322 0.4732635 0.5023149 0.5444241
[1] 0.2892662 0.3167406 0.3430611 0.3877981 0.6869927
[1] "SMC:  57.0269770789219"
[1] 0.3333816 0.4485156 0.4738711 0.5043930 0.5444241
[1] 0.2892662 0.3151234 0.3390006 0.3871074 0.6869927
[1] "SMC:  51.5666923289633"
[1] 0.3333816 0.4485156 0.4769394 0.5068376 0.5444241
[1] 0.2892662 0.3113482 0.3395473 0.3843425 0.6869927
[1] "SMC:  39.3267395723888"
[1] 0.3333816 0.4485156 0.4733556 0.5045970 0.5444241
[1] 0.2892662 0.3114832 0.3394648 0.3815466 0.6869927
[1] "SMC:  36.0805256361933"
[1] 0.3453935 0.4485156 0.4793080 0.5066360 0.5444241
[1] 0.2892662 0.3112105 0.3421952 0.3815466 0.6869927
[1] "SMC:  29.9852425922079"
[1] 0.3453935 0.4485156 0.4791082 0.5058691 0.5444241
[1] 0.2892662 0.3112105 0.3430611 0.3815466 0.6869927
[1] "SMC:  25.5255101093959"
[1] 0.3453935 0.4485156 0.4770308 0.5045970 0.5444241
[1] 0.2892662 0.3113033 0.3421952 0.3815466 0.6869927
[1] "SMC:  29.4293459020816"
[1] 0.3453935 0.4485156 0.4769394 0.5044112 0.5444241
[1] 0.2892662 0.3104771 0.3374274 0.3826668 0.6869927
[1] "SMC:  34.325182199229"
acceptance rate:  0.375 
[1] 0.3453935 0.4669890 0.4912489 0.5043930 0.5208455
[1] 0.3074262 0.3167441 0.3274856 0.3732009 0.6334450
[1] "20. 180.368530113969"
> 
> state_df <- get_state(full_list, probs = c(0.25, 0.5, 0.75))
> 
> state_df$state <- true_states
> 
> theta_df <- get_parameter(full_list)
> 
> 
> save.image()
> save(state_df, file = "state_df.RData")
> save(theta_df, file = "theta_df.RData")
> 
> 
> 
> ggplot(state_df) + aes(x = time, y = state, ymin = lower, ymax = upper) + geom_step() + geom_ribbon(alpha = 0.2, stat = "stepribbon", fill = "red") + geom_step(mapping = aes(x = time, y = med), col = "red") + ggthemes::theme_base() + scale_y_continuous(expand = c(0, 0)) + scale_x_continuous(expand = c(0, 0))
> 
> ggplot(theta_df[which(theta_df$time %% 5 == 0),]) + aes(x = value, weights = weight, col = factor(time)) + geom_density() + facet_wrap(~parameter, scales = "free")
> 
> proc.time()
    user   system  elapsed 
9986.187  186.280  704.356 
