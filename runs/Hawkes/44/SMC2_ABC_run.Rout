
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> library(parallel)
> library(StateSpaceInference)
> library(ggplot2)
> library(ggalt)
> sessionInfo()
R version 3.5.1 (2018-07-02)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: SUSE Linux Enterprise Server 12 SP2

Matrix products: default
BLAS/LAPACK: /pkg/suse12/software/openblas/0.2.20-gcc-6.4.0-2.28/lib/libopenblas_sandybridgep-r0.2.20.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] parallel  stats     graphics  grDevices utils     datasets  methods  
[8] base     

other attached packages:
[1] ggalt_0.4.0               ggplot2_3.1.0            
[3] StateSpaceInference_1.1.0

loaded via a namespace (and not attached):
 [1] Rcpp_1.0.0         Rttf2pt1_1.3.7     bindr_0.1.1        magrittr_1.5      
 [5] maps_3.3.0         MASS_7.3-51.1      tidyselect_0.2.5   munsell_0.5.0     
 [9] colorspace_1.3-2   R6_2.3.0           rlang_0.3.0.1      plyr_1.8.4        
[13] dplyr_0.7.8        grid_3.5.1         gtable_0.2.0       ash_1.0-15        
[17] KernSmooth_2.23-15 extrafontdb_1.0    withr_2.1.2        proj4_1.0-8       
[21] lazyeval_0.2.1     assertthat_0.2.0   tibble_1.4.2       crayon_1.3.4      
[25] bindrcpp_0.2.2     RColorBrewer_1.1-2 purrr_0.2.5        glue_1.3.0        
[29] compiler_3.5.1     pillar_1.3.0       scales_1.0.0       extrafont_0.17    
[33] pkgconfig_2.0.2   
> 
> #cl <- makeCluster(parallel::detectCores())
> cl = "mclapply"
> #cl <- NULL
> 
> set.seed(3)
> 
> TT <- 20
> true_theta <- c(0.5, 0.5)
> lower <- 0
> upper <- 3.5
> sd_t <- 1
> init <- min(rgamma(1, 100, 100), upper - 1)
> a_logit <- 0.9
> dist_coef <- 0.5
> true_states <- generate_state(init, TT, lower, upper, sd_t, a = a_logit)
> 
> y <- hawkes_simulator(true_states[1], true_theta, NULL, 0, 10)
> for(tp in 1:TT){
+   y <- hawkes_simulator(true_states[tp], true_theta, y$history, tp * 10, tp * 10 + 10)
+ }
> 
> y_history <- y$history
> 
> lambda_fun <- stepfun(seq(10, TT*10 - 10, by = 10), y = true_states)
> kern <- function(x){return(decay_func(x, alpha = true_theta[1], delta = true_theta[2]))}
> #
> #y_history <- sim_hawkes(lambda_fun, NULL, kern, 0, TT*10, progressBar = FALSE)
> #y <- hist(y_history, breaks = seq(0, TT*10, by = 10), plot = FALSE)$counts
> 
> hist(y_history, breaks = TT * 10)
> 
> plot(lambda_fun, add = TRUE, col = "red")
> 
> simulator <- hawkes_simulator
> 
> inp <- list(
+   lower = lower,
+   upper = upper,
+   sd_t = sd_t,
+   a_logit = a_logit,
+   history = y_history,
+   simulator = simulator
+ )
> 
> loss = loss_hawkes
> 
> 
> Ntheta = 200
> Nx = 10000
> pacc = 0.0005
> 
> lower_theta <- c(0.3, 0.3)
> upper_theta <- c(0.7, 0.7)
> 
> prior_sample <- data.frame(theta1 = runif(Ntheta, lower_theta[1], upper_theta[1]), theta2 = runif(Ntheta, lower_theta[2], upper_theta[2]))
> 
> prior_sample <- as.matrix(prior_sample, ncol = 2)
> 
> trans <- function(x, trans_args){
+   theta1 <- log(x[,1])
+   theta2 <- log(x[,2])
+   return(cbind(theta1, theta2))
+ }
> 
> invtrans <- function(x, trans_args){
+   theta1 <- exp(x[,1])
+   theta2 <- exp(x[,2])
+   return(cbind(theta1, theta2))
+ }
> 
> full_list <- SMC2_ABC(prior_sample, dprior = dHawkes, loss, loss_args = inp, Ntheta = Ntheta, Nx = Nx, pacc = pacc, cl = cl, dt = 10, ESS_threshold = 0.5, TT = TT, trans = trans, invtrans = invtrans, cov_coef = 0.25^2)
[1] 0.3032790 0.3986902 0.4865569 0.5775165 0.6992435
[1] 0.3053522 0.4067680 0.4965752 0.5799744 0.6998184
[1] "1. 164.884153365147"
[1] 0.3032790 0.3990918 0.4857836 0.5711824 0.6992435
[1] 0.3004527 0.3993414 0.4965752 0.5799806 0.6998184
[1] "2. 141.102217317373"
[1] 0.3032790 0.3932999 0.4664185 0.5530457 0.6992435
[1] 0.3004527 0.3800425 0.4744789 0.5643182 0.6998184
[1] "3. 108.349761461655"
[1] 0.3032790 0.3868122 0.4603052 0.5418823 0.6992435
[1] 0.3004527 0.3731708 0.4714222 0.5643182 0.6998184
[1] "4. 92.0824046537238"
[1] "resample"
[1] 0.2834300 0.3913399 0.4719676 0.5520459 0.7346876
[1] 0.2948043 0.3768297 0.4844140 0.5608676 0.7472560
[1] "SMC:  166.758873929009"
[1] 0.2761686 0.3823817 0.4689128 0.5453384 0.7346876
[1] 0.2948043 0.3815081 0.4868114 0.5724303 0.7472560
[1] "SMC:  140.304455413194"
[1] 0.2761686 0.3523776 0.4374819 0.5317192 0.7346876
[1] 0.2959376 0.3768297 0.4801442 0.5566506 0.7472560
[1] "SMC:  106.361307922192"
[1] 0.2761686 0.3484686 0.4278559 0.5275536 0.7346876
[1] 0.2959376 0.3768297 0.4591854 0.5593228 0.7472560
[1] "SMC:  101.050413188925"
acceptance rate:  0.575 
[1] 0.3034827 0.3312588 0.4254190 0.5027490 0.6807927
[1] 0.3004527 0.3768297 0.4550263 0.5618113 0.6741975
[1] "5. 165.48323699422"
[1] 0.3034827 0.3277725 0.4251567 0.4943349 0.6807927
[1] 0.3004527 0.3768297 0.4571297 0.5593228 0.6741975
[1] "6. 141.358143701442"
[1] 0.3034827 0.3277725 0.4184165 0.4782368 0.6807927
[1] 0.3004527 0.3768297 0.4591854 0.5630556 0.6741975
[1] "7. 114.60061913177"
[1] 0.3034827 0.3269263 0.3959951 0.4608547 0.6807927
[1] 0.3004527 0.3768297 0.4766928 0.5642999 0.6741975
[1] "8. 79.1180002115088"
[1] "resample"
[1] 0.2846198 0.3244895 0.3785650 0.4822901 0.6475282
[1] 0.2785276 0.3792087 0.4933080 0.5741562 0.7603024
[1] "SMC:  169.999850679409"
[1] 0.2846198 0.3246905 0.3709086 0.4736325 0.6475282
[1] 0.2785276 0.3721576 0.4871908 0.5716473 0.7603024
[1] "SMC:  144.671217918094"
[1] 0.2870092 0.3241678 0.3486696 0.4579415 0.6475282
[1] 0.2785276 0.3721576 0.4753808 0.5645757 0.7603024
[1] "SMC:  117.318610969633"
[1] 0.2870092 0.3248780 0.3836605 0.4755207 0.6475282
[1] 0.2785276 0.3686341 0.4552350 0.5576241 0.7603024
[1] "SMC:  84.7881478051315"
[1] 0.2870092 0.3241678 0.3648082 0.4755207 0.6475282
[1] 0.2785276 0.3673174 0.4552350 0.5570179 0.7603024
[1] "SMC:  82.9886485489817"
[1] 0.2870092 0.3245698 0.3484624 0.4616484 0.6475282
[1] 0.2785276 0.3683455 0.4552350 0.5602932 0.7603024
[1] "SMC:  63.184229766816"
[1] 0.2870092 0.3249717 0.3479960 0.4569649 0.6475282
[1] 0.2785276 0.3714166 0.4378196 0.5478952 0.7603024
[1] "SMC:  44.3510173792752"
[1] 0.2870092 0.3241678 0.3437127 0.4439017 0.6475282
[1] 0.2785276 0.3799870 0.4378196 0.5476682 0.7603024
[1] "SMC:  38.7990872527698"
acceptance rate:  0.595 
[1] 0.3039932 0.3160920 0.3451347 0.4254190 0.5835930
[1] 0.3004527 0.3792087 0.3931835 0.4969411 0.6655420
[1] "9. 156.68506645817"
[1] 0.3039932 0.3319003 0.4204594 0.5210489 0.5835930
[1] 0.3004527 0.3662733 0.3931835 0.4552350 0.6655420
[1] "10. 106.734962925779"
[1] 0.3039932 0.3241678 0.4181992 0.4254190 0.5835930
[1] 0.3004527 0.3792087 0.3931835 0.4969411 0.6655420
[1] "11. 104.033471204885"
[1] 0.3039932 0.3249717 0.4204594 0.4264920 0.5835930
[1] 0.3004527 0.3792087 0.4378196 0.5013361 0.6655420
[1] "12. 65.2960094774858"
[1] "resample"
[1] 0.2796993 0.3255520 0.4054995 0.4453660 0.6281540
[1] 0.2798611 0.3705607 0.4042002 0.4904388 0.7590385
[1] "SMC:  168.659418320196"
[1] 0.2796993 0.3247020 0.4035427 0.4468478 0.6281540
[1] 0.2815407 0.3683443 0.4035039 0.5011397 0.7590385
[1] "SMC:  137.990402506604"
[1] 0.2796993 0.3237123 0.3989527 0.4461475 0.6281540
[1] 0.2815407 0.3617581 0.3993388 0.4751472 0.7590385
[1] "SMC:  122.182721689496"
[1] 0.2864683 0.3227435 0.3925482 0.4447603 0.6281540
[1] 0.2815407 0.3648342 0.4016949 0.5137326 0.7590385
[1] "SMC:  86.6062562786931"
[1] 0.2864683 0.3215421 0.3908471 0.4463226 0.6281540
[1] 0.2815407 0.3640652 0.4011326 0.5037401 0.7590385
[1] "SMC:  90.5618504894751"
[1] 0.2796993 0.3218027 0.3905192 0.4503004 0.6281540
[1] 0.2815407 0.3603006 0.3963024 0.5037401 0.7590385
[1] "SMC:  64.2172822128753"
[1] 0.2796993 0.3218027 0.3853570 0.4437478 0.6281540
[1] 0.2820786 0.3705607 0.3974917 0.5332358 0.7590385
[1] "SMC:  49.2561558852055"
[1] 0.2796993 0.3212196 0.3798928 0.4288658 0.6281540
[1] 0.2815407 0.3727992 0.3963024 0.5062382 0.7590385
[1] "SMC:  36.5520509901614"
[1] 0.2796993 0.3212196 0.3897394 0.4421399 0.6281540
[1] 0.2798611 0.3711301 0.4182035 0.5471462 0.7590385
[1] "SMC:  28.2692975771138"
[1] 0.2937874 0.3853570 0.4166968 0.5219063 0.6281540
[1] 0.2764845 0.3323352 0.3902539 0.4618661 0.7590385
[1] "SMC:  23.7304682402682"
[1] 0.2796993 0.3313903 0.3958698 0.4970023 0.6281540
[1] 0.2820786 0.3563483 0.4117145 0.4825676 0.7590385
[1] "SMC:  24.2593784415957"
[1] 0.2940074 0.3925482 0.3987369 0.5137070 0.6149267
[1] 0.2764845 0.3485020 0.4272679 0.4618661 0.7590385
[1] "SMC:  14.5411366410014"
acceptance rate:  0.53 
[1] 0.3034589 0.3958698 0.3958698 0.4254190 0.6022118
[1] 0.3004527 0.3798053 0.4618661 0.4618661 0.6002446
[1] "13. 161.848005168793"
[1] 0.3034589 0.3958698 0.3958698 0.4254190 0.6022118
[1] 0.3004527 0.3804019 0.4618661 0.4618661 0.6002446
[1] "14. 141.875510630724"
[1] 0.3034589 0.3958698 0.3958698 0.4237492 0.6022118
[1] 0.3004527 0.3804019 0.4618661 0.4618661 0.6002446
[1] "15. 108.437736224251"
[1] 0.3034589 0.3958698 0.3958698 0.4268400 0.6022118
[1] 0.3004527 0.3768297 0.4618661 0.4618661 0.6002446
[1] "16. 90.506334929739"
[1] "resample"
[1] 0.2938887 0.3644436 0.3965082 0.4295643 0.6049456
[1] 0.2746404 0.3708289 0.4410170 0.4728741 0.5529467
[1] "SMC:  170.989456908177"
[1] 0.2938887 0.3665100 0.3999716 0.4337140 0.6049456
[1] 0.2800848 0.3662344 0.4389062 0.4733008 0.5529467
[1] "SMC:  147.248374945247"
[1] 0.2938887 0.3572292 0.3942036 0.4256224 0.6049456
[1] 0.2800848 0.3774947 0.4432242 0.4736664 0.5529467
[1] "SMC:  129.227401079734"
[1] 0.2938887 0.3558524 0.3942036 0.4257360 0.6049456
[1] 0.2800848 0.3791884 0.4441136 0.4742453 0.5529467
[1] "SMC:  106.154610475164"
[1] 0.2938887 0.3536218 0.3934851 0.4240647 0.6049456
[1] 0.2800848 0.3794283 0.4444146 0.4743212 0.5529467
[1] "SMC:  91.6027576490432"
[1] 0.2938887 0.3534944 0.3951592 0.4257360 0.6049456
[1] 0.2800848 0.3765404 0.4444146 0.4757126 0.5529467
[1] "SMC:  80.2254062311251"
[1] 0.2938887 0.3537492 0.3933425 0.4230393 0.6049456
[1] 0.2800848 0.3784491 0.4506369 0.4831761 0.5529467
[1] "SMC:  64.1049839332516"
[1] 0.3005138 0.3535738 0.3934138 0.4102449 0.6049456
[1] 0.2800848 0.3796682 0.4444146 0.4808115 0.5529467
[1] "SMC:  64.7378590886057"
[1] 0.2964505 0.3651682 0.4001088 0.4258103 0.6049456
[1] 0.2800848 0.3788138 0.4573823 0.4807321 0.5529467
[1] "SMC:  54.8324687624045"
[1] 0.3005138 0.3866892 0.4069213 0.4645800 0.6049456
[1] 0.2800848 0.3522207 0.4556670 0.4758695 0.5529467
[1] "SMC:  38.0330510971664"
[1] 0.3005138 0.3724041 0.4016569 0.4504209 0.6049456
[1] 0.2800848 0.3657086 0.4581546 0.4804938 0.5529467
[1] "SMC:  42.5694605821328"
[1] 0.3062662 0.3781345 0.4044120 0.4504209 0.6049456
[1] 0.2800848 0.3790662 0.4653837 0.4772838 0.5529467
[1] "SMC:  32.0798817071045"
[1] 0.3062662 0.3724041 0.4044120 0.4504892 0.6049456
[1] 0.2906053 0.3914626 0.4656018 0.4919085 0.5529467
[1] "SMC:  31.7127002872824"
[1] 0.3062662 0.3724041 0.4044120 0.4293781 0.6049456
[1] 0.2800848 0.3952390 0.4658199 0.4899858 0.5529467
[1] "SMC:  23.0209177816648"
[1] 0.3062662 0.3724041 0.4016569 0.4504209 0.6049456
[1] 0.2800848 0.3693648 0.4658199 0.4919085 0.5529467
[1] "SMC:  21.65221120094"
[1] 0.3062662 0.3724041 0.4044120 0.4504209 0.6049456
[1] 0.2746404 0.3628891 0.4653837 0.4919085 0.5529467
[1] "SMC:  19.7254352769225"
acceptance rate:  0.37 
[1] 0.3057085 0.3724041 0.3958698 0.4204594 0.5811107
[1] 0.3004527 0.3931835 0.4618661 0.4716370 0.5321840
[1] "17. 167.530680488213"
[1] 0.3057085 0.3724041 0.3958698 0.4204594 0.5811107
[1] 0.3004527 0.3952390 0.4618661 0.4727086 0.5321840
[1] "18. 141.379917500141"
[1] 0.3057085 0.3724041 0.3958698 0.4204594 0.5811107
[1] 0.3004527 0.3931835 0.4618661 0.4742106 0.5321840
[1] "19. 118.155863125359"
[1] 0.3057085 0.3724041 0.3958698 0.4204594 0.5811107
[1] 0.3004527 0.3952390 0.4618661 0.4757126 0.5321840
[1] "20. 108.08331089993"
> 
> state_df <- get_state(full_list, probs = c(0.25, 0.5, 0.75))
> 
> state_df$state <- true_states
> 
> theta_df <- get_parameter(full_list)
> 
> 
> save.image()
> save(state_df, file = "state_df.RData")
> save(theta_df, file = "theta_df.RData")
> 
> 
> 
> ggplot(state_df) + aes(x = time, y = state, ymin = lower, ymax = upper) + geom_step() + geom_ribbon(alpha = 0.2, stat = "stepribbon", fill = "red") + geom_step(mapping = aes(x = time, y = med), col = "red") + ggthemes::theme_base() + scale_y_continuous(expand = c(0, 0)) + scale_x_continuous(expand = c(0, 0))
> 
> ggplot(theta_df[which(theta_df$time %% 5 == 0),]) + aes(x = value, weights = weight, col = factor(time)) + geom_density() + facet_wrap(~parameter, scales = "free")
> 
> proc.time()
     user    system   elapsed 
92785.887   707.438  6563.362 
