
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> library(parallel)
> library(StateSpaceInference)
> library(ggplot2)
> library(ggalt)
> sessionInfo()
R version 3.5.1 (2018-07-02)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: SUSE Linux Enterprise Server 12 SP2

Matrix products: default
BLAS/LAPACK: /pkg/suse12/software/openblas/0.2.20-gcc-6.4.0-2.28/lib/libopenblas_sandybridgep-r0.2.20.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] parallel  stats     graphics  grDevices utils     datasets  methods  
[8] base     

other attached packages:
[1] ggalt_0.4.0               ggplot2_3.1.0            
[3] StateSpaceInference_0.5.0

loaded via a namespace (and not attached):
 [1] Rcpp_1.0.0         Rttf2pt1_1.3.7     bindr_0.1.1        magrittr_1.5      
 [5] maps_3.3.0         MASS_7.3-51.1      tidyselect_0.2.5   munsell_0.5.0     
 [9] colorspace_1.3-2   R6_2.3.0           rlang_0.3.0.1      plyr_1.8.4        
[13] dplyr_0.7.8        grid_3.5.1         gtable_0.2.0       ash_1.0-15        
[17] KernSmooth_2.23-15 extrafontdb_1.0    withr_2.1.2        proj4_1.0-8       
[21] lazyeval_0.2.1     assertthat_0.2.0   tibble_1.4.2       crayon_1.3.4      
[25] bindrcpp_0.2.2     RColorBrewer_1.1-2 purrr_0.2.5        glue_1.3.0        
[29] compiler_3.5.1     pillar_1.3.0       scales_1.0.0       extrafont_0.17    
[33] pkgconfig_2.0.2   
> 
> #cl <- makeCluster(parallel::detectCores())
> cl = "mclapply"
> #cl <- NULL
> 
> set.seed(3)
> 
> TT <- 20
> true_theta <- c(0.5, 0.5)
> lower <- 0
> upper <- 3.5
> sd_t <- 1
> init <- min(rgamma(1, 100, 100), upper - 1)
> a_logit <- 0.9
> dist_coef <- 0.5
> true_states <- generate_state(init, TT, lower, upper, sd_t, a = a_logit)
> 
> y <- hawkes_simulator(true_states[1], true_theta, NULL, 0, 10)
> for(tp in 1:TT){
+   y <- hawkes_simulator(true_states[tp], true_theta, y$history, tp * 10, tp * 10 + 10)
+ }
> 
> y_history <- y$history
> 
> lambda_fun <- stepfun(seq(10, TT*10 - 10, by = 10), y = true_states)
> kern <- function(x){return(decay_func(x, alpha = true_theta[1], delta = true_theta[2]))}
> #
> #y_history <- sim_hawkes(lambda_fun, NULL, kern, 0, TT*10, progressBar = FALSE)
> #y <- hist(y_history, breaks = seq(0, TT*10, by = 10), plot = FALSE)$counts
> 
> hist(y_history, breaks = TT * 10)
> 
> plot(lambda_fun, add = TRUE, col = "red")
> 
> simulator <- hawkes_simulator
> 
> inp <- list(
+   lower = lower,
+   upper = upper,
+   sd_t = sd_t,
+   a_logit = a_logit,
+   history = y_history,
+   simulator = simulator
+ )
> 
> loss = loss_hawkes
> 
> 
> Ntheta = 100
> Nx = 100000
> pacc = 5e-5
> 
> lower_theta <- c(0.3, 0.3)
> upper_theta <- c(0.7, 0.7)
> 
> trans_args <- list(
+   lower_theta = lower_theta,
+   upper_theta = upper_theta,
+   a = 1
+ )
> 
> prior_sample <- data.frame(theta1 = runif(Ntheta, lower_theta[1], upper_theta[1]), theta2 = runif(Ntheta, lower_theta[2], upper_theta[2]))
> 
> prior_sample <- as.matrix(prior_sample, ncol = 2)
> 
> trans <- function(x, trans_args){
+   theta1 <- gtools::logit(x[,1], min = trans_args$lower[1], max = trans_args$upper[1])
+   theta2 <- gtools::logit(x[,2], min = trans_args$lower[2], max = trans_args$upper[2])
+   return(cbind(theta1, theta2))
+ }
> 
> invtrans <- function(x, trans_args){
+   theta1 <- gtools::inv.logit(trans_args$a * x[,1], min = trans_args$lower[1], max = trans_args$upper[1])
+   theta2 <- gtools::inv.logit(trans_args$a * x[,2], min = trans_args$lower[2], max = trans_args$upper[2])
+   return(cbind(theta1, theta2))
+ }
> 
> full_list <- SMC2_ABC(prior_sample, dprior = dHawkes, loss, loss_args = inp, Ntheta = Ntheta, Nx = Nx, pacc = pacc, cl = cl, dt = 10, ESS_threshold = 0.2, TT = TT, trans = trans, invtrans = invtrans, trans_args = trans_args)
[1] 0.3032790 0.3924632 0.4829467 0.5772563 0.6901670
[1] 0.3034827 0.4247646 0.5096757 0.5905663 0.6992435
[1] "1. 89.6624124513619"
[1] 0.3032790 0.3981375 0.4706766 0.5772563 0.6901670
[1] 0.3034827 0.4500064 0.5143225 0.6102136 0.6992435
[1] "2. 73.4033914580003"
[1] 0.3032790 0.3674024 0.4479372 0.5325091 0.6901670
[1] 0.3067442 0.4237152 0.5107901 0.6108635 0.6992435
[1] "3. 62.6704221766308"
[1] 0.3032790 0.3331418 0.4343634 0.5255664 0.6901670
[1] 0.3067442 0.4231247 0.5056103 0.6121635 0.6992435
[1] "4. 45.0090942122766"
[1] 0.3032790 0.3307000 0.4323463 0.5161309 0.6901670
[1] 0.3067442 0.4255845 0.5056899 0.6205713 0.6992435
[1] "5. 36.0505229929048"
[1] 0.3103108 0.3555268 0.4333930 0.4863836 0.6901670
[1] 0.3116785 0.4409019 0.5397596 0.6661988 0.6992435
[1] "6. 25.219814461004"
[1] 0.3086144 0.3555268 0.4343634 0.4796830 0.6901670
[1] 0.3067442 0.4516118 0.5400837 0.6661988 0.6992435
[1] "7. 20.131093643113"
[1] 0.3103108 0.3630426 0.4369225 0.4706766 0.6901670
[1] 0.3034827 0.4516118 0.5404078 0.6707575 0.6992435
[1] "8. 17.3411131727678"
[1] "resample"
[1] 0.3019282 0.3446374 0.4275553 0.5246319 0.6923784
[1] 0.3004125 0.4145124 0.5370518 0.6729383 0.6996879
[1] "SMC:  89.1072928004976"
[1] 0.3019282 0.3383054 0.4239121 0.5237740 0.6923784
[1] 0.3005474 0.4425532 0.5451880 0.6748093 0.6996879
[1] "SMC:  76.7588994032311"
[1] 0.3019282 0.3322561 0.4046995 0.5148150 0.6923784
[1] 0.3005474 0.4317645 0.5376829 0.6676641 0.6996879
[1] "SMC:  60.1179190097387"
[1] 0.3019282 0.3372052 0.4027553 0.5092618 0.6923784
[1] 0.3005474 0.3874832 0.5376829 0.6565595 0.6996879
[1] "SMC:  48.5022669071221"
[1] 0.3038774 0.3374268 0.4027553 0.5035710 0.6923784
[1] 0.3005474 0.3834383 0.5307277 0.6676641 0.6996879
[1] "SMC:  46.7070016593637"
[1] 0.3013886 0.3267941 0.3745611 0.4818842 0.6923784
[1] 0.3005474 0.3725305 0.5307277 0.6676641 0.6996879
[1] "SMC:  37.1419851119476"
[1] 0.3013886 0.3267941 0.3468543 0.4596811 0.6923784
[1] 0.3005474 0.4377377 0.5529009 0.6690416 0.6996879
[1] "SMC:  27.2689722611876"
[1] 0.3013886 0.3267941 0.3468543 0.4344427 0.6923784
[1] 0.3005474 0.4562811 0.5529009 0.6866978 0.6996879
[1] "SMC:  20.223692657854"
acceptance rate:  0.73 
[1] 0.3038774 0.3267941 0.3663881 0.4457759 0.6149514
[1] 0.3004280 0.5169404 0.5529009 0.6866978 0.6996879
[1] "9. 82.6719576719577"
[1] 0.3038774 0.3468543 0.4302574 0.4706766 0.6149514
[1] 0.3004280 0.4761050 0.6185040 0.6882182 0.6996879
[1] "10. 53.3245918775171"
[1] 0.3038774 0.3269263 0.3745611 0.4500353 0.6149514
[1] 0.3004280 0.5169193 0.5529009 0.6866978 0.6996879
[1] "11. 49.0106014671287"
[1] 0.3140989 0.4023826 0.4443561 0.4706766 0.6149514
[1] 0.3004280 0.5368449 0.6565595 0.6882182 0.6996879
[1] "12. 25.6961297576336"
[1] 0.3239900 0.4284078 0.4500353 0.4706766 0.6149514
[1] 0.3004280 0.5529009 0.6882182 0.6882182 0.6996879
[1] "13. 18.9149933910579"
[1] "resample"
[1] 0.3013573 0.3811927 0.4463516 0.4913163 0.6524133
[1] 0.3004970 0.4839172 0.6534423 0.6982940 0.6999893
[1] "SMC:  87.3357063755735"
[1] 0.3013573 0.3815370 0.4412135 0.4913163 0.6524133
[1] 0.3003488 0.4585845 0.6422164 0.6982971 0.6999893
[1] "SMC:  73.6591257936231"
[1] 0.3013573 0.3681257 0.4194716 0.4796554 0.6524133
[1] 0.3003488 0.4037660 0.6132799 0.6982940 0.6999893
[1] "SMC:  55.6377767396677"
[1] 0.3013573 0.3681257 0.4208695 0.4787255 0.6524133
[1] 0.3003488 0.3976946 0.6132799 0.6978922 0.6999893
[1] "SMC:  45.6400512963271"
[1] 0.3013573 0.3589818 0.4133473 0.4784296 0.6524133
[1] 0.3003488 0.4255768 0.6210954 0.6982933 0.6999893
[1] "SMC:  45.4942093500478"
[1] 0.3013573 0.3509788 0.4090048 0.4745551 0.6524133
[1] 0.3003488 0.4037660 0.6067048 0.6982933 0.6999893
[1] "SMC:  39.0204066260002"
[1] 0.3013573 0.3509788 0.3995356 0.4463516 0.6524133
[1] 0.3003488 0.4037660 0.5981634 0.6942082 0.6999893
[1] "SMC:  25.6312386933939"
[1] 0.3013573 0.3440920 0.3815370 0.4374166 0.6524133
[1] 0.3003488 0.4037660 0.5739524 0.6942082 0.6999893
[1] "SMC:  20.6176837510053"
[1] 0.3013573 0.3509788 0.3928164 0.4374166 0.6524133
[1] 0.3003488 0.4037660 0.5488530 0.6942082 0.6999893
[1] "SMC:  22.6656786907961"
[1] 0.3013573 0.3672553 0.4090048 0.4678215 0.6524133
[1] 0.3003488 0.4549857 0.5488530 0.6966040 0.6999893
[1] "SMC:  20.2616151228844"
[1] 0.3013573 0.3509788 0.4070003 0.4559050 0.6524133
[1] 0.3003488 0.4549857 0.5394881 0.6951313 0.6999893
[1] "SMC:  16.5673524227334"
[1] 0.3152679 0.4090048 0.4547095 0.4849125 0.6524133
[1] 0.3015014 0.5488530 0.6699890 0.6983020 0.6999893
[1] "SMC:  25.3305580642764"
[1] 0.3152679 0.4190156 0.4547095 0.5013130 0.6524133
[1] 0.3015014 0.5488530 0.6699890 0.6989488 0.6999893
[1] "SMC:  22.6498675342163"
acceptance rate:  0.59 
[1] 0.3666799 0.4280070 0.4526519 0.4706766 0.6524133
[1] 0.3015014 0.6050182 0.6882182 0.6982991 0.6999521
[1] "14. 82.5627476882431"
[1] 0.3666799 0.4111760 0.4374166 0.4706766 0.6524133
[1] 0.3483154 0.6050182 0.6699890 0.6981274 0.6999521
[1] "15. 64.1086299449842"
[1] 0.3468543 0.4133473 0.4374166 0.4706766 0.6524133
[1] 0.3483154 0.5488530 0.6699890 0.6979587 0.6999521
[1] "16. 51.8800593770068"
[1] 0.3468543 0.4070003 0.4374166 0.4706766 0.6524133
[1] 0.3483154 0.6050182 0.6791036 0.6983020 0.6999521
[1] "17. 40.56425062487"
[1] 0.3468543 0.4070003 0.4374166 0.4706766 0.6524133
[1] 0.3483154 0.5659302 0.6651195 0.6983006 0.6999521
[1] "18. 32.5650215773121"
[1] 0.3468543 0.4070003 0.4374166 0.4706766 0.6524133
[1] 0.4348618 0.6050182 0.6132799 0.6982962 0.6999521
[1] "19. 19.442215037095"
[1] "resample"
[1] 0.3397449 0.4004696 0.4487017 0.4902404 0.6354944
[1] 0.3028245 0.5201490 0.6766769 0.6991968 0.6999992
[1] "SMC:  89.0357690342361"
[1] 0.3304244 0.4004696 0.4454411 0.4757619 0.6354944
[1] 0.3072689 0.5345433 0.6816319 0.6994407 0.6999992
[1] "SMC:  76.8165609563616"
[1] 0.3304244 0.3988210 0.4201531 0.4745154 0.6354944
[1] 0.3072689 0.4823644 0.6710816 0.6989077 0.6999992
[1] "SMC:  65.8635435794471"
[1] 0.3304244 0.3972053 0.4186591 0.4704129 0.6354944
[1] 0.3029384 0.4546045 0.6696974 0.6958068 0.6999992
[1] "SMC:  55.0303922755714"
[1] 0.3304244 0.3942287 0.4136887 0.4704129 0.6354944
[1] 0.3029384 0.4546045 0.6696974 0.6985015 0.6999992
[1] "SMC:  47.4631461541122"
[1] 0.3304244 0.3932365 0.4126087 0.4662881 0.6354944
[1] 0.3072689 0.4632814 0.6696974 0.6991246 0.6999992
[1] "SMC:  43.6134314204812"
[1] 0.3304244 0.3932365 0.4126087 0.4612732 0.6354944
[1] 0.3072689 0.4738347 0.6696974 0.6995775 0.6999992
[1] "SMC:  38.6809748289832"
[1] 0.3304244 0.3932365 0.4126087 0.4571611 0.6354944
[1] 0.3072689 0.5271922 0.6841862 0.6999047 0.6999992
[1] "SMC:  26.3721200136093"
[1] 0.3492472 0.3932365 0.4126087 0.4575622 0.6354944
[1] 0.3072689 0.5271922 0.6810741 0.6999047 0.6999992
[1] "SMC:  28.9530228544792"
[1] 0.3557273 0.4021091 0.4136887 0.4669326 0.6354944
[1] 0.3072689 0.4863166 0.6696974 0.6996225 0.6999992
[1] "SMC:  32.2017408834494"
[1] 0.3532749 0.3932365 0.4117512 0.4540791 0.6354944
[1] 0.3769824 0.5271922 0.6841862 0.6996225 0.6999992
[1] "SMC:  20.9778612384845"
[1] 0.3557273 0.4088781 0.4154834 0.4704129 0.6354944
[1] 0.3900307 0.6676006 0.6892527 0.6999047 0.6999992
[1] "SMC:  19.5439872592706"
[1] 0.3557273 0.4049200 0.4201531 0.4782895 0.6354944
[1] 0.3900307 0.5740585 0.6923874 0.6999047 0.6999992
[1] "SMC:  22.0219570713628"
[1] 0.3602674 0.4032190 0.4126087 0.4652609 0.6354944
[1] 0.3825192 0.5281328 0.6892527 0.6999047 0.6999992
[1] "SMC:  17.4691871350939"
[1] 0.3557273 0.4004806 0.4126087 0.4612226 0.6354944
[1] 0.3825192 0.5357387 0.6892527 0.6999047 0.6999992
[1] "SMC:  19.0903154695531"
[1] 0.3557273 0.3833705 0.4117512 0.4576351 0.6354944
[1] 0.3900307 0.5271922 0.6826301 0.6996225 0.6999992
[1] "SMC:  10.5808531854092"
[1] 0.3602674 0.3833705 0.4049200 0.4438341 0.6354944
[1] 0.3900307 0.5271922 0.5290734 0.6995471 0.6999992
[1] "SMC:  6.202505672618"
[1] 0.3304244 0.3833705 0.4049200 0.4312711 0.6354944
[1] 0.3900307 0.5271922 0.6841862 0.6996000 0.6999992
[1] "SMC:  9.94658796762954"
[1] 0.3304244 0.3833705 0.3988210 0.4156988 0.6354944
[1] 0.3927410 0.5271922 0.6743373 0.6972827 0.6999992
[1] "SMC:  6.66158330520518"
acceptance rate:  0.59 
[1] 0.3833705 0.3833705 0.3972053 0.4081880 0.5612767
[1] 0.4348618 0.5271922 0.6050182 0.6892527 0.6999969
[1] "20. 81.2743823146944"
> 
> state_df <- get_state(full_list, probs = c(0.25, 0.5, 0.75))
> 
> state_df$state <- true_states
> 
> theta_df <- get_parameter(full_list)
> 
> 
> save.image()
> save(state_df, file = "state_df.RData")
> save(theta_df, file = "theta_df.RData")
> 
> 
> 
> ggplot(state_df) + aes(x = time, y = state, ymin = lower, ymax = upper) + geom_step() + geom_ribbon(alpha = 0.2, stat = "stepribbon", fill = "red") + geom_step(mapping = aes(x = time, y = med), col = "red") + ggthemes::theme_base() + scale_y_continuous(expand = c(0, 0)) + scale_x_continuous(expand = c(0, 0))
> 
> ggplot(theta_df[which(theta_df$time %% 5 == 0),]) + aes(x = value, weights = weight, col = factor(time)) + geom_density() + facet_wrap(~parameter, scales = "free")
> 
> proc.time()
      user     system    elapsed 
499291.836    731.175  36738.886 
