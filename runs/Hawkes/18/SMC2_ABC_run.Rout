
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> library(parallel)
> library(StateSpaceInference)
> library(ggplot2)
> library(ggalt)
> sessionInfo()
R version 3.5.1 (2018-07-02)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: SUSE Linux Enterprise Server 12 SP2

Matrix products: default
BLAS/LAPACK: /pkg/suse12/software/openblas/0.2.20-gcc-6.4.0-2.28/lib/libopenblas_sandybridgep-r0.2.20.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] parallel  stats     graphics  grDevices utils     datasets  methods  
[8] base     

other attached packages:
[1] ggalt_0.4.0               ggplot2_3.1.0            
[3] StateSpaceInference_0.4.2

loaded via a namespace (and not attached):
 [1] Rcpp_1.0.0         Rttf2pt1_1.3.7     bindr_0.1.1        magrittr_1.5      
 [5] maps_3.3.0         MASS_7.3-51.1      tidyselect_0.2.5   munsell_0.5.0     
 [9] colorspace_1.3-2   R6_2.3.0           rlang_0.3.0.1      plyr_1.8.4        
[13] dplyr_0.7.8        grid_3.5.1         gtable_0.2.0       ash_1.0-15        
[17] KernSmooth_2.23-15 extrafontdb_1.0    withr_2.1.2        proj4_1.0-8       
[21] lazyeval_0.2.1     assertthat_0.2.0   tibble_1.4.2       crayon_1.3.4      
[25] bindrcpp_0.2.2     RColorBrewer_1.1-2 purrr_0.2.5        glue_1.3.0        
[29] compiler_3.5.1     pillar_1.3.0       scales_1.0.0       extrafont_0.17    
[33] pkgconfig_2.0.2   
> 
> #cl <- makeCluster(parallel::detectCores())
> cl = "mclapply"
> #cl <- NULL
> 
> set.seed(3)
> 
> TT <- 40
> true_theta <- c(0.25, 0.5)
> lower <- 0
> upper <- 3.5
> sd_t <- 1
> init <- min(rgamma(1, 100, 100), upper - 1)
> a_logit <- 0.9
> dist_coef <- 0.5
> true_states <- generate_state(init, TT, lower, upper, sd_t, a = a_logit)
> 
> y <- hawkes_simulator(true_states[1], true_theta, NULL, 0, 10)
> for(tp in 1:TT){
+   y <- hawkes_simulator(true_states[tp], true_theta, y$history, tp * 10, tp * 10 + 10)
+ }
> 
> y_history <- y$history
> 
> lambda_fun <- stepfun(seq(10, TT*10 - 10, by = 10), y = true_states)
> kern <- function(x){return(decay_func(x, alpha = true_theta[1], delta = true_theta[2]))}
> #
> #y_history <- sim_hawkes(lambda_fun, NULL, kern, 0, TT*10, progressBar = FALSE)
> #y <- hist(y_history, breaks = seq(0, TT*10, by = 10), plot = FALSE)$counts
> 
> hist(y_history, breaks = TT * 10)
> 
> plot(lambda_fun, add = TRUE, col = "red")
> 
> simulator <- hawkes_simulator
> 
> inp <- list(
+   lower = lower,
+   upper = upper,
+   sd_t = sd_t,
+   a_logit = a_logit,
+   history = y_history,
+   simulator = simulator
+ )
> 
> loss = loss_hawkes
> 
> 
> Ntheta = 1000
> Nx = 200
> pacc = 0.1
> 
> lower_theta <- c(0.1, 0.2)
> upper_theta <- c(0.5, 0.8)
> 
> trans_args <- list(
+   lower_theta = lower_theta,
+   upper_theta = upper_theta,
+   a = 1
+ )
> 
> prior_sample <- data.frame(theta1 = runif(Ntheta, lower_theta[1], upper_theta[1]), theta2 = runif(Ntheta, lower_theta[2], upper_theta[2]))
> 
> prior_sample <- as.matrix(prior_sample, ncol = 2)
> 
> trans <- function(x, trans_args){
+   theta1 <- gtools::logit(x[,1], min = trans_args$lower[1], max = trans_args$upper[1])
+   theta2 <- gtools::logit(x[,2], min = trans_args$lower[2], max = trans_args$upper[2])
+   return(cbind(theta1, theta2))
+ }
> 
> invtrans <- function(x, trans_args){
+   theta1 <- gtools::inv.logit(trans_args$a * x[,1], min = trans_args$lower[1], max = trans_args$upper[1])
+   theta2 <- gtools::inv.logit(trans_args$a * x[,2], min = trans_args$lower[2], max = trans_args$upper[2])
+   return(cbind(theta1, theta2))
+ }
> 
> full_list <- SMC2_ABC(prior_sample, dprior = dHawkes, loss, loss_args = inp, Ntheta = Ntheta, Nx = Nx, pacc = pacc, cl = cl, dt = 10, ESS_threshold = 0.2, TT = TT, trans = trans, invtrans = invtrans, trans_args = trans_args)
[1] "1. 802.861398022552"
[1] "2. 675.94138112409"
[1] "3. 611.533387745129"
[1] "4. 585.022362644184"
[1] "5. 523.851392439686"
[1] "6. 458.817848916308"
[1] "7. 430.636563886834"
[1] "8. 376.744435051663"
[1] "9. 435.070156023566"
[1] "10. 380.338095246172"
[1] "11. 314.137271143774"
[1] "12. 323.958760187755"
[1] "13. 296.113810587544"
[1] "14. 261.343599925261"
[1] "15. 254.31249811068"
[1] "16. 238.038967535343"
[1] "17. 223.296514018032"
[1] "18. 214.997983920436"
[1] "19. 187.752653533279"
[1] "resample"
[1] "SMC:  872.244042193914"
[1] "SMC:  791.745257935548"
[1] "SMC:  726.801781780571"
[1] "SMC:  696.810126185492"
[1] "SMC:  641.505528257551"
[1] "SMC:  586.579817961113"
[1] "SMC:  561.701645971319"
[1] "SMC:  511.482781602347"
[1] "SMC:  557.783079076762"
[1] "SMC:  472.463543373789"
[1] "SMC:  434.122480944075"
[1] "SMC:  416.847015652772"
[1] "SMC:  327.672079191247"
[1] "SMC:  320.273090835617"
[1] "SMC:  281.750872248569"
[1] "SMC:  240.807370012272"
[1] "SMC:  221.025355444144"
[1] "SMC:  212.833212560931"
[1] "SMC:  189.542436388465"
acceptance rate:  0.383 
[1] "20. 949.599981008"
[1] "21. 882.280611844885"
[1] "22. 802.367854899062"
[1] "23. 776.143523914318"
[1] "24. 756.654432241396"
[1] "25. 705.941410803852"
[1] "26. 662.596137052904"
[1] "27. 615.771411801845"
[1] "28. 579.013521585135"
[1] "29. 408.376494877789"
[1] "30. 364.115132780098"
[1] "31. 314.100767026362"
[1] "32. 258.063581666675"
[1] "33. 184.885994023108"
[1] "resample"
[1] "SMC:  836.433547219582"
[1] "SMC:  718.270251983053"
[1] "SMC:  636.52232439832"
[1] "SMC:  614.273721165956"
[1] "SMC:  550.312247321701"
[1] "SMC:  494.030615703292"
[1] "SMC:  462.677112432566"
[1] "SMC:  415.603842300851"
[1] "SMC:  447.793644579821"
[1] "SMC:  393.695258100409"
[1] "SMC:  338.956118593179"
[1] "SMC:  357.708244660657"
[1] "SMC:  374.472463881976"
[1] "SMC:  343.761099587554"
[1] "SMC:  347.713358103595"
[1] "SMC:  316.996556264973"
[1] "SMC:  275.566216093135"
[1] "SMC:  251.145649706057"
[1] "SMC:  251.17251340773"
[1] "SMC:  248.948666491578"
[1] "SMC:  218.336704744068"
[1] "SMC:  182.225269587243"
[1] "SMC:  217.898040984731"
[1] "SMC:  217.519823934994"
[1] "SMC:  218.880253600501"
[1] "SMC:  217.875734342193"
[1] "SMC:  185.136478191149"
[1] "SMC:  180.191176442447"
[1] "SMC:  200.42311570388"
[1] "SMC:  170.598950095633"
[1] "SMC:  145.161391911708"
[1] "SMC:  167.468389354772"
[1] "SMC:  134.375033403518"
acceptance rate:  0.154 
[1] "34. 911.292041067616"
[1] "35. 897.748337253845"
[1] "36. 755.321955865762"
[1] "37. 697.920019598978"
[1] "38. 545.990388491516"
[1] "39. 548.283439981608"
[1] "40. 483.444251521344"
> 
> state_df <- get_state(full_list, probs = c(0.25, 0.5, 0.75))
> 
> state_df$state <- true_states
> 
> theta_df <- get_parameter(full_list)
> 
> 
> save.image()
> save(state_df, file = "state_df.RData")
> save(theta_df, file = "theta_df.RData")
> 
> 
> 
> ggplot(state_df) + aes(x = time, y = state, ymin = lower, ymax = upper) + geom_step() + geom_ribbon(alpha = 0.2, stat = "stepribbon", fill = "red") + geom_step(mapping = aes(x = time, y = med), col = "red") + ggthemes::theme_base() + scale_y_continuous(expand = c(0, 0)) + scale_x_continuous(expand = c(0, 0))
> 
> ggplot(theta_df[which(theta_df$time %% 5 == 0),]) + aes(x = value, weights = weight, col = factor(time)) + geom_density() + facet_wrap(~parameter, scales = "free")
> 
> proc.time()
     user    system   elapsed 
25373.172   385.542  2339.454 
