
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> library(parallel)
> library(StateSpaceInference)
> library(ggplot2)
> library(ggalt)
> sessionInfo()
R version 3.5.1 (2018-07-02)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: SUSE Linux Enterprise Server 12 SP2

Matrix products: default
BLAS/LAPACK: /pkg/suse12/software/openblas/0.2.20-gcc-6.4.0-2.28/lib/libopenblas_sandybridgep-r0.2.20.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] parallel  stats     graphics  grDevices utils     datasets  methods  
[8] base     

other attached packages:
[1] ggalt_0.4.0               ggplot2_3.1.0            
[3] StateSpaceInference_1.0.0

loaded via a namespace (and not attached):
 [1] Rcpp_1.0.0         Rttf2pt1_1.3.7     bindr_0.1.1        magrittr_1.5      
 [5] maps_3.3.0         MASS_7.3-51.1      tidyselect_0.2.5   munsell_0.5.0     
 [9] colorspace_1.3-2   R6_2.3.0           rlang_0.3.0.1      plyr_1.8.4        
[13] dplyr_0.7.8        grid_3.5.1         gtable_0.2.0       ash_1.0-15        
[17] KernSmooth_2.23-15 extrafontdb_1.0    withr_2.1.2        proj4_1.0-8       
[21] lazyeval_0.2.1     assertthat_0.2.0   tibble_1.4.2       crayon_1.3.4      
[25] bindrcpp_0.2.2     RColorBrewer_1.1-2 purrr_0.2.5        glue_1.3.0        
[29] compiler_3.5.1     pillar_1.3.0       scales_1.0.0       extrafont_0.17    
[33] pkgconfig_2.0.2   
> 
> #cl <- makeCluster(parallel::detectCores())
> cl = "mclapply"
> #cl <- NULL
> 
> set.seed(3)
> 
> TT <- 20
> true_theta <- c(0.5, 0.5)
> lower <- 0
> upper <- 3.5
> sd_t <- 1
> init <- min(rgamma(1, 100, 100), upper - 1)
> a_logit <- 0.9
> dist_coef <- 0.5
> true_states <- generate_state(init, TT, lower, upper, sd_t, a = a_logit)
> 
> y <- hawkes_simulator(true_states[1], true_theta, NULL, 0, 10)
> for(tp in 1:TT){
+   y <- hawkes_simulator(true_states[tp], true_theta, y$history, tp * 10, tp * 10 + 10)
+ }
> 
> y_history <- y$history
> 
> lambda_fun <- stepfun(seq(10, TT*10 - 10, by = 10), y = true_states)
> kern <- function(x){return(decay_func(x, alpha = true_theta[1], delta = true_theta[2]))}
> #
> #y_history <- sim_hawkes(lambda_fun, NULL, kern, 0, TT*10, progressBar = FALSE)
> #y <- hist(y_history, breaks = seq(0, TT*10, by = 10), plot = FALSE)$counts
> 
> hist(y_history, breaks = TT * 10)
> 
> plot(lambda_fun, add = TRUE, col = "red")
> 
> simulator <- hawkes_simulator
> 
> inp <- list(
+   lower = lower,
+   upper = upper,
+   sd_t = sd_t,
+   a_logit = a_logit,
+   history = y_history,
+   simulator = simulator
+ )
> 
> loss = loss_hawkes
> 
> 
> Ntheta = 1000
> Nx = 1000
> pacc = 0.005
> 
> lower_theta <- c(0.3, 0.3)
> upper_theta <- c(0.7, 0.7)
> 
> prior_sample <- data.frame(theta1 = runif(Ntheta, lower_theta[1], upper_theta[1]), theta2 = runif(Ntheta, lower_theta[2], upper_theta[2]))
> 
> prior_sample <- as.matrix(prior_sample, ncol = 2)
> 
> trans <- function(x, trans_args){
+   theta1 <- log(x[,1])
+   theta2 <- log(x[,2])
+   return(cbind(theta1, theta2))
+ }
> 
> invtrans <- function(x, trans_args){
+   theta1 <- exp(x[,1])
+   theta2 <- exp(x[,2])
+   return(cbind(theta1, theta2))
+ }
> 
> full_list <- SMC2_ABC(prior_sample, dprior = dHawkes, loss, loss_args = inp, Ntheta = Ntheta, Nx = Nx, pacc = pacc, cl = cl, dt = 10, ESS_threshold = 0.5, TT = TT, trans = trans, invtrans = invtrans)
[1] 0.3004481 0.3842938 0.4762817 0.5805382 0.6998184
[1] 0.3002386 0.3934596 0.4991072 0.5877002 0.6995915
[1] "1. 806.852308287899"
[1] 0.3004481 0.3776271 0.4682981 0.5691087 0.6998184
[1] 0.3002386 0.3930150 0.4994481 0.5929998 0.6995915
[1] "2. 674.704159335663"
[1] 0.3004527 0.3661261 0.4460077 0.5426410 0.6998184
[1] 0.3002386 0.3764136 0.4782937 0.5792158 0.6995915
[1] "3. 478.673734633121"
[1] "resample"
[1] 0.1723517 0.3297721 0.4083188 0.5159995 1.2677086
[1] 0.1769492 0.3596051 0.4664340 0.5859640 1.2155427
[1] "SMC:  813.277236028101"
[1] 0.1723517 0.3274747 0.4067676 0.5089294 1.2677086
[1] 0.1769492 0.3666696 0.4727655 0.5990371 1.2155427
[1] "SMC:  666.782396518622"
[1] 0.1723517 0.3128417 0.3865081 0.4743563 1.0891541
[1] 0.1769492 0.3463772 0.4506470 0.5715120 1.2155427
[1] "SMC:  512.778246517227"
acceptance rate:  0.461 
[1] 0.3001886 0.3608086 0.4161833 0.5044459 0.6987306
[1] 0.3013842 0.3597131 0.4455740 0.5567019 0.6995915
[1] "4. 837.940194994472"
[1] 0.3001886 0.3590265 0.4161833 0.5041267 0.6987306
[1] 0.3013842 0.3595483 0.4352461 0.5450667 0.6995915
[1] "5. 684.592601188977"
[1] 0.3001886 0.3572505 0.4099385 0.5014110 0.6987306
[1] 0.3008791 0.3550140 0.4325447 0.5369057 0.6995915
[1] "6. 551.861120672977"
[1] 0.3001886 0.3554617 0.4032480 0.4980937 0.6987306
[1] 0.3013842 0.3492033 0.4314584 0.5413688 0.6995915
[1] "7. 446.714688418032"
[1] "resample"
[1] 0.1889686 0.3273168 0.3895072 0.4824226 1.1119016
[1] 0.1732874 0.3437107 0.4320561 0.5590632 1.2039290
[1] "SMC:  821.046087695358"
[1] 0.1889686 0.3285705 0.3896184 0.4741642 1.1119016
[1] 0.1732874 0.3438276 0.4388206 0.5755777 1.2039290
[1] "SMC:  672.938759417487"
[1] 0.1889686 0.3185326 0.3768168 0.4520242 1.1119016
[1] 0.1732874 0.3340198 0.4202025 0.5393274 1.2039290
[1] "SMC:  526.034582202881"
[1] 0.1889686 0.3190451 0.3754853 0.4456147 0.8997446
[1] 0.1748014 0.3326434 0.4183445 0.5352938 1.2039290
[1] "SMC:  464.105340753175"
[1] 0.1889686 0.3176112 0.3746949 0.4412174 0.8997446
[1] 0.1748014 0.3285798 0.4087933 0.5334621 1.2039290
[1] "SMC:  364.112947080707"
[1] 0.1889686 0.3190602 0.3741569 0.4403028 0.8997446
[1] 0.1748014 0.3249455 0.3984387 0.5238356 1.2039290
[1] "SMC:  283.45181566602"
[1] 0.2109801 0.3264206 0.3768168 0.4396424 0.8997446
[1] 0.1748014 0.3176138 0.3937848 0.5225232 1.2039290
[1] "SMC:  224.276632022368"
acceptance rate:  0.411 
[1] 0.3023592 0.3407120 0.3835551 0.4411166 0.6890008
[1] 0.3017710 0.3408547 0.4132148 0.5334621 0.6929234
[1] "8. 816.27993733477"
[1] 0.3004041 0.3498057 0.3904459 0.4508146 0.6890008
[1] 0.3017710 0.3408547 0.4160523 0.5334621 0.6929234
[1] "9. 635.68504580387"
[1] 0.3004041 0.3716872 0.4185067 0.5055173 0.6890008
[1] 0.3017710 0.3408547 0.4047627 0.5091836 0.6929234
[1] "10. 466.317739070946"
[1] "resample"
[1] 0.2180555 0.3463715 0.4162536 0.5097236 1.1718152
[1] 0.1676473 0.3343206 0.4156824 0.5480737 1.0927344
[1] "SMC:  826.933148916551"
[1] 0.2180555 0.3509347 0.4191686 0.5061872 1.1718152
[1] 0.1677119 0.3347339 0.4163307 0.5526190 1.0927344
[1] "SMC:  699.895026011587"
[1] 0.2180555 0.3419436 0.4057029 0.4859682 1.1376865
[1] 0.1676473 0.3229584 0.3962883 0.5201318 1.0927344
[1] "SMC:  548.166869517062"
[1] 0.2180555 0.3410852 0.4045414 0.4832330 1.1376865
[1] 0.1676473 0.3180836 0.3962743 0.5208763 1.0927344
[1] "SMC:  472.553323093572"
[1] 0.2180555 0.3399668 0.4066833 0.4891414 1.1376865
[1] 0.1677119 0.3142712 0.3883191 0.5103508 1.0927344
[1] "SMC:  386.964176567003"
[1] 0.2180555 0.3342019 0.4042209 0.4832330 1.1376865
[1] 0.1797803 0.3109382 0.3854291 0.4965527 1.0927344
[1] "SMC:  319.732437451347"
[1] 0.2180555 0.3240104 0.3926100 0.4705850 1.1376865
[1] 0.1797803 0.3074439 0.3854291 0.4960508 1.0927344
[1] "SMC:  231.342044497904"
[1] 0.2180555 0.3202335 0.3816362 0.4637839 1.1376865
[1] 0.1797803 0.3071395 0.3840002 0.4960508 1.0927344
[1] "SMC:  180.894301378648"
[1] 0.2180555 0.3366805 0.3957436 0.4817699 1.1376865
[1] 0.1797803 0.3290893 0.3945331 0.4979465 1.0927344
[1] "SMC:  175.104743102978"
[1] 0.2373332 0.3779856 0.4508669 0.5371234 1.1376865
[1] 0.1677119 0.3158782 0.3803853 0.4897901 1.0927344
[1] "SMC:  146.772310263282"
acceptance rate:  0.429 
[1] 0.3050095 0.3698479 0.4146792 0.4670651 0.6890008
[1] 0.3033396 0.3432694 0.4209971 0.4969847 0.6929234
[1] "11. 754.699930595371"
[1] 0.3050095 0.3830885 0.4229654 0.4822129 0.6890008
[1] 0.3033396 0.3463172 0.4231759 0.4948936 0.6919080
[1] "12. 571.133565518495"
[1] 0.3050095 0.3920936 0.4430810 0.5041267 0.6890008
[1] 0.3033396 0.3442876 0.4173691 0.4940920 0.6919080
[1] "13. 456.519017306356"
[1] "resample"
[1] 0.1832691 0.3574273 0.4267112 0.5084369 0.9691197
[1] 0.1806768 0.3294893 0.4057707 0.5003309 1.1406072
[1] "SMC:  836.336502159329"
[1] 0.1832691 0.3594835 0.4276873 0.5063857 0.9691197
[1] 0.1827580 0.3330740 0.4057040 0.5013602 1.1406072
[1] "SMC:  688.21680675949"
[1] 0.1832691 0.3506805 0.4171126 0.4877079 0.9691197
[1] 0.1827580 0.3233346 0.3974011 0.4925208 1.1406072
[1] "SMC:  537.45698317815"
[1] 0.1832691 0.3504157 0.4085057 0.4833609 0.9691197
[1] 0.1827580 0.3211370 0.3920938 0.4843469 1.1406072
[1] "SMC:  466.063783588838"
[1] 0.1832691 0.3496609 0.4068288 0.4824348 0.9691197
[1] 0.1827580 0.3194862 0.3813551 0.4719404 1.1406072
[1] "SMC:  364.025038825399"
[1] 0.1832691 0.3433761 0.4062567 0.4824348 0.9691197
[1] 0.1827580 0.3144141 0.3740802 0.4628308 1.1406072
[1] "SMC:  316.511907803797"
[1] 0.1832691 0.3433038 0.4041640 0.4824348 0.9691197
[1] 0.1827580 0.3171743 0.3740802 0.4620653 1.1406072
[1] "SMC:  258.440393780597"
[1] 0.1832691 0.3385390 0.3976843 0.4796483 0.9691197
[1] 0.1827580 0.3172688 0.3708587 0.4547418 1.1406072
[1] "SMC:  172.46478484919"
[1] 0.1832691 0.3544738 0.4222266 0.4994084 0.9691197
[1] 0.1827580 0.3121361 0.3673785 0.4547418 1.1406072
[1] "SMC:  185.530361295904"
[1] 0.2241998 0.4018620 0.4720952 0.5688352 0.9691197
[1] 0.1827580 0.2979474 0.3501958 0.4331734 1.1406072
[1] "SMC:  100.899887992138"
[1] 0.2176245 0.3840010 0.4300654 0.5147806 0.9691197
[1] 0.2076134 0.3178607 0.3673785 0.4467421 1.1406072
[1] "SMC:  92.9487459352917"
[1] 0.2176245 0.3843390 0.4533323 0.5291939 0.9691197
[1] 0.2076134 0.3194862 0.3707267 0.4540886 1.0410565
[1] "SMC:  82.8666571694665"
[1] 0.2667600 0.3952331 0.4716590 0.5388106 0.9691197
[1] 0.2076134 0.3194862 0.3752932 0.4550619 1.0410565
[1] "SMC:  85.7396412346518"
acceptance rate:  0.368 
[1] 0.3054487 0.3843390 0.4257944 0.4936591 0.6802719
[1] 0.3012032 0.3430146 0.3996356 0.4611673 0.6990366
[1] "14. 833.638912036266"
[1] 0.3059233 0.3843390 0.4229654 0.4838713 0.6802719
[1] 0.3012032 0.3430146 0.3997491 0.4611673 0.6990366
[1] "15. 677.076675801183"
[1] 0.3059233 0.3951734 0.4495005 0.5041267 0.6802719
[1] 0.3012032 0.3427298 0.3972539 0.4547418 0.6990366
[1] "16. 535.763296002254"
[1] 0.3054487 0.3843390 0.4244800 0.4775658 0.6802719
[1] 0.3012032 0.3442876 0.4035588 0.4611673 0.6990366
[1] "17. 452.393586537758"
[1] "resample"
[1] 0.2287206 0.3647393 0.4274055 0.4934621 0.9321633
[1] 0.2020741 0.3333992 0.3982220 0.4775172 1.0431857
[1] "SMC:  834.237862074657"
[1] 0.2264388 0.3657094 0.4275471 0.4950836 0.9321633
[1] 0.2020741 0.3332010 0.3989618 0.4830934 1.0431857
[1] "SMC:  693.045771775266"
[1] 0.2264388 0.3566039 0.4189085 0.4857038 0.8602258
[1] 0.2020741 0.3286401 0.3923981 0.4713991 1.0431857
[1] "SMC:  561.153273425096"
[1] 0.2264388 0.3551587 0.4174555 0.4846985 0.8602258
[1] 0.2020741 0.3286800 0.3914163 0.4695043 1.0431857
[1] "SMC:  502.499241903063"
[1] 0.2264388 0.3500812 0.4108299 0.4803698 0.8602258
[1] 0.2020741 0.3286001 0.3868742 0.4679129 1.0431857
[1] "SMC:  399.107906045252"
[1] 0.2264388 0.3418841 0.4079324 0.4803698 0.8602258
[1] 0.2020741 0.3291141 0.3899416 0.4682346 1.0431857
[1] "SMC:  335.577933467651"
[1] 0.2264388 0.3371636 0.4072892 0.4776359 0.8602258
[1] 0.2020741 0.3291141 0.3891052 0.4649691 1.0431857
[1] "SMC:  291.893602565796"
[1] 0.2264388 0.3352542 0.4038928 0.4659417 0.8602258
[1] 0.2020741 0.3302537 0.3946045 0.4906294 1.0431857
[1] "SMC:  230.828673575061"
[1] 0.2264388 0.3438084 0.4099828 0.4834602 0.8602258
[1] 0.2086765 0.3296826 0.3918181 0.4701937 1.0431857
[1] "SMC:  216.227449829031"
[1] 0.2508530 0.4030882 0.4494361 0.5155325 0.8602258
[1] 0.2086765 0.3261895 0.3776147 0.4432933 1.0431857
[1] "SMC:  200.499501255926"
[1] 0.2354602 0.3760205 0.4353487 0.4920762 0.8032458
[1] 0.2086765 0.3341176 0.3879647 0.4468347 1.0431857
[1] "SMC:  146.927586094097"
[1] 0.2583309 0.4055347 0.4455906 0.5204202 0.8032458
[1] 0.2210975 0.3367678 0.3855762 0.4380172 1.0431857
[1] "SMC:  75.5759866850852"
[1] 0.2583309 0.4079324 0.4525201 0.5224887 0.8032458
[1] 0.2179400 0.3291279 0.3847821 0.4378840 1.0431857
[1] "SMC:  99.6191078757715"
[1] 0.2583309 0.4099960 0.4567818 0.5385195 0.8032458
[1] 0.2179400 0.3294592 0.3780981 0.4264521 1.0431857
[1] "SMC:  57.5004960673644"
[1] 0.2583309 0.4079324 0.4564268 0.5385195 0.8032458
[1] 0.2179400 0.3290159 0.3721679 0.4241979 1.0431857
[1] "SMC:  45.1422884704621"
[1] 0.2583309 0.4079324 0.4525201 0.5175168 0.8032458
[1] 0.2210975 0.3145739 0.3751458 0.4282968 1.0431857
[1] "SMC:  88.0395242863208"
[1] 0.2583309 0.4079324 0.4525201 0.5025601 0.8032458
[1] 0.2210975 0.3151308 0.3750395 0.4264521 1.0431857
[1] "SMC:  77.773007310413"
acceptance rate:  0.316 
[1] 0.3059685 0.3848876 0.4525201 0.4790205 0.6802719
[1] 0.3012032 0.3430146 0.3675329 0.4264521 0.6460910
[1] "18. 810.040518218624"
[1] 0.3059685 0.3952033 0.4552153 0.4902609 0.6802719
[1] 0.3012032 0.3430146 0.3721679 0.4264521 0.6460910
[1] "19. 650.082351375988"
[1] 0.3059685 0.3843390 0.4525201 0.4718067 0.6802719
[1] 0.3017096 0.3430146 0.3721679 0.4241979 0.6460910
[1] "20. 520.91415211904"
> 
> state_df <- get_state(full_list, probs = c(0.25, 0.5, 0.75))
> 
> state_df$state <- true_states
> 
> theta_df <- get_parameter(full_list)
> 
> 
> save.image()
> save(state_df, file = "state_df.RData")
> save(theta_df, file = "theta_df.RData")
> 
> 
> 
> ggplot(state_df) + aes(x = time, y = state, ymin = lower, ymax = upper) + geom_step() + geom_ribbon(alpha = 0.2, stat = "stepribbon", fill = "red") + geom_step(mapping = aes(x = time, y = med), col = "red") + ggthemes::theme_base() + scale_y_continuous(expand = c(0, 0)) + scale_x_continuous(expand = c(0, 0))
> 
> ggplot(theta_df[which(theta_df$time %% 5 == 0),]) + aes(x = value, weights = weight, col = factor(time)) + geom_density() + facet_wrap(~parameter, scales = "free")
> 
> proc.time()
     user    system   elapsed 
61490.224   630.265  5449.673 
