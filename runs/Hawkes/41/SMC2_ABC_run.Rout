
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> library(parallel)
> library(StateSpaceInference)
> library(ggplot2)
> library(ggalt)
> sessionInfo()
R version 3.5.1 (2018-07-02)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: SUSE Linux Enterprise Server 12 SP2

Matrix products: default
BLAS/LAPACK: /pkg/suse12/software/openblas/0.2.20-gcc-6.4.0-2.28/lib/libopenblas_sandybridgep-r0.2.20.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] parallel  stats     graphics  grDevices utils     datasets  methods  
[8] base     

other attached packages:
[1] ggalt_0.4.0               ggplot2_3.1.0            
[3] StateSpaceInference_1.1.0

loaded via a namespace (and not attached):
 [1] Rcpp_1.0.0         Rttf2pt1_1.3.7     bindr_0.1.1        magrittr_1.5      
 [5] maps_3.3.0         MASS_7.3-51.1      tidyselect_0.2.5   munsell_0.5.0     
 [9] colorspace_1.3-2   R6_2.3.0           rlang_0.3.0.1      plyr_1.8.4        
[13] dplyr_0.7.8        grid_3.5.1         gtable_0.2.0       ash_1.0-15        
[17] KernSmooth_2.23-15 extrafontdb_1.0    withr_2.1.2        proj4_1.0-8       
[21] lazyeval_0.2.1     assertthat_0.2.0   tibble_1.4.2       crayon_1.3.4      
[25] bindrcpp_0.2.2     RColorBrewer_1.1-2 purrr_0.2.5        glue_1.3.0        
[29] compiler_3.5.1     pillar_1.3.0       scales_1.0.0       extrafont_0.17    
[33] pkgconfig_2.0.2   
> 
> #cl <- makeCluster(parallel::detectCores())
> cl = "mclapply"
> #cl <- NULL
> 
> set.seed(3)
> 
> TT <- 20
> true_theta <- c(0.5, 0.5)
> lower <- 0
> upper <- 3.5
> sd_t <- 1
> init <- min(rgamma(1, 100, 100), upper - 1)
> a_logit <- 0.9
> dist_coef <- 0.5
> true_states <- generate_state(init, TT, lower, upper, sd_t, a = a_logit)
> 
> y <- hawkes_simulator(true_states[1], true_theta, NULL, 0, 10)
> for(tp in 1:TT){
+   y <- hawkes_simulator(true_states[tp], true_theta, y$history, tp * 10, tp * 10 + 10)
+ }
> 
> y_history <- y$history
> 
> lambda_fun <- stepfun(seq(10, TT*10 - 10, by = 10), y = true_states)
> kern <- function(x){return(decay_func(x, alpha = true_theta[1], delta = true_theta[2]))}
> #
> #y_history <- sim_hawkes(lambda_fun, NULL, kern, 0, TT*10, progressBar = FALSE)
> #y <- hist(y_history, breaks = seq(0, TT*10, by = 10), plot = FALSE)$counts
> 
> hist(y_history, breaks = TT * 10)
> 
> plot(lambda_fun, add = TRUE, col = "red")
> 
> simulator <- hawkes_simulator
> 
> inp <- list(
+   lower = lower,
+   upper = upper,
+   sd_t = sd_t,
+   a_logit = a_logit,
+   history = y_history,
+   simulator = simulator
+ )
> 
> loss = loss_hawkes
> 
> 
> Ntheta = 200
> Nx = 1000
> pacc = 0.01
> 
> lower_theta <- c(0.3, 0.3)
> upper_theta <- c(0.7, 0.7)
> 
> prior_sample <- data.frame(theta1 = runif(Ntheta, lower_theta[1], upper_theta[1]), theta2 = runif(Ntheta, lower_theta[2], upper_theta[2]))
> 
> prior_sample <- as.matrix(prior_sample, ncol = 2)
> 
> trans <- function(x, trans_args){
+   theta1 <- log(x[,1])
+   theta2 <- log(x[,2])
+   return(cbind(theta1, theta2))
+ }
> 
> invtrans <- function(x, trans_args){
+   theta1 <- exp(x[,1])
+   theta2 <- exp(x[,2])
+   return(cbind(theta1, theta2))
+ }
> 
> full_list <- SMC2_ABC(prior_sample, dprior = dHawkes, loss, loss_args = inp, Ntheta = Ntheta, Nx = Nx, pacc = pacc, cl = cl, dt = 10, ESS_threshold = 0.5, TT = TT, trans = trans, invtrans = invtrans, cov_coef = 0.2)
[1] 0.3034827 0.3800840 0.4633619 0.5624741 0.6992435
[1] 0.3053522 0.4060890 0.4967142 0.5806389 0.6998184
[1] "1. 174.170298838575"
[1] 0.3032790 0.3690037 0.4675385 0.5549296 0.6992435
[1] 0.3053522 0.4077354 0.4971107 0.5828984 0.6998184
[1] "2. 157.016903953988"
[1] 0.3032790 0.3590265 0.4353337 0.5312835 0.6992435
[1] 0.3088152 0.4057251 0.4898805 0.5734539 0.6998184
[1] "3. 133.472063520768"
[1] 0.3032790 0.3580345 0.4338400 0.5244050 0.6992435
[1] 0.3053522 0.3964423 0.4725021 0.5648951 0.6998184
[1] "4. 118.320160218606"
[1] 0.3032790 0.3549531 0.4242706 0.5139839 0.6992435
[1] 0.3088152 0.3964423 0.4754529 0.5643941 0.6998184
[1] "5. 101.197091673715"
[1] 0.3032790 0.3500050 0.4190993 0.5091185 0.6992435
[1] 0.3053522 0.3917806 0.4695983 0.5643045 0.6998184
[1] "6. 100.778595675677"
[1] 0.3032790 0.3500050 0.4049490 0.4869033 0.6992435
[1] 0.3053522 0.3884890 0.4655951 0.5643804 0.6998184
[1] "7. 91.6542117448104"
[1] "resample"
[1] 0.2592364 0.3365995 0.4011721 0.4692240 0.7429503
[1] 0.3030224 0.4336041 0.4978216 0.5843352 0.8425749
[1] "SMC:  177.51930666254"
[1] 0.2592364 0.3348464 0.3975926 0.4614938 0.7429503
[1] 0.3030224 0.4325199 0.4943591 0.5831906 0.8425749
[1] "SMC:  161.008433467039"
[1] 0.2592364 0.3341539 0.3857140 0.4379245 0.7429503
[1] 0.3030224 0.4304708 0.4785939 0.5795159 0.8425749
[1] "SMC:  135.165762330893"
[1] 0.2634906 0.3331699 0.3762903 0.4316859 0.7429503
[1] 0.3030224 0.4192428 0.4735252 0.5676098 0.8425749
[1] "SMC:  115.720912072716"
[1] 0.2634906 0.3337299 0.3695991 0.4308144 0.7429503
[1] 0.3030224 0.4009133 0.4678803 0.5646746 0.8425749
[1] "SMC:  96.0408971345749"
[1] 0.2634906 0.3336922 0.3695991 0.4294355 0.7429503
[1] 0.3050548 0.4008006 0.4634894 0.5560849 0.8425749
[1] "SMC:  82.2068397880083"
[1] 0.2634906 0.3307462 0.3689154 0.4186838 0.7429503
[1] 0.3050548 0.4008006 0.4650181 0.5646746 0.8425749
[1] "SMC:  64.7082224889688"
acceptance rate:  0.59 
[1] 0.3032790 0.3447746 0.3689154 0.4321403 0.6203628
[1] 0.3050548 0.4008006 0.4655121 0.5565887 0.6880875
[1] "8. 180.906384132291"
[1] 0.3032790 0.3514910 0.3762903 0.4456063 0.6203628
[1] 0.3030224 0.4061785 0.4683348 0.5609820 0.6880875
[1] "9. 159.993407084858"
[1] 0.3086144 0.3631425 0.4079468 0.4868730 0.6203628
[1] 0.3030224 0.4061785 0.4665468 0.5448145 0.6880875
[1] "10. 125.382922974182"
[1] 0.3034827 0.3590265 0.3889302 0.4610959 0.6203628
[1] 0.3030224 0.4104834 0.4723030 0.5565887 0.6880875
[1] "11. 123.368860254679"
[1] 0.3034827 0.3631425 0.4241898 0.5070321 0.6203628
[1] 0.3030224 0.4254456 0.4957939 0.5405572 0.6880875
[1] "12. 83.7543251819523"
[1] "resample"
[1] 0.2902939 0.3585552 0.4040272 0.4799792 0.6429251
[1] 0.2940330 0.4044880 0.4746404 0.5404977 0.8231849
[1] "SMC:  180.365251130175"
[1] 0.2902939 0.3521957 0.4006841 0.4810476 0.6429251
[1] 0.2891016 0.4050011 0.4721718 0.5398515 0.8231849
[1] "SMC:  161.78784828119"
[1] 0.2902939 0.3438044 0.3937065 0.4732500 0.6429251
[1] 0.2891016 0.3974153 0.4638731 0.5281045 0.8231849
[1] "SMC:  142.809101193938"
[1] 0.2902939 0.3436786 0.3926110 0.4726415 0.6429251
[1] 0.2891016 0.3962427 0.4606774 0.5324747 0.8231849
[1] "SMC:  133.287596471254"
[1] 0.2902939 0.3419813 0.3923133 0.4726415 0.6429251
[1] 0.2891016 0.3932592 0.4588946 0.5278159 0.8231849
[1] "SMC:  121.495066275874"
[1] 0.2902939 0.3423851 0.3898799 0.4703705 0.6429251
[1] 0.2891016 0.3876471 0.4581495 0.5193347 0.8231849
[1] "SMC:  111.929522664922"
[1] 0.2902939 0.3423851 0.3898799 0.4681370 0.6429251
[1] 0.2891016 0.3880841 0.4581495 0.5187583 0.8231849
[1] "SMC:  105.498183022386"
[1] 0.2902939 0.3394515 0.3880794 0.4602333 0.6429251
[1] 0.2891016 0.3923343 0.4581495 0.5199111 0.8231849
[1] "SMC:  99.3724941508431"
[1] 0.2902939 0.3442118 0.3952361 0.4792698 0.6429251
[1] 0.2891016 0.3936294 0.4581495 0.5124426 0.8231849
[1] "SMC:  85.2280837056491"
[1] 0.2902939 0.3735702 0.4387072 0.4961013 0.6429251
[1] 0.2891016 0.3955286 0.4581807 0.5074483 0.8231849
[1] "SMC:  82.0246674149106"
[1] 0.2902939 0.3605852 0.4114484 0.4819383 0.6429251
[1] 0.2891016 0.3955286 0.4588946 0.5056214 0.8231849
[1] "SMC:  76.8006652335087"
[1] 0.2981689 0.3799102 0.4388860 0.5072551 0.6429251
[1] 0.2891016 0.3996724 0.4595775 0.5080148 0.7334603
[1] "SMC:  66.8847580470633"
acceptance rate:  0.54 
[1] 0.3108906 0.4003582 0.4792134 0.5126261 0.6065319
[1] 0.3050548 0.4067218 0.4595775 0.5210311 0.6842867
[1] "13. 175.038295081967"
[1] 0.3108906 0.3880794 0.4785246 0.5126261 0.6065319
[1] 0.3050548 0.4012674 0.4388502 0.5194315 0.6842867
[1] "14. 160.830971058233"
[1] 0.3108906 0.3880794 0.4785246 0.5126261 0.6065319
[1] 0.3050548 0.4010340 0.4388502 0.4976514 0.6842867
[1] "15. 143.981077168077"
[1] 0.3108906 0.3880794 0.4785246 0.5126261 0.6065319
[1] 0.3050548 0.4012674 0.4388502 0.4961723 0.6842867
[1] "16. 114.976562314978"
[1] 0.3145928 0.3715777 0.4785246 0.5126261 0.6065319
[1] 0.3050548 0.4012674 0.4388502 0.4961723 0.6842867
[1] "17. 95.5698694882882"
[1] "resample"
[1] 0.2864574 0.3677977 0.4277642 0.4938320 0.6844114
[1] 0.3028951 0.3997412 0.4444996 0.4943838 0.7180715
[1] "SMC:  177.803648027206"
[1] 0.2864574 0.3651348 0.4263538 0.4956888 0.6844114
[1] 0.3028951 0.4013406 0.4444996 0.4926902 0.7180715
[1] "SMC:  157.413314301444"
[1] 0.2694154 0.3619712 0.4105104 0.4893079 0.6844114
[1] 0.3028951 0.3975112 0.4376439 0.4874039 0.7180715
[1] "SMC:  134.248265564246"
[1] 0.2694154 0.3628595 0.4073103 0.4859096 0.6844114
[1] 0.3028951 0.3971222 0.4339594 0.4793364 0.7180715
[1] "SMC:  117.912759315724"
[1] 0.2694154 0.3648144 0.4115933 0.4899452 0.6844114
[1] 0.3111002 0.3975112 0.4397612 0.4882688 0.7180715
[1] "SMC:  119.172671111731"
[1] 0.2694154 0.3644296 0.4102108 0.4889288 0.6844114
[1] 0.3111002 0.3975112 0.4456954 0.4860021 0.7180715
[1] "SMC:  112.992584643858"
[1] 0.2694154 0.3632751 0.4053595 0.4796045 0.6844114
[1] 0.3028951 0.3971222 0.4407768 0.4752463 0.7180715
[1] "SMC:  106.079009382449"
[1] 0.2694154 0.3559053 0.4021445 0.4770536 0.6844114
[1] 0.3028951 0.3951037 0.4376328 0.4767336 0.7180715
[1] "SMC:  94.4486771091761"
[1] 0.2864574 0.3652416 0.4108099 0.4918152 0.6844114
[1] 0.3028951 0.4019232 0.4444996 0.4806359 0.7180715
[1] "SMC:  87.3375920574549"
[1] 0.2968146 0.3917383 0.4607582 0.5081149 0.6844114
[1] 0.3111002 0.4043259 0.4473054 0.4839795 0.7180715
[1] "SMC:  78.1539642283089"
[1] 0.2906598 0.3765352 0.4376625 0.5031918 0.6844114
[1] 0.3111002 0.4044952 0.4482428 0.4942961 0.7180715
[1] "SMC:  73.8602505140998"
[1] 0.2968146 0.3917978 0.4587912 0.5061740 0.6844114
[1] 0.3156225 0.4053865 0.4522174 0.4944714 0.7180715
[1] "SMC:  62.9397875183811"
[1] 0.2968146 0.4021445 0.4679796 0.5039770 0.6844114
[1] 0.3270073 0.4052773 0.4482858 0.4932255 0.7180715
[1] "SMC:  65.4008747591372"
[1] 0.2968146 0.4021445 0.4495079 0.4957911 0.6844114
[1] 0.3156225 0.4029940 0.4407768 0.4841348 0.7180715
[1] "SMC:  54.6239171547012"
[1] 0.2968146 0.3819527 0.4495079 0.4957911 0.6844114
[1] 0.3111002 0.3976408 0.4407768 0.4841348 0.7180715
[1] "SMC:  46.5526306093594"
[1] 0.2968146 0.4021445 0.4679796 0.4957911 0.6844114
[1] 0.3312584 0.4049990 0.4407768 0.4840447 0.7180715
[1] "SMC:  39.159509823119"
[1] 0.3007501 0.4021445 0.4607582 0.4925198 0.6844114
[1] 0.3270073 0.4051682 0.4407768 0.4839795 0.7180715
[1] "SMC:  34.6531888608897"
acceptance rate:  0.52 
[1] 0.3219023 0.4021445 0.4721656 0.4967074 0.5896073
[1] 0.3257755 0.4230009 0.4407768 0.4839795 0.6363401
[1] "18. 179.947013617365"
[1] 0.3219023 0.4021445 0.4756002 0.4967074 0.5896073
[1] 0.3539748 0.4230009 0.4407768 0.4839795 0.6363401
[1] "19. 161.169871101195"
[1] 0.3219023 0.3880794 0.4679796 0.4957911 0.5896073
[1] 0.3539748 0.4230009 0.4407768 0.4839795 0.6363401
[1] "20. 146.119256010143"
> 
> state_df <- get_state(full_list, probs = c(0.25, 0.5, 0.75))
> 
> state_df$state <- true_states
> 
> theta_df <- get_parameter(full_list)
> 
> 
> save.image()
> save(state_df, file = "state_df.RData")
> save(theta_df, file = "theta_df.RData")
> 
> 
> 
> ggplot(state_df) + aes(x = time, y = state, ymin = lower, ymax = upper) + geom_step() + geom_ribbon(alpha = 0.2, stat = "stepribbon", fill = "red") + geom_step(mapping = aes(x = time, y = med), col = "red") + ggthemes::theme_base() + scale_y_continuous(expand = c(0, 0)) + scale_x_continuous(expand = c(0, 0))
> 
> ggplot(theta_df[which(theta_df$time %% 5 == 0),]) + aes(x = value, weights = weight, col = factor(time)) + geom_density() + facet_wrap(~parameter, scales = "free")
> 
> proc.time()
    user   system  elapsed 
9911.569  208.034 1083.922 
