
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> library(parallel)
> library(StateSpaceInference)
> library(ggplot2)
> library(ggalt)
> sessionInfo()
R version 3.5.1 (2018-07-02)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: SUSE Linux Enterprise Server 12 SP2

Matrix products: default
BLAS/LAPACK: /pkg/suse12/software/openblas/0.2.20-gcc-6.4.0-2.28/lib/libopenblas_sandybridgep-r0.2.20.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] parallel  stats     graphics  grDevices utils     datasets  methods  
[8] base     

other attached packages:
[1] ggalt_0.4.0               ggplot2_3.1.0            
[3] StateSpaceInference_1.1.0

loaded via a namespace (and not attached):
 [1] Rcpp_1.0.0         Rttf2pt1_1.3.7     bindr_0.1.1        magrittr_1.5      
 [5] maps_3.3.0         MASS_7.3-51.1      tidyselect_0.2.5   munsell_0.5.0     
 [9] colorspace_1.3-2   R6_2.3.0           rlang_0.3.0.1      plyr_1.8.4        
[13] dplyr_0.7.8        grid_3.5.1         gtable_0.2.0       ash_1.0-15        
[17] KernSmooth_2.23-15 extrafontdb_1.0    withr_2.1.2        proj4_1.0-8       
[21] lazyeval_0.2.1     assertthat_0.2.0   tibble_1.4.2       crayon_1.3.4      
[25] bindrcpp_0.2.2     RColorBrewer_1.1-2 purrr_0.2.5        glue_1.3.0        
[29] compiler_3.5.1     pillar_1.3.0       scales_1.0.0       extrafont_0.17    
[33] pkgconfig_2.0.2   
> 
> #cl <- makeCluster(parallel::detectCores())
> cl = "mclapply"
> #cl <- NULL
> 
> set.seed(3)
> 
> TT <- 40
> true_theta <- c(0.5, 0.5)
> lower <- 0
> upper <- 3.5
> sd_t <- 1
> init <- min(rgamma(1, 100, 100), upper - 1)
> a_logit <- 0.9
> dist_coef <- 0.5
> true_states <- generate_state(init, TT, lower, upper, sd_t, a = a_logit)
> 
> y <- hawkes_simulator(true_states[1], true_theta, NULL, 0, 10)
> for(tp in 1:TT){
+   y <- hawkes_simulator(true_states[tp], true_theta, y$history, tp * 10, tp * 10 + 10)
+ }
> 
> y_history <- y$history
> 
> lambda_fun <- stepfun(seq(10, TT*10 - 10, by = 10), y = true_states)
> kern <- function(x){return(decay_func(x, alpha = true_theta[1], delta = true_theta[2]))}
> #
> #y_history <- sim_hawkes(lambda_fun, NULL, kern, 0, TT*10, progressBar = FALSE)
> #y <- hist(y_history, breaks = seq(0, TT*10, by = 10), plot = FALSE)$counts
> 
> hist(y_history, breaks = TT * 10)
> 
> plot(lambda_fun, add = TRUE, col = "red")
> 
> simulator <- hawkes_simulator
> 
> inp <- list(
+   lower = lower,
+   upper = upper,
+   sd_t = sd_t,
+   a_logit = a_logit,
+   history = y_history,
+   simulator = simulator
+ )
> 
> loss = loss_hawkes
> 
> 
> Ntheta = 200
> Nx = 10000
> pacc = 0.05
> 
> lower_theta <- c(0.3, 0.3)
> upper_theta <- c(0.7, 0.7)
> 
> prior_sample <- data.frame(theta1 = runif(Ntheta, lower_theta[1], upper_theta[1]), theta2 = runif(Ntheta, lower_theta[2], upper_theta[2]))
> 
> prior_sample <- as.matrix(prior_sample, ncol = 2)
> 
> trans <- function(x, trans_args){
+   theta1 <- log(x[,1])
+   theta2 <- log(x[,2])
+   return(cbind(theta1, theta2))
+ }
> 
> invtrans <- function(x, trans_args){
+   theta1 <- exp(x[,1])
+   theta2 <- exp(x[,2])
+   return(cbind(theta1, theta2))
+ }
> 
> full_list <- SMC2_ABC(prior_sample, dprior = dHawkes, loss, loss_args = inp, Ntheta = Ntheta, Nx = Nx, pacc = pacc, cl = cl, dt = 10, ESS_threshold = 0.5, TT = TT, trans = trans, invtrans = invtrans, cov_coef = 0.25^2)
[1] 0.3002906 0.3720314 0.4816383 0.5599036 0.6982322
[1] 0.3047466 0.3934356 0.4892841 0.5894042 0.6973519
[1] "1. 185.869636450909"
[1] 0.3002906 0.3624157 0.4629021 0.5375077 0.6982322
[1] 0.3047466 0.3895592 0.4831783 0.5855536 0.6973519
[1] "2. 172.361050982239"
[1] 0.3002906 0.3605010 0.4507820 0.5309338 0.6982322
[1] 0.3047466 0.3851161 0.4761500 0.5836726 0.6973519
[1] "3. 163.883504508406"
[1] 0.3002906 0.3613931 0.4545478 0.5309338 0.6982322
[1] 0.3047466 0.3879766 0.4768813 0.5836726 0.6973519
[1] "4. 164.712051727452"
[1] 0.3002906 0.3567073 0.4419444 0.5147235 0.6982322
[1] 0.3047466 0.3813248 0.4732229 0.5808668 0.6973519
[1] "5. 155.981796733384"
[1] 0.3002906 0.3529030 0.4230349 0.5102384 0.6982322
[1] 0.3047466 0.3699705 0.4630407 0.5727140 0.6973519
[1] "6. 144.83229780951"
[1] 0.3002906 0.3520330 0.4137598 0.5068962 0.6982322
[1] 0.3047466 0.3591223 0.4568298 0.5525749 0.6973519
[1] "7. 136.178937887444"
[1] 0.3002906 0.3458090 0.4061430 0.5010158 0.6982322
[1] 0.3047466 0.3576757 0.4568298 0.5497470 0.6973519
[1] "8. 125.280964747788"
[1] 0.3002906 0.3536068 0.4198605 0.5069378 0.6982322
[1] 0.3047466 0.3591223 0.4567055 0.5525749 0.6973519
[1] "9. 139.082599971931"
[1] 0.3002906 0.3523801 0.4116191 0.5009856 0.6982322
[1] 0.3047466 0.3520360 0.4455840 0.5475495 0.6973519
[1] "10. 127.509966100608"
[1] 0.3002906 0.3434092 0.3842073 0.4801515 0.6982322
[1] 0.3047466 0.3444124 0.4312648 0.5397986 0.6973519
[1] "11. 102.106491587256"
[1] 0.3002906 0.3537833 0.4137598 0.5011091 0.6982322
[1] 0.3047466 0.3629841 0.4586462 0.5525749 0.6973519
[1] "12. 133.228472106506"
[1] 0.3002906 0.3821034 0.4789278 0.5384601 0.6982322
[1] 0.3047466 0.3829501 0.4655307 0.5753019 0.6973519
[1] "13. 165.538576271779"
[1] 0.3002906 0.3720314 0.4645516 0.5342484 0.6982322
[1] 0.3047466 0.3807841 0.4630407 0.5727140 0.6973519
[1] "14. 160.109507059942"
[1] 0.3002906 0.3802565 0.4789278 0.5384601 0.6982322
[1] 0.3047466 0.3807841 0.4630407 0.5727140 0.6973519
[1] "15. 164.998328931572"
[1] 0.3002906 0.3787350 0.4755965 0.5384601 0.6982322
[1] 0.3047466 0.3699705 0.4568298 0.5612402 0.6973519
[1] "16. 160.657466798623"
[1] 0.3002906 0.3625494 0.4507820 0.5139448 0.6982322
[1] 0.3047466 0.3672387 0.4496933 0.5496108 0.6973519
[1] "17. 147.975206724161"
[1] 0.3002906 0.3624157 0.4465552 0.5152473 0.6982322
[1] 0.3047466 0.3629841 0.4455840 0.5450161 0.6973519
[1] "18. 146.388599409256"
[1] 0.3002906 0.3578248 0.4359739 0.5087240 0.6982322
[1] 0.3047466 0.3589086 0.4356049 0.5406502 0.6973519
[1] "19. 137.202411955118"
[1] 0.3002906 0.3567073 0.4287466 0.5068962 0.6982322
[1] 0.3047466 0.3522068 0.4287996 0.5353864 0.6973519
[1] "20. 130.757655615488"
[1] 0.3002906 0.3553051 0.4230349 0.5064727 0.6982322
[1] 0.3047466 0.3485428 0.4181270 0.5344829 0.6973519
[1] "21. 124.770812823587"
[1] 0.3002906 0.3549246 0.4164079 0.5031787 0.6982322
[1] 0.3047466 0.3444124 0.4150141 0.5247444 0.6973519
[1] "22. 118.168877607727"
[1] 0.3002906 0.3605010 0.4411075 0.5104038 0.6982322
[1] 0.3047466 0.3522068 0.4218153 0.5349370 0.6973519
[1] "23. 130.895681100188"
[1] 0.3002906 0.3549246 0.4137598 0.5018290 0.6982322
[1] 0.3047466 0.3520360 0.4249541 0.5349972 0.6973519
[1] "24. 123.366022817589"
[1] 0.3002906 0.3520330 0.4080151 0.4969733 0.6982322
[1] 0.3047466 0.3485428 0.4184017 0.5349972 0.6973519
[1] "25. 115.1202164906"
[1] 0.3002906 0.3523801 0.4103716 0.4973601 0.6982322
[1] 0.3047466 0.3507782 0.4218153 0.5349370 0.6973519
[1] "26. 115.550381333076"
[1] 0.3002906 0.3520330 0.4080151 0.4960206 0.6982322
[1] 0.3047466 0.3456426 0.4159995 0.5290367 0.6973519
[1] "27. 110.284168778577"
[1] 0.3002906 0.3549246 0.4125271 0.5011091 0.6982322
[1] 0.3047466 0.3589086 0.4323419 0.5373651 0.6973519
[1] "28. 121.542427874562"
[1] 0.3055162 0.4193808 0.4961849 0.5567716 0.6982322
[1] 0.3047466 0.3629841 0.4287996 0.5351568 0.6973519
[1] "29. 135.564719410061"
[1] 0.3093009 0.4559830 0.5017836 0.5642098 0.6982322
[1] 0.3047466 0.3619183 0.4184017 0.5276263 0.6973519
[1] "30. 116.933697418877"
[1] 0.3434092 0.4809986 0.5109101 0.5773467 0.6982322
[1] 0.3047466 0.3619183 0.4136746 0.5090122 0.6973519
[1] "31. 97.0804183455618"
[1] "resample"
[1] 0.3121226 0.4524560 0.4992723 0.5528670 0.7108511
[1] 0.2821265 0.3604395 0.4245213 0.5483834 0.6952618
[1] "SMC:  193.706047811535"
[1] 0.3121226 0.4408457 0.4964008 0.5441470 0.7108511
[1] 0.2821265 0.3594852 0.4162382 0.5382959 0.6952618
[1] "SMC:  186.519000528081"
[1] 0.3121226 0.4382937 0.4944751 0.5407857 0.7108511
[1] 0.2821265 0.3574281 0.4091237 0.5256119 0.6952618
[1] "SMC:  180.963007816101"
[1] 0.3121226 0.4382937 0.4944751 0.5414799 0.7108511
[1] 0.2821265 0.3591893 0.4125201 0.5269583 0.6952618
[1] "SMC:  181.459170262522"
[1] 0.3121226 0.4373882 0.4933690 0.5401193 0.7108511
[1] 0.2821265 0.3561770 0.4069580 0.5251592 0.6952618
[1] "SMC:  176.443443624772"
[1] 0.3121226 0.4352657 0.4932259 0.5398603 0.7108511
[1] 0.2821265 0.3531847 0.4044736 0.5228503 0.6952618
[1] "SMC:  171.026655267023"
[1] 0.3121226 0.4352657 0.4930892 0.5398603 0.7108511
[1] 0.2821265 0.3499929 0.4026038 0.5199237 0.6952618
[1] "SMC:  166.006966773341"
[1] 0.3121226 0.4288422 0.4911426 0.5365758 0.7108511
[1] 0.2821265 0.3499338 0.4026133 0.5200913 0.6952618
[1] "SMC:  160.52068052322"
[1] 0.3121226 0.4377635 0.4933625 0.5401193 0.7108511
[1] 0.2821265 0.3499338 0.4013402 0.5180225 0.6952618
[1] "SMC:  167.205418067362"
[1] 0.3121226 0.4321887 0.4919166 0.5359951 0.7108511
[1] 0.2821265 0.3447460 0.3987899 0.5123898 0.6952618
[1] "SMC:  156.2828851447"
[1] 0.3121226 0.4194177 0.4769605 0.5215708 0.7108511
[1] 0.2821265 0.3415958 0.3974930 0.5123898 0.6952618
[1] "SMC:  134.192467670049"
[1] 0.3121226 0.4314128 0.4904455 0.5297797 0.7108511
[1] 0.2821265 0.3522281 0.4026133 0.5197799 0.6952618
[1] "SMC:  158.351991350763"
[1] 0.3483024 0.4554929 0.4982690 0.5441470 0.7108511
[1] 0.2821265 0.3561770 0.4042272 0.5198358 0.6952618
[1] "SMC:  180.347654602671"
[1] 0.3483024 0.4492624 0.4964008 0.5414799 0.7108511
[1] 0.2821265 0.3561770 0.4042272 0.5198358 0.6952618
[1] "SMC:  176.367376917955"
[1] 0.3483024 0.4554929 0.4982690 0.5441470 0.7108511
[1] 0.2821265 0.3561770 0.4039090 0.5181664 0.6952618
[1] "SMC:  178.946698297666"
[1] 0.3483024 0.4554929 0.4985203 0.5449713 0.7108511
[1] 0.2821265 0.3531847 0.4013402 0.5123898 0.6952618
[1] "SMC:  176.302447196037"
[1] 0.3121226 0.4468688 0.4953795 0.5409203 0.7108511
[1] 0.2821265 0.3517885 0.4011700 0.5096589 0.6952618
[1] "SMC:  169.124312993734"
[1] 0.3483024 0.4436990 0.4953795 0.5414799 0.7108511
[1] 0.2821265 0.3499338 0.4001297 0.5084323 0.6952618
[1] "SMC:  167.969587312022"
[1] 0.3121226 0.4383827 0.4933690 0.5407409 0.7108511
[1] 0.2821265 0.3457885 0.3973961 0.5060736 0.6952618
[1] "SMC:  161.2421244786"
[1] 0.3121226 0.4382279 0.4932259 0.5401193 0.7108511
[1] 0.2821265 0.3416603 0.3924374 0.4995438 0.6952618
[1] "SMC:  155.842877131372"
[1] 0.3121226 0.4382937 0.4933625 0.5407409 0.7108511
[1] 0.2821265 0.3412718 0.3827909 0.4883597 0.6952618
[1] "SMC:  149.558872116317"
[1] 0.3121226 0.4383827 0.4935857 0.5414799 0.7108511
[1] 0.2821265 0.3412163 0.3803690 0.4636531 0.6952618
[1] "SMC:  143.851041018896"
[1] 0.3483024 0.4408457 0.4944751 0.5409203 0.7108511
[1] 0.2821265 0.3415958 0.3883429 0.4955375 0.6952618
[1] "SMC:  155.841630974223"
[1] 0.3121226 0.4373882 0.4930552 0.5374821 0.7108511
[1] 0.2821265 0.3415958 0.3906831 0.4990502 0.6952618
[1] "SMC:  149.393532590506"
[1] 0.3121226 0.4314128 0.4904455 0.5359038 0.7108511
[1] 0.2821265 0.3414024 0.3888843 0.4990502 0.6952618
[1] "SMC:  142.959185131546"
[1] 0.3121226 0.4321887 0.4906978 0.5359284 0.7108511
[1] 0.2821265 0.3414024 0.3906386 0.4980703 0.6952618
[1] "SMC:  143.342694407823"
[1] 0.3121226 0.4352657 0.4919166 0.5360690 0.7108511
[1] 0.2821265 0.3412163 0.3825764 0.4691458 0.6952618
[1] "SMC:  138.145202107713"
[1] 0.3121226 0.4362625 0.4923615 0.5359284 0.7108511
[1] 0.2821265 0.3457745 0.3973961 0.5045584 0.6952618
[1] "SMC:  149.413397002364"
[1] 0.3483024 0.4734629 0.5111007 0.5600486 0.7108511
[1] 0.2821265 0.3416603 0.3857289 0.4639773 0.6952618
[1] "SMC:  160.765967806023"
[1] 0.3558760 0.4797617 0.5144465 0.5651966 0.7108511
[1] 0.2821265 0.3414024 0.3815689 0.4518580 0.6952618
[1] "SMC:  150.477781043704"
[1] 0.3662305 0.4910848 0.5199466 0.5703423 0.7108511
[1] 0.2821265 0.3414024 0.3792317 0.4407376 0.6952618
[1] "SMC:  138.851713007012"
acceptance rate:  0.785 
[1] 0.3950311 0.5014736 0.5362690 0.5928296 0.6765995
[1] 0.3089491 0.3499338 0.3750594 0.4152088 0.6851480
[1] "32. 189.63547918211"
[1] 0.3950311 0.5094077 0.5407409 0.6113747 0.6765995
[1] 0.3089491 0.3487646 0.3736981 0.4044630 0.6851480
[1] "33. 173.034694477922"
[1] 0.3950311 0.5118423 0.5408306 0.6150722 0.6765995
[1] 0.3089491 0.3457850 0.3736981 0.4044630 0.6851480
[1] "34. 169.995969032058"
[1] 0.3950311 0.5097660 0.5407409 0.6113747 0.6765995
[1] 0.3089491 0.3487646 0.3736981 0.4067850 0.6851480
[1] "35. 172.321924037168"
[1] 0.3950311 0.5097660 0.5403265 0.6113747 0.6765995
[1] 0.3089491 0.3525862 0.3768391 0.4187255 0.6851480
[1] "36. 168.85531454733"
[1] 0.3950311 0.5118423 0.5407409 0.6150722 0.6765995
[1] 0.3089491 0.3534506 0.3777066 0.4191102 0.6851480
[1] "37. 160.096632362095"
[1] 0.4065555 0.5184052 0.5543075 0.6250239 0.6765995
[1] 0.3089491 0.3525862 0.3777066 0.4187255 0.6851480
[1] "38. 127.135839885556"
[1] 0.4065555 0.5141676 0.5444308 0.6171113 0.6765995
[1] 0.3089491 0.3552999 0.3815689 0.4216389 0.6851480
[1] "39. 141.971243966407"
[1] 0.4065555 0.5144228 0.5442416 0.6167385 0.6765995
[1] 0.3089491 0.3561770 0.3815689 0.4216389 0.6851480
[1] "40. 142.292287831297"
> 
> state_df <- get_state(full_list, probs = c(0.25, 0.5, 0.75))
> 
> state_df$state <- true_states
> 
> theta_df <- get_parameter(full_list)
> 
> 
> save.image()
> save(state_df, file = "state_df.RData")
> save(theta_df, file = "theta_df.RData")
> 
> 
> 
> ggplot(state_df) + aes(x = time, y = state, ymin = lower, ymax = upper) + geom_step() + geom_ribbon(alpha = 0.2, stat = "stepribbon", fill = "red") + geom_step(mapping = aes(x = time, y = med), col = "red") + ggthemes::theme_base() + scale_y_continuous(expand = c(0, 0)) + scale_x_continuous(expand = c(0, 0))
> 
> ggplot(theta_df[which(theta_df$time %% 5 == 0),]) + aes(x = value, weights = weight, col = factor(time)) + geom_density() + facet_wrap(~parameter, scales = "free")
> 
> proc.time()
     user    system   elapsed 
162691.75   1253.95  22617.72 
