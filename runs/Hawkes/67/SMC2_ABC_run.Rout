
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> library(parallel)
> library(StateSpaceInference)
> library(ggplot2)
> library(ggalt)
> sessionInfo()
R version 3.5.1 (2018-07-02)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: SUSE Linux Enterprise Server 12 SP2

Matrix products: default
BLAS/LAPACK: /pkg/suse12/software/openblas/0.2.20-gcc-6.4.0-2.28/lib/libopenblas_sandybridgep-r0.2.20.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] parallel  stats     graphics  grDevices utils     datasets  methods  
[8] base     

other attached packages:
[1] ggalt_0.4.0               ggplot2_3.1.0            
[3] StateSpaceInference_1.2.1

loaded via a namespace (and not attached):
 [1] Rcpp_1.0.0         Rttf2pt1_1.3.7     bindr_0.1.1        magrittr_1.5      
 [5] maps_3.3.0         MASS_7.3-51.1      tidyselect_0.2.5   munsell_0.5.0     
 [9] colorspace_1.3-2   R6_2.3.0           rlang_0.3.0.1      plyr_1.8.4        
[13] dplyr_0.7.8        grid_3.5.1         gtable_0.2.0       ash_1.0-15        
[17] KernSmooth_2.23-15 extrafontdb_1.0    withr_2.1.2        proj4_1.0-8       
[21] lazyeval_0.2.1     assertthat_0.2.0   tibble_1.4.2       crayon_1.3.4      
[25] bindrcpp_0.2.2     RColorBrewer_1.1-2 purrr_0.2.5        glue_1.3.0        
[29] compiler_3.5.1     pillar_1.3.0       scales_1.0.0       extrafont_0.17    
[33] pkgconfig_2.0.2   
> 
> #cl <- makeCluster(parallel::detectCores())
> cl = "mclapply"
> #cl <- NULL
> 
> set.seed(3)
> 
> TT <- 40
> true_theta <- c(0.5, 0.5)
> lower <- 0
> upper <- 3.5
> sd_t <- 1
> init <- min(rgamma(1, 100, 100), upper - 1)
> a_logit <- 0.9
> dist_coef <- 0.5
> true_states <- generate_state(init, TT, lower, upper, sd_t, a = a_logit)
> 
> y <- NULL
> 
> #y <- hawkes_simulator(true_states[1], true_theta, NULL, 0, 10)
> for(tp in 1:TT){
+   y <- hawkes_simulator(true_states[tp], true_theta, y$history, tp * 10 - 10, tp * 10)
+ }
> 
> y_history <- y$history
> 
> lambda_fun <- stepfun(seq(10, TT*10 - 10, by = 10), y = true_states)
> kern <- function(x){return(decay_func(x, alpha = true_theta[1], delta = true_theta[2]))}
> #
> #y_history <- sim_hawkes(lambda_fun, NULL, kern, 0, TT*10, progressBar = FALSE)
> #y <- hist(y_history, breaks = seq(0, TT*10, by = 10), plot = FALSE)$counts
> 
> hist(y_history, breaks = TT * 10)
> 
> plot(lambda_fun, add = TRUE, col = "red")
> 
> simulator <- hawkes_simulator
> 
> inp <- list(
+   lower = lower,
+   upper = upper,
+   sd_t = sd_t,
+   a_logit = a_logit,
+   history = y_history,
+   simulator = simulator
+ )
> 
> loss = loss_hawkes
> 
> 
> Ntheta = 200
> Nx = 10000
> pacc = 0.05
> 
> lower_theta <- c(0.3, 0.3)
> upper_theta <- c(0.7, 0.7)
> 
> prior_sample <- data.frame(theta1 = runif(Ntheta, lower_theta[1], upper_theta[1]), theta2 = runif(Ntheta, lower_theta[2], upper_theta[2]))
> 
> prior_sample <- as.matrix(prior_sample, ncol = 2)
> 
> trans <- function(x, trans_args){
+   theta1 <- log(x[,1])
+   theta2 <- log(x[,2])
+   return(cbind(theta1, theta2))
+ }
> 
> invtrans <- function(x, trans_args){
+   theta1 <- exp(x[,1])
+   theta2 <- exp(x[,2])
+   return(cbind(theta1, theta2))
+ }
> 
> full_list <- SMC2_ABC(prior_sample, dprior = dHawkes, loss, loss_args = inp, Ntheta = Ntheta, Nx = Nx, pacc = pacc, cl = cl, dt = 10, ESS_threshold = 0.5, TT = TT, trans = trans, invtrans = invtrans, cov_coef = 0.25^2)
[1] 0.3002906 0.3768593 0.4809986 0.5633278 0.6982322
[1] 0.3047466 0.3929101 0.4914627 0.5863509 0.6954456
[1] "1. 186.614121567088"
[1] 0.3002906 0.3571747 0.4545478 0.5371446 0.6982322
[1] 0.3047466 0.3889301 0.4866274 0.5829750 0.6954456
[1] "2. 165.90744216366"
[1] 0.3002906 0.3531863 0.4411075 0.5168888 0.6982322
[1] 0.3047466 0.3827190 0.4821643 0.5668558 0.6954456
[1] "3. 155.507607462479"
[1] 0.3002906 0.3530772 0.4381908 0.5136618 0.6982322
[1] 0.3047466 0.3759080 0.4703738 0.5550205 0.6954456
[1] "4. 150.563498668395"
[1] 0.3002906 0.3523801 0.4285804 0.5096770 0.6982322
[1] 0.3047466 0.3701879 0.4671410 0.5497470 0.6954456
[1] "5. 143.206933205753"
[1] 0.3002906 0.3504491 0.4133178 0.5030531 0.6982322
[1] 0.3047466 0.3693185 0.4639204 0.5468776 0.6954456
[1] "6. 129.936144286758"
[1] 0.3002906 0.3504491 0.4133178 0.5030531 0.6982322
[1] 0.3047466 0.3625494 0.4621609 0.5397986 0.6954456
[1] "7. 127.003797475895"
[1] 0.3002906 0.3620145 0.4545478 0.5342484 0.6982322
[1] 0.3047466 0.3851161 0.4762280 0.5668558 0.6954456
[1] "8. 162.707671128289"
[1] 0.3002906 0.4142018 0.4944388 0.5596599 0.6982322
[1] 0.3047466 0.3824095 0.4621979 0.5550205 0.6954456
[1] "9. 172.003533004396"
[1] 0.3002906 0.3895003 0.4795173 0.5464528 0.6982322
[1] 0.3047466 0.3897689 0.4821643 0.5714714 0.6954456
[1] "10. 172.270123537843"
[1] 0.3002906 0.4094747 0.4872997 0.5524578 0.6982322
[1] 0.3047466 0.3897689 0.4762280 0.5714714 0.6954456
[1] "11. 172.983272060504"
[1] 0.3002906 0.4285804 0.4999000 0.5649632 0.6982322
[1] 0.3047466 0.3897689 0.4762280 0.5678318 0.6954456
[1] "12. 175.608934035874"
[1] 0.3002906 0.4164819 0.4958564 0.5596599 0.6982322
[1] 0.3047466 0.3831304 0.4696181 0.5620238 0.6954456
[1] "13. 171.034478242986"
[1] 0.3002906 0.4164819 0.4958564 0.5596599 0.6982322
[1] 0.3047466 0.3831304 0.4671410 0.5550205 0.6954456
[1] "14. 169.726652746396"
[1] 0.3002906 0.4381908 0.5020806 0.5716353 0.6982322
[1] 0.3047466 0.3831304 0.4696181 0.5601303 0.6954456
[1] "15. 169.933009974895"
[1] 0.3002906 0.4211071 0.4978063 0.5633278 0.6982322
[1] 0.3047466 0.3827190 0.4621979 0.5497470 0.6954456
[1] "16. 166.651130639914"
[1] 0.3002906 0.4186139 0.4958564 0.5606347 0.6982322
[1] 0.3047466 0.3827190 0.4621979 0.5497470 0.6954456
[1] "17. 165.652177139951"
[1] 0.3002906 0.4142018 0.4944388 0.5596599 0.6982322
[1] 0.3047466 0.3759080 0.4569542 0.5432048 0.6954456
[1] "18. 160.208643100564"
[1] 0.3002906 0.4112686 0.4872997 0.5477000 0.6982322
[1] 0.3047466 0.3759080 0.4569542 0.5432048 0.6954456
[1] "19. 156.917022520223"
[1] 0.3002906 0.4065555 0.4822780 0.5474742 0.6982322
[1] 0.3047466 0.3701879 0.4551099 0.5397986 0.6954456
[1] "20. 153.08547993035"
[1] 0.3002906 0.4042954 0.4798691 0.5385971 0.6982322
[1] 0.3047466 0.3694483 0.4498694 0.5352506 0.6954456
[1] "21. 148.882503716809"
[1] 0.3002906 0.3895003 0.4795173 0.5345243 0.6982322
[1] 0.3047466 0.3625494 0.4416508 0.5297361 0.6954456
[1] "22. 142.568373237247"
[1] 0.3002906 0.3895003 0.4783382 0.5342484 0.6982322
[1] 0.3047466 0.3633394 0.4441549 0.5306063 0.6954456
[1] "23. 142.861123968578"
[1] 0.3002906 0.3895003 0.4783382 0.5298289 0.6982322
[1] 0.3047466 0.3694483 0.4551099 0.5349972 0.6954456
[1] "24. 144.690670564968"
[1] 0.3002906 0.3842073 0.4673236 0.5136618 0.6982322
[1] 0.3047466 0.3701879 0.4605869 0.5352506 0.6954456
[1] "25. 143.778899187486"
[1] 0.3002906 0.3768593 0.4563778 0.5096879 0.6982322
[1] 0.3047466 0.3694483 0.4605869 0.5352506 0.6954456
[1] "26. 140.362459629636"
[1] 0.3002906 0.3655346 0.4411075 0.5064727 0.6982322
[1] 0.3047466 0.3701879 0.4621609 0.5397986 0.6954456
[1] "27. 135.62367631326"
[1] 0.3002906 0.4382752 0.5014794 0.5633278 0.6982322
[1] 0.3047466 0.3824095 0.4621979 0.5495654 0.6954456
[1] "28. 147.887858993324"
[1] 0.3002906 0.4308404 0.4958564 0.5491699 0.6982322
[1] 0.3047466 0.3759080 0.4569542 0.5432048 0.6954456
[1] "29. 137.105023639996"
[1] 0.3002906 0.4944388 0.5348457 0.5832366 0.6982322
[1] 0.3047466 0.3694483 0.4301877 0.5306063 0.6954456
[1] "30. 116.408905645758"
[1] 0.3002906 0.4872997 0.5231742 0.5808401 0.6982322
[1] 0.3047466 0.3916291 0.4762280 0.5714714 0.6954456
[1] "31. 136.211266982175"
[1] 0.3002906 0.5014794 0.5528123 0.6011503 0.6982322
[1] 0.3047466 0.3831304 0.4671410 0.5601303 0.6954456
[1] "32. 124.633227233226"
[1] 0.3002906 0.5020806 0.5554018 0.6070587 0.6982322
[1] 0.3047466 0.3897689 0.4762280 0.5668558 0.6954456
[1] "33. 127.536625763187"
[1] 0.3002906 0.5014794 0.5528123 0.6015658 0.6982322
[1] 0.3047466 0.3831304 0.4671410 0.5528816 0.6954456
[1] "34. 122.94244625012"
[1] 0.3002906 0.5014794 0.5528123 0.6011503 0.6982322
[1] 0.3047466 0.3827190 0.4569542 0.5468776 0.6954456
[1] "35. 120.102669699178"
[1] 0.3002906 0.4999000 0.5491699 0.5971002 0.6982322
[1] 0.3047466 0.3824095 0.4470162 0.5397986 0.6954456
[1] "36. 117.748052201553"
[1] 0.3002906 0.5064727 0.5606347 0.6089333 0.6982322
[1] 0.3047466 0.3889301 0.4696181 0.5620238 0.6954456
[1] "37. 120.584445016538"
[1] 0.3002906 0.5130682 0.5728284 0.6164335 0.6982322
[1] 0.3047466 0.3827190 0.4569542 0.5495654 0.6954456
[1] "38. 107.630953085912"
[1] 0.3002906 0.5168888 0.5728284 0.6166206 0.6982322
[1] 0.3047466 0.3827190 0.4569542 0.5432048 0.6954456
[1] "39. 106.151152299662"
[1] 0.3002906 0.5136618 0.5728284 0.6166206 0.6982322
[1] 0.3047466 0.3759080 0.4416508 0.5297361 0.6954456
[1] "40. 103.057177370713"
There were 50 or more warnings (use warnings() to see the first 50)
> 
> state_df <- get_state(full_list, probs = c(0.25, 0.5, 0.75))
> 
> state_df$state <- true_states
> 
> theta_df <- get_parameter(full_list)
> 
> 
> save.image()	
> save(state_df, file = "state_df.RData")	
> save(theta_df, file = "theta_df.RData")
> 
> 
> 
> ggplot(state_df) + aes(x = time, y = state, ymin = lower, ymax = upper) + geom_step() + geom_ribbon(alpha = 0.2, stat = "stepribbon", fill = "red") + geom_step(mapping = aes(x = time, y = med), col = "red") + ggthemes::theme_base() + scale_y_continuous(expand = c(0, 0)) + scale_x_continuous(expand = c(0, 0))
> 
> ggplot(theta_df[which(theta_df$time %% 5 == 0),]) + aes(x = value, weights = weight, col = factor(time)) + geom_density() + facet_wrap(~parameter, scales = "free")
> 
> proc.time()
     user    system   elapsed 
88669.371   595.360  6360.911 
