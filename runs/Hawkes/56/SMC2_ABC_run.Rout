
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> library(parallel)
> library(StateSpaceInference)
> library(ggplot2)
> library(ggalt)
> sessionInfo()
R version 3.5.1 (2018-07-02)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: SUSE Linux Enterprise Server 12 SP2

Matrix products: default
BLAS/LAPACK: /pkg/suse12/software/openblas/0.2.20-gcc-6.4.0-2.28/lib/libopenblas_sandybridgep-r0.2.20.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] parallel  stats     graphics  grDevices utils     datasets  methods  
[8] base     

other attached packages:
[1] ggalt_0.4.0               ggplot2_3.1.0            
[3] StateSpaceInference_1.1.1

loaded via a namespace (and not attached):
 [1] Rcpp_1.0.0         Rttf2pt1_1.3.7     bindr_0.1.1        magrittr_1.5      
 [5] maps_3.3.0         MASS_7.3-51.1      tidyselect_0.2.5   munsell_0.5.0     
 [9] colorspace_1.3-2   R6_2.3.0           rlang_0.3.0.1      plyr_1.8.4        
[13] dplyr_0.7.8        grid_3.5.1         gtable_0.2.0       ash_1.0-15        
[17] KernSmooth_2.23-15 extrafontdb_1.0    withr_2.1.2        proj4_1.0-8       
[21] lazyeval_0.2.1     assertthat_0.2.0   tibble_1.4.2       crayon_1.3.4      
[25] bindrcpp_0.2.2     RColorBrewer_1.1-2 purrr_0.2.5        glue_1.3.0        
[29] compiler_3.5.1     pillar_1.3.0       scales_1.0.0       extrafont_0.17    
[33] pkgconfig_2.0.2   
> 
> #cl <- makeCluster(parallel::detectCores())
> cl = "mclapply"
> #cl <- NULL
> 
> set.seed(3)
> 
> TT <- 20
> true_theta <- c(0.5, 0.5)
> lower <- 0
> upper <- 3.5
> sd_t <- 1
> init <- min(rgamma(1, 100, 100), upper - 1)
> a_logit <- 0.9
> dist_coef <- 0.5
> true_states <- generate_state(init, TT, lower, upper, sd_t, a = a_logit)
> 
> y <- hawkes_simulator(true_states[1], true_theta, NULL, 0, 10)
> for(tp in 1:TT){
+   y <- hawkes_simulator(true_states[tp], true_theta, y$history, tp * 10, tp * 10 + 10)
+ }
> 
> y_history <- y$history
> 
> lambda_fun <- stepfun(seq(10, TT*10 - 10, by = 10), y = true_states)
> kern <- function(x){return(decay_func(x, alpha = true_theta[1], delta = true_theta[2]))}
> #
> #y_history <- sim_hawkes(lambda_fun, NULL, kern, 0, TT*10, progressBar = FALSE)
> #y <- hist(y_history, breaks = seq(0, TT*10, by = 10), plot = FALSE)$counts
> 
> hist(y_history, breaks = TT * 10)
> 
> plot(lambda_fun, add = TRUE, col = "red")
> 
> simulator <- hawkes_simulator
> 
> inp <- list(
+   lower = lower,
+   upper = upper,
+   sd_t = sd_t,
+   a_logit = a_logit,
+   history = y_history,
+   simulator = simulator
+ )
> 
> loss = loss_hawkes
> 
> 
> Ntheta = 20
> Nx = 1000000
> pacc = 0.00005
> 
> lower_theta <- c(0.3, 0.3)
> upper_theta <- c(0.7, 0.7)
> 
> prior_sample <- data.frame(theta1 = runif(Ntheta, lower_theta[1], upper_theta[1]), theta2 = runif(Ntheta, lower_theta[2], upper_theta[2]))
> 
> prior_sample <- as.matrix(prior_sample, ncol = 2)
> 
> trans <- function(x, trans_args){
+   theta1 <- log(x[,1])
+   theta2 <- log(x[,2])
+   return(cbind(theta1, theta2))
+ }
> 
> invtrans <- function(x, trans_args){
+   theta1 <- exp(x[,1])
+   theta2 <- exp(x[,2])
+   return(cbind(theta1, theta2))
+ }
> 
> full_list <- SMC2_ABC(prior_sample, dprior = dHawkes, loss, loss_args = inp, Ntheta = Ntheta, Nx = Nx, pacc = pacc, cl = cl, dt = 10, ESS_threshold = 0.5, TT = TT, trans = trans, invtrans = invtrans, cov_coef = 0.25^2)
[1] 0.3103108 0.4333488 0.5567411 0.6470414 0.6901670
[1] 0.3261157 0.4188677 0.4951101 0.5425521 0.6603402
[1] "1. 19.8907670324993"
[1] 0.3307000 0.4062070 0.5408208 0.6470414 0.6901670
[1] 0.3321762 0.4188677 0.4951101 0.5441620 0.6603402
[1] "2. 19.3828796345184"
[1] 0.3103108 0.4030567 0.5233024 0.6117675 0.6901670
[1] 0.3321762 0.3884798 0.4862104 0.5441620 0.6603402
[1] "3. 18.8542145835573"
[1] 0.3307000 0.3936057 0.4979070 0.5961334 0.6901670
[1] 0.3321762 0.3884798 0.4730524 0.5441620 0.6603402
[1] "4. 18.0115990941833"
[1] 0.3307000 0.3936057 0.4979070 0.6117675 0.6901670
[1] 0.3321762 0.3884798 0.4694319 0.5441620 0.6603402
[1] "5. 17.3643901689464"
[1] 0.3307000 0.3936057 0.4979070 0.5961334 0.6901670
[1] 0.3321762 0.3868122 0.4694319 0.5441620 0.6603402
[1] "6. 16.9259921627697"
[1] 0.3103108 0.3857100 0.4610396 0.5726793 0.6901670
[1] 0.3321762 0.3884798 0.4730524 0.5441620 0.6603402
[1] "7. 16.0032753039733"
[1] 0.3103108 0.3857100 0.4610396 0.5726793 0.6901670
[1] 0.3321762 0.3884798 0.4730524 0.5441620 0.6603402
[1] "8. 15.7742524384329"
[1] 0.3307000 0.3936057 0.4979070 0.5726793 0.6901670
[1] 0.3321762 0.3884798 0.4730524 0.5441620 0.6603402
[1] "9. 16.0521096604096"
[1] 0.3360385 0.5070189 0.5408208 0.6143210 0.6901670
[1] 0.3321762 0.3581199 0.4484084 0.5261399 0.6603402
[1] "10. 13.8816309410129"
[1] 0.3307000 0.4333488 0.5233024 0.5881392 0.6901670
[1] 0.3321762 0.3884798 0.4598944 0.5420154 0.6603402
[1] "11. 14.6148813452101"
[1] 0.3620229 0.5070189 0.5567411 0.6143210 0.6901670
[1] 0.3321762 0.4249507 0.4730524 0.5420154 0.6603402
[1] "12. 13.018810028275"
[1] 0.3936057 0.5268882 0.5623147 0.6143210 0.6901670
[1] 0.3321762 0.4249507 0.4730524 0.5420154 0.6603402
[1] "13. 12.0291677235288"
[1] 0.3936057 0.5161309 0.5567411 0.6143210 0.6901670
[1] 0.3321762 0.3890356 0.4598944 0.5420154 0.6603402
[1] "14. 11.7815899814897"
[1] 0.3620229 0.5161309 0.5511676 0.6117675 0.6901670
[1] 0.3321762 0.3890356 0.4598944 0.5420154 0.6603402
[1] "15. 11.6530953770062"
[1] 0.3936057 0.5268882 0.5567411 0.6393808 0.6901670
[1] 0.3261157 0.3890356 0.4598944 0.5262905 0.6603402
[1] "16. 11.5673195776086"
[1] 0.3936057 0.5161309 0.5567411 0.6393808 0.6901670
[1] 0.3321762 0.3890356 0.4598944 0.5262905 0.6603402
[1] "17. 11.0952588635152"
[1] 0.3936057 0.5161309 0.5567411 0.6393808 0.6901670
[1] 0.3321762 0.3890356 0.4484084 0.5261399 0.6603402
[1] "18. 11.1144528040831"
[1] 0.3936057 0.5268882 0.5567411 0.6502731 0.6901670
[1] 0.3321762 0.3890356 0.4447880 0.5262905 0.6603402
[1] "19. 9.86777180379251"
[1] "resample"
[1] 0.4855830 0.5110674 0.5570380 0.6154381 0.6780762
[1] 0.3414903 0.4007677 0.5025227 0.5366213 0.6142450
[1] "SMC:  19.6791891524194"
[1] 0.4336659 0.5110674 0.5570380 0.6154381 0.6780762
[1] 0.3414903 0.4007677 0.5025227 0.5320516 0.6142450
[1] "SMC:  19.4320851146257"
[1] 0.4336659 0.5106029 0.5480534 0.6071167 0.6780762
[1] 0.3414903 0.3973897 0.4731288 0.5320516 0.6142450
[1] "SMC:  17.8022361157624"
[1] 0.4336659 0.5106029 0.5457341 0.6084668 0.6780762
[1] 0.3414903 0.3881267 0.4731288 0.5320516 0.6142450
[1] "SMC:  17.2487583241334"
[1] 0.4855830 0.5106029 0.5423211 0.6084668 0.6780762
[1] 0.3414903 0.3776814 0.4339056 0.5282790 0.6142450
[1] "SMC:  16.0361038371313"
[1] 0.4855830 0.5106029 0.5457341 0.6154381 0.6780762
[1] 0.3414903 0.3881267 0.4426283 0.5282790 0.6142450
[1] "SMC:  16.7541595554567"
[1] 0.4336659 0.5106029 0.5457341 0.6154381 0.6780762
[1] 0.3414903 0.3776814 0.4339056 0.5282790 0.6142450
[1] "SMC:  16.1130841483089"
[1] 0.4336659 0.5096535 0.5283248 0.6154381 0.6780762
[1] 0.3414903 0.3757878 0.4339056 0.5282790 0.6142450
[1] "SMC:  14.8397144492663"
[1] 0.4336659 0.5106029 0.5421199 0.6154381 0.6780762
[1] 0.3414903 0.3776814 0.4701534 0.5282790 0.6142450
[1] "SMC:  15.1324800663841"
[1] 0.4336659 0.5096535 0.5421199 0.6084668 0.6780762
[1] 0.3414903 0.3776814 0.4731288 0.5282790 0.6142450
[1] "SMC:  15.7899219652818"
[1] 0.4336659 0.5106029 0.5421199 0.6084668 0.6780762
[1] 0.3414903 0.3881267 0.4731288 0.5320516 0.6142450
[1] "SMC:  16.2370734854177"
[1] 0.4855830 0.5110674 0.5480534 0.6071167 0.6780762
[1] 0.3414903 0.4081946 0.5069823 0.5405512 0.6142450
[1] "SMC:  16.9962257938993"
[1] 0.4855830 0.5110674 0.5570380 0.6084668 0.6780762
[1] 0.3414903 0.4071098 0.5069823 0.5405512 0.6142450
[1] "SMC:  18.1416514426926"
[1] 0.4855830 0.5110674 0.5480534 0.6071167 0.6780762
[1] 0.3414903 0.4071098 0.5051135 0.5405512 0.6142450
[1] "SMC:  17.7932212571663"
[1] 0.4855830 0.5110674 0.5480534 0.5860787 0.6780762
[1] 0.3414903 0.4040221 0.5025227 0.5380716 0.6142450
[1] "SMC:  16.6843916108772"
[1] 0.4855830 0.5110674 0.5480534 0.6154381 0.6780762
[1] 0.3414903 0.4007677 0.5006539 0.5366213 0.6142450
[1] "SMC:  16.8814838651192"
[1] 0.4855830 0.5109193 0.5480534 0.5860787 0.6780762
[1] 0.3414903 0.4007677 0.5006539 0.5366213 0.6142450
[1] "SMC:  15.9180634864485"
[1] 0.4855830 0.5109193 0.5501714 0.6071167 0.6780762
[1] 0.3414903 0.4007677 0.5006539 0.5361379 0.6142450
[1] "SMC:  15.5486942743921"
[1] 0.4855830 0.5109193 0.5570380 0.6071167 0.6780762
[1] 0.3414903 0.4007677 0.5006539 0.5361379 0.6142450
[1] "SMC:  15.5039832367713"
acceptance rate:  0.6 
[1] 0.4336659 0.5501714 0.5575361 0.6502731 0.6780762
[1] 0.3729079 0.4001504 0.5361379 0.5420154 0.6142450
[1] "20. 19.3199381761978"
> 
> state_df <- get_state(full_list, probs = c(0.25, 0.5, 0.75))
> 
> state_df$state <- true_states
> 
> theta_df <- get_parameter(full_list)
> 
> 
> save.image()
> save(state_df, file = "state_df.RData")
> save(theta_df, file = "theta_df.RData")
> 
> 
> 
> ggplot(state_df) + aes(x = time, y = state, ymin = lower, ymax = upper) + geom_step() + geom_ribbon(alpha = 0.2, stat = "stepribbon", fill = "red") + geom_step(mapping = aes(x = time, y = med), col = "red") + ggthemes::theme_base() + scale_y_continuous(expand = c(0, 0)) + scale_x_continuous(expand = c(0, 0))
> 
> ggplot(theta_df[which(theta_df$time %% 5 == 0),]) + aes(x = value, weights = weight, col = factor(time)) + geom_density() + facet_wrap(~parameter, scales = "free")
> 
> proc.time()
      user     system    elapsed 
954918.704   5792.624 100180.553 
